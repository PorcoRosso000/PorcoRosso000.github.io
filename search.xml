<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>气缸控制</title>
      <link href="/posts/e724d91b.html"/>
      <url>/posts/e724d91b.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><hr>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>变频器控制</title>
      <link href="/posts/750cedb1.html"/>
      <url>/posts/750cedb1.html</url>
      
        <content type="html"><![CDATA[<p>变频器控制</p><span id="more"></span><hr><h1 id="变频器参数设置"><a href="#变频器参数设置" class="headerlink" title="变频器参数设置"></a>变频器参数设置</h1><h2 id="变频器参数设置-1"><a href="#变频器参数设置-1" class="headerlink" title="变频器参数设置"></a>变频器参数设置</h2><p>HONWIN TECH 和为盛泰  V20-4T 0.75GB  变频器</p><pre class=" language-markdown"><code class="language-markdown">P01.00  运行命令给定方式  设1  端子命令方式P10.00  X1 端子功能选择   设1  正转运行（FWD）P10.01  X2 端子功能选择   设2  反转运行（REV）P10.02  X3 端子功能选择   设12 故障复位（RESET）以下根据电机铭牌设置P63.00 电机额定功率 设0.4/0.2P63.01 电机额定电压 设380P63.02 电机额定电流 设0.9/0.8P63.03 P63.03 设50P63.04 电机额定转速 设1355/1340P63.05 电机极数 设4</code></pre><h2 id="变频器控制方式"><a href="#变频器控制方式" class="headerlink" title="变频器控制方式"></a>变频器控制方式</h2><pre class=" language-markdown"><code class="language-markdown">串口通讯</code></pre>]]></content>
      
      
      <categories>
          
          <category> 变频器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 变频器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伺服控制</title>
      <link href="/posts/44c71ac0.html"/>
      <url>/posts/44c71ac0.html</url>
      
        <content type="html"><![CDATA[<p>伺服控制</p><span id="more"></span><hr><h1 id="伺服接线"><a href="#伺服接线" class="headerlink" title="伺服接线"></a>伺服接线</h1><h2 id="桢正伺服IO接线"><a href="#桢正伺服IO接线" class="headerlink" title="桢正伺服IO接线"></a>桢正伺服IO接线</h2><p>电源11-P24V,9-N24V<br>抱闸3-P24V,16-BK+<br>限位10和17短接，8-正限位，7-负限位</p><p><img src="/posts/44c71ac0/%E6%A1%A2%E6%AD%A3%E4%BC%BA%E6%9C%8D%E5%BC%95%E8%84%9A%E5%AE%9A%E4%B9%89.png"></p><h2 id="汇川伺服IO接线"><a href="#汇川伺服IO接线" class="headerlink" title="汇川伺服IO接线"></a>汇川伺服IO接线</h2><p>pnp抱闸接线方法</p><p>13接N24V,10接正限位，9接负限位<br>抱闸5接P24V,4接继电器线圈</p><p><img src="/posts/44c71ac0/%E6%B1%87%E5%B7%9D%E4%BC%BA%E6%9C%8D%E4%BF%A1%E5%8F%B7%E8%A1%A8.png"></p><p>汇川默认抱闸npn接线图</p><p><img src="/posts/44c71ac0/%E6%B1%87%E5%B7%9D%E4%BC%BA%E6%9C%8D%E6%8A%B1%E9%97%B8%E6%A0%87%E5%87%86%E6%8E%A5%E7%BA%BF%E5%9B%BE.png"></p><h2 id="减速比"><a href="#减速比" class="headerlink" title="减速比"></a>减速比</h2><h3 id="伺服电机减速机速比的定义"><a href="#伺服电机减速机速比的定义" class="headerlink" title="伺服电机减速机速比的定义"></a>伺服电机减速机速比的定义</h3><p>伺服电机减速机速比(speed ratio)是指伺服电机与减速机之间的转速之比。具体来说，如果伺服电机的转速为n1，减速机输出轴的转速为n2，则速比I可以定义为I=n1/n2</p><h3 id="伺服电机减速机速比的计算方法"><a href="#伺服电机减速机速比的计算方法" class="headerlink" title="伺服电机减速机速比的计算方法"></a>伺服电机减速机速比的计算方法</h3><p>伺服电机减速机速比的计算方法相对简单，只需将电机的转速除以减速机输出轴的转速即可得到。例如，如果伺服电机的转速为3000转/分钟，减速机输出轴的转速为50转/分钟，则伺服电机减速机速比为3000/50=60</p><h2 id="螺距（Pitch）"><a href="#螺距（Pitch）" class="headerlink" title="螺距（Pitch）"></a>螺距（Pitch）</h2><p>指相邻两螺纹牙对应点之间的轴向距离（平行于螺纹轴线测量），通常用符号 <strong>P</strong> 表示，单位为毫米（mm）或英寸（inch）。</p><p>对于<strong>单线螺纹</strong>：螺距=导程（即螺纹旋转一周前进的距离）。</p><p>对于<strong>多线螺纹</strong>：导程=螺距×线数（如双线螺纹的导程为2P）。</p><h2 id="如何计算电机的转速"><a href="#如何计算电机的转速" class="headerlink" title="如何计算电机的转速"></a>如何计算电机的转速</h2><p>如何计算电机转速，已知 伺服实际运动速度mm/s，减速比，还有螺距</p><pre><code>实际运行速度/螺距 * 60 = 减速机的实际转速减速机的实际转速 * 减速比 = 电机转速</code></pre>]]></content>
      
      
      <categories>
          
          <category> 伺服 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 伺服 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>plc伺服编程学习</title>
      <link href="/posts/b5ebe2ab.html"/>
      <url>/posts/b5ebe2ab.html</url>
      
        <content type="html"><![CDATA[<p> 伺服学习</p><span id="more"></span><hr><p>RLY   的plc属于继电器类型的plc，只能输出低频率的脉冲，频率高了会损坏，上限大概是1000hz</p><p>DC 的plc属于晶体管类型的plc，可以输出高频率的脉冲，频率是100khz</p><h1 id="伺服轴控制方式"><a href="#伺服轴控制方式" class="headerlink" title="伺服轴控制方式"></a>伺服轴控制方式</h1><p>1.通过工艺对象进行控制</p><p>2.通过报文进行控制</p><p>伺服一般命名AXIS</p><h1 id="工艺对象驱动器"><a href="#工艺对象驱动器" class="headerlink" title="工艺对象驱动器"></a>工艺对象驱动器</h1><p>可以选用PTO脉冲的方式对轴进行控制</p><pre class=" language-markdown"><code class="language-markdown">   使用脉冲方式控制需要接必要的DI DO线   DI:上限传感器  原点传感器  下限传感器  伺服完成信号   伺服准备   DO：脉冲 方向 伺服复位 使能<span class="token code keyword">           </span>   使用脉冲方向进行控制只能使用Q0.0等系统自动分配的点，自动分配的点有脉冲的功能，总共可以搞4个伺服   使用PTO方式进行控制，编码器可以直接接在plc的i点上，正常是接在伺服驱动器上，接在plc上可以直接读取编码器信息，知道实时脉冲数，接在驱动器上plc和编码器之间没有交互，通过高速计数器进行脉冲的转换，高速计数器要在plc属性中随便选一个打开，高速计数器的工作模式要和编码器保持一致   在使用PTO时要在plc属性中打开脉冲发生器</code></pre><p>也可以选用PROFIdrive(总线)通信的方式进行控制</p><h1 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a>编码器</h1><h2 id="绝对式编码器"><a href="#绝对式编码器" class="headerlink" title="绝对式编码器"></a>绝对式编码器</h2><p>机械绝对，不会丢原点</p><p>电子绝对，电池没电会丢原点</p><h2 id="增量式编码器"><a href="#增量式编码器" class="headerlink" title="增量式编码器"></a>增量式编码器</h2><p>断电立马会丢原点</p>]]></content>
      
      
      <categories>
          
          <category> 伺服 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 伺服 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电气接线</title>
      <link href="/posts/9fb3a31b.html"/>
      <url>/posts/9fb3a31b.html</url>
      
        <content type="html"><![CDATA[<p>电气各部件接线</p><span id="more"></span><hr><h1 id="电路接线"><a href="#电路接线" class="headerlink" title="电路接线"></a>电路接线</h1><h2 id="启动-停止-复位-手自动-急停"><a href="#启动-停止-复位-手自动-急停" class="headerlink" title="启动 停止 复位 手自动 急停"></a>启动 停止 复位 手自动 急停</h2><pre class=" language-markdown"><code class="language-markdown">开关都接I点，急停以外都接常开，急停接常闭单触点按钮，上侧接p24v多个开关p24v可以串在一起双触点按钮，没有安装触点的上侧接n24v,多个开关n24v可以串在一起，下侧接I点，有触点和没有触点的下侧串在一起，上侧接p24v多个开关p24v可以串在一起手自动旋钮，只有两档的时候可以只接一个I点,三档要接两个I点</code></pre><h2 id="PLC与元件"><a href="#PLC与元件" class="headerlink" title="PLC与元件"></a>PLC与元件</h2><p>输入元件</p><p>I点一般接负</p><p>输入元件（接plc的输入）有按钮、行程开关、接近开关、限位开关、转换开关、拨码器、编码器、各种传感器等</p><p>输出元件</p><p>Q点一般接正</p><p>输出设备（接plc的输出）有继电器、接触器、电磁阀、灯泡、线圈等。</p><p>PLC开关量输出的有：</p><p><a href="https://zhida.zhihu.com/search?content_id=119614554&content_type=Article&match_order=1&q=%E7%BB%A7%E7%94%B5%E5%99%A8%E8%BE%93%E5%87%BA&zhida_source=entity">继电器输出</a>：输出交直流都可以，电压范围宽，电流大，动作频率低，一般1Hz左右。<br><a href="https://zhida.zhihu.com/search?content_id=119614554&content_type=Article&match_order=1&q=%E6%99%B6%E4%BD%93%E7%AE%A1%E8%BE%93%E5%87%BA&zhida_source=entity">晶体管输出</a>：只能输出直流，一般是30V以下，电流小，动作频率高，最高可达200KHz或更高。<br><a href="https://zhida.zhihu.com/search?content_id=119614554&content_type=Article&match_order=1&q=%E6%99%B6%E9%97%B8%E7%AE%A1&zhida_source=entity">晶闸管</a>输出：只能输出交流，一般是60-450V，电流大，动作频率高，价格贵。</p><p>PLC<a href="https://zhida.zhihu.com/search?content_id=119614554&content_type=Article&match_order=1&q=%E6%A8%A1%E6%8B%9F%E9%87%8F%E8%BE%93%E5%87%BA&zhida_source=entity">模拟量输出</a>的有：</p><p>电压输出，一般是-10V到+10V电压输出。电流输出，一般是0-20mA、4-20mA电流输出，光信号</p><p><strong>激光测距</strong></p><p>PLC与输出设备连接时，不同组（不同公共端）的输出点，其对应输出设备（负载）的电压类型、等级可以不同，但同组（相同公共端）的输出点，其电压类型和等级应该相同。要根据输出设备电压的类型和等级来决定是否分组连接。</p><h2 id="西门子AI模块接线"><a href="#西门子AI模块接线" class="headerlink" title="西门子AI模块接线"></a>西门子AI模块接线</h2><p>看具体的传感器是电压测量的，还是电流测量的</p><p>电流测量的四线制变送器</p><p><img src="/posts/9fb3a31b/%E7%94%B5%E6%B5%81%E6%B5%8B%E9%87%8F%E7%9A%84%E5%9B%9B%E7%BA%BF%E5%88%B6%E5%8F%98%E9%80%81%E5%99%A8.png"></p><p>电流测量的两线制变送器</p><p><img src="/posts/9fb3a31b/%E7%94%B5%E6%B5%81%E6%B5%8B%E9%87%8F%E7%9A%84%E4%B8%A4%E7%BA%BF%E5%88%B6%E5%8F%98%E9%80%81%E5%99%A8.png"></p><p>电压测量的</p><p><img src="/posts/9fb3a31b/%E7%94%B5%E5%8E%8B%E6%B5%8B%E9%87%8F%E7%9A%84.png"></p><h2 id="总电源"><a href="#总电源" class="headerlink" title="总电源"></a>总电源</h2><p>总电源接线遵循上进下出的原则，一般是三相五线制的导线，根据需要带的电机的总功率来确定，使用几平方的导线</p><h3 id="电流承载能力与导线规格的关系"><a href="#电流承载能力与导线规格的关系" class="headerlink" title="电流承载能力与导线规格的关系"></a>电流承载能力与导线规格的关系</h3><p>冷压端子的电流承载能力与所连接导线的规格（<strong>截面面积</strong>）密切相关。通常，导线的<strong>截面面积越大，能够承受的电流也越大</strong>。以下是常见的导线规格与对应的电流承载能力范围：</p><table><thead><tr><th>导线截面（mm²）</th><th>参考电流范围（A）</th></tr></thead><tbody><tr><td>0.5 mm²</td><td>6A - 10A</td></tr><tr><td>1 mm²</td><td>10A - 15A</td></tr><tr><td>1.5 mm²</td><td>15A - 20A</td></tr><tr><td>2.5 mm²</td><td>20A - 25A</td></tr><tr><td>4 mm²</td><td>25A - 30A</td></tr><tr><td>6 mm²</td><td>30A - 40A</td></tr><tr><td>10 mm²</td><td>40A - 50A</td></tr><tr><td>16 mm²</td><td>50A - 65A</td></tr></tbody></table><p><strong>注意</strong>：这些电流承载能力是大致范围，具体的电流承载能力还受到端子材质、设计、接触压力以及安装质量等因素的影响。因此，在实际应用中，选择冷压端子时需要确保其适配电线的规格和实际工作环境，避免过载。</p><p><strong>安全载流量</strong></p><p>0.5 mm²线</p><p><strong>明线敷设时</strong></p><p>安全载流量一般是8A，此时功率P=UI,220V*8A=1760W</p><p><strong>穿管敷设时</strong></p><p>安全载流量一般是6A，此时功率P=UI,220V*6A=1260W</p><h2 id="电磁阀"><a href="#电磁阀" class="headerlink" title="电磁阀"></a>电磁阀</h2><p>m8航空插头线序图</p><p><img src="/posts/9fb3a31b/m8%E8%88%AA%E7%A9%BA%E6%8F%92%E5%A4%B4%E7%BA%BF%E5%BA%8F%E5%9B%BE.png" alt="img"></p><p><strong>航空插头引脚配置</strong></p><pre class=" language-markdown"><code class="language-markdown">3芯：<span class="token code keyword">    1 正极</span><span class="token code keyword">    2 负极</span><span class="token code keyword">    3 信号线</span>4芯：<span class="token code keyword">    1 正极</span><span class="token code keyword">    2 负极</span><span class="token code keyword">    3 输入</span><span class="token code keyword">    4 输出</span></code></pre><pre class=" language-markdown"><code class="language-markdown">两线电磁阀<span class="token code keyword">    可以根据需要选择红色线和黑色线，红色线接+，黑色线接Q点</span>四线电磁阀<span class="token code keyword">    M8防爆电磁阀接线：防爆电磁阀有棕白蓝黑四根线，使用黑色线接正，蓝色线接负，其他线不要</span>    </code></pre><h2 id="接近开关"><a href="#接近开关" class="headerlink" title="接近开关"></a>接近开关</h2><p>分常开和常闭两种，常开接触到物体信号等亮，常闭相反</p><pre class=" language-markdown"><code class="language-markdown">两线制<span class="token code keyword">    棕色接正</span><span class="token code keyword">    蓝色接负</span>三线制<span class="token code keyword">    棕色正</span><span class="token code keyword">    蓝色负</span><span class="token code keyword">    黑色线信号线</span></code></pre><h2 id="扭矩传感器"><a href="#扭矩传感器" class="headerlink" title="扭矩传感器"></a>扭矩传感器</h2><h3 id="类型和工作原理"><a href="#类型和工作原理" class="headerlink" title="类型和工作原理"></a>类型和工作原理</h3><h4 id="电阻应变片式扭矩传感器"><a href="#电阻应变片式扭矩传感器" class="headerlink" title="电阻应变片式扭矩传感器"></a>电阻应变片式扭矩传感器</h4><p>基本原理：基于电阻应变效应，即导体或半导体材料在外界力的作用下产生机械变形时，其电阻值会发生相应变化。<br>结构与工作过程<br>将电阻应变片粘贴在弹性轴上，并组成惠斯通电桥。当弹性轴受到扭矩作用时，会发生微小的变形，使粘贴在轴上的应变片也随之产生应变。<br>由于电阻应变效应，应变片的电阻值发生变化，从而导致电桥的平衡被打破，电桥输出一个与扭矩成正比的电压信号。<br>通过对这个电压信号进行放大、处理和校准，就可以得到被测扭矩的大小。<br>应用场景：广泛应用于<strong>工业生产中的电机、发动机等旋转机械的扭矩测量</strong>，具有精度高、线性度好等优点。</p><h4 id="磁电式扭矩传感器"><a href="#磁电式扭矩传感器" class="headerlink" title="磁电式扭矩传感器"></a>磁电式扭矩传感器</h4><p><strong>基本原理</strong>：利用磁弹性效应和电磁感应原理。铁磁材料在受到扭矩作用时，其磁导率会发生变化，从而导致穿过它的磁通量改变，进而在线圈中产生感应电动势。<br><strong>结构与工作过程</strong><br>通常由定子、转子和检测线圈等部分组成。定子上有永久磁铁和励磁线圈，转子为铁磁材料制成的轴。<br>当轴上没有扭矩时，磁路中的磁通量是均匀的，检测线圈中感应电动势为零。<br>当轴受到扭矩作用时，轴的磁导率发生变化，磁路中的磁通量分布也随之改变，检测线圈中就会产生与扭矩大小成正比的感应电动势。<br>对感应电动势进行测量和处理，即可得到扭矩值。<br>应用场景：常用于<strong>汽车、船舶等发动机的扭矩测量</strong>，具有非接触式测量、可靠性高的特点。</p><h4 id="光电式扭矩传感器"><a href="#光电式扭矩传感器" class="headerlink" title="光电式扭矩传感器"></a>光电式扭矩传感器</h4><p><strong>基本原理</strong>：基于光电转换原理，通过测量光线的变化来间接测量扭矩。<br><strong>结构与工作过程</strong><br>一般由光源、光栅盘、光电探测器等组成。光栅盘安装在被测轴上，随轴一起转动。<br>光源发出的光线照射到光栅盘上，光栅盘上有均匀分布的透光和不透光区域。当轴受到扭矩作用时，轴会发生扭转，导致光栅盘上的透光和不透光区域的相对位置发生变化。<br>光电探测器接收到的光线强度也会随之改变，将光信号转换为电信号。<br>通过对电信号的分析和处理，就可以计算出扭矩的大小。<br>应用场景：适用于<strong>高速旋转机械的扭矩测量</strong>，具有响应速度快、抗干扰能力强等优点。</p><h4 id="无线扭矩传感器"><a href="#无线扭矩传感器" class="headerlink" title="无线扭矩传感器"></a>无线扭矩传感器</h4><p><strong>基本原理</strong>：综合了上述几种扭矩测量原理（如电阻应变片式），并增加了无线通信功能。<br><strong>结构与工作过程</strong><br>其扭矩测量部分与相应的传统传感器原理相同，将扭矩转换为电信号。<br>电信号经过处理后，通过无线发射模块将数据发送出去，接收端接收到无线信号后进行解码和处理，得到扭矩值。<br>应用场景：在一些<strong>不方便布线的场合</strong>，如旋转部件的扭矩实时监测等方面具有独特的优势。</p><p><strong>24v电源频率输出型</strong></p><p><img src="/posts/9fb3a31b/%E6%89%AD%E7%9F%A9%E4%BC%A0%E6%84%9F%E5%99%A8%E6%8F%92%E5%A4%B4%E7%BA%BF%E5%90%AB%E4%B9%89.png" alt="img"></p><h2 id="光电传感器"><a href="#光电传感器" class="headerlink" title="光电传感器"></a>光电传感器</h2><p>光电传感器是一种通过将光信号转换为电信号来实现检测功能的设备，它在现代工业生产、日常生活以及科技研究等众多领域都有着广泛的应用</p><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p><strong>检测物体的有无和位置</strong></p><p><strong>物体存在检测</strong>：光电传感器可以检测特定区域内是否有物体存在。例如在自动化生产线上，通过安装对射式光电传感器，当有工件通过传感器的光路时，光线被遮挡，传感器输出信号发生变化，从而可以判断工件的到来，触发后续的加工或运输动作。<br><strong>物体位置检测</strong>：能够精确确定物体的位置。在机器人的操作过程中，反射式光电传感器可以安装在机器人的末端执行器上，通过检测目标物体反射回来的光线，确定物体的具体位置，帮助机器人准确地抓取或操作物体。</p><p><strong>计数和测速</strong></p><p><strong>物体计数</strong>：在生产线上，利用光电传感器可以对通过的产品进行计数。每当一个产品通过传感器的检测区域，遮挡或反射光线一次，传感器就会产生一个脉冲信号，通过对脉冲信号进行计数，就可以统计出产品的数量。例如在饮料灌装生产线上，通过光电传感器对灌装瓶进行计数，实现生产数量的统计和控制。<br><strong>速度测量</strong>：可以测量物体的运动速度。例如在输送带系统中，通过安装两个光电传感器，测量物体通过两个传感器的时间间隔，结合两个传感器之间的距离，就可以计算出物体在输送带上的运动速度。</p><p><strong>尺寸和形状检测</strong><br><strong>尺寸测量</strong>：通过对物体遮挡光线的情况进行分析，可以测量物体的尺寸。例如使用光幕式光电传感器，光幕由多个发射和接收光线的单元组成，当物体通过光幕时，根据被遮挡的光线单元数量，可以精确测量物体的宽度、高度等尺寸。<br><strong>形状检测</strong>：可以检测物体的形状是否符合要求。例如在机械加工中，利用光电传感器对加工后的零件进行扫描，通过分析反射光线的分布情况，判断零件的形状是否存在缺陷或偏差。</p><p><strong>液位和料位检测</strong><br><strong>液位检测</strong>：在化工、食品等行业的液体储存和处理过程中，光电传感器可以用于检测液体的液位高度。例如在一个储液罐中，将反射式光电传感器安装在罐顶，通过检测液面反射回来的光线，判断液位是否达到设定的高度，实现液位的自动控制。<br><strong>料位检测</strong>：对于固体物料的储存和输送，光电传感器可以检测料仓内物料的料位。例如在粮食仓储中，通过安装光电传感器，实时监测粮堆的高度，当料位过低或过高时，及时发出报警信号。</p><p><strong>颜色和透明度检测</strong><br><strong>颜色检测</strong>：某些光电传感器具有颜色识别功能，可以检测物体的颜色。在印刷、纺织等行业，用于颜色质量控制和颜色分类。例如在印刷机上，通过光电传感器检测印刷品的颜色，确保印刷颜色的准确性和一致性。<br><strong>透明度检测</strong>：可以检测物体的透明度。在玻璃制造、塑料制品生产等行业，用于检测产品的透明度是否符合标准。例如在玻璃生产线上，通过光电传感器检测玻璃的透明度，筛选出不合格的产品。</p><p><strong>安全防护</strong><br><strong>安全光幕</strong>：在一些危险的机械设备周围，如冲床、剪板机等，安装安全光幕光电传感器。当有人或物体进入光幕区域时，光线被遮挡，传感器立即发出信号，使设备停止运行，从而保护操作人员的安全。<br><strong>区域防护</strong>：利用光电传感器可以对特定区域进行防护。例如在自动化仓库中，通过安装光电传感器，对仓库的出入口进行监测，当有未经授权的人员或物体进入时，及时发出警报。</p><h2 id="光纤传感器"><a href="#光纤传感器" class="headerlink" title="光纤传感器"></a>光纤传感器</h2><p>光纤传感器是一种将被测对象的状态转变为可测的光信号的传感器，凭借抗电磁干扰、灵敏度高、体积小等优点，在多个领域发挥着重要作用，具体如下：</p><h3 id="工业领域"><a href="#工业领域" class="headerlink" title="工业领域"></a>工业领域</h3><p><strong>应变和应力监测</strong>：在大型机械设备、桥梁、建筑等结构中，光纤传感器可用于测量结构的应变和应力。例如在桥梁建设和使用过程中，将光纤传感器埋入桥梁结构内部，能够实时监测桥梁各部位的应力变化情况，一旦应力超过安全范围，及时发出预警，保障桥梁的安全运行。<br><strong>温度测量</strong>：在化工、电力等工业生产过程中，精确的温度测量至关重要。光纤温度传感器可以适应恶劣的工业环境，如高温、强电磁干扰等，对反应釜、变压器等设备的温度进行实时监测，确保设备在正常温度范围内运行，防止因温度过高引发安全事故。<br><strong>流量和液位检测</strong>：在石油、化工等行业的管道运输和储存过程中，需要对流体的流量和液位进行准确测量。光纤传感器可以通过测量流体对光的影响，如光的散射、吸收等，实现对流量和液位的精确检测，为生产过程的控制和管理提供依据。</p><h3 id="医疗领域"><a href="#医疗领域" class="headerlink" title="医疗领域"></a>医疗领域</h3><p><strong>生理参数监测</strong>：光纤传感器可以用于监测人体的多种生理参数，如血压、心率、血氧饱和度等。例如，通过将光纤传感器集成到可穿戴设备中，能够实时、无创地监测人体的生理状态，为远程医疗和健康管理提供数据支持。<br><strong>医疗设备检测</strong>：在医疗器械中，光纤传感器可用于检测设备的性能和工作状态。例如，在激光治疗设备中，光纤传感器可以监测激光的功率、波长等参数，确保治疗的准确性和安全性。</p><h3 id="航空航天领域"><a href="#航空航天领域" class="headerlink" title="航空航天领域"></a>航空航天领域</h3><p><strong>飞行器结构健康监测</strong>：在飞机、航天器等飞行器的设计和使用过程中，需要对其结构的健康状况进行实时监测。光纤传感器可以分布在飞行器的机翼、机身等关键部位，监测结构的应变、振动等参数，及时发现结构中的损伤和缺陷，保障飞行器的飞行安全。<br><strong>环境参数测量</strong>：在航空航天飞行过程中，需要对环境参数进行精确测量，如温度、压力、湿度等。光纤传感器具有体积小、重量轻、抗干扰能力强等优点，能够适应航空航天复杂的环境条件，为飞行控制和环境监测提供准确的数据。</p><h3 id="智能交通领域"><a href="#智能交通领域" class="headerlink" title="智能交通领域"></a>智能交通领域</h3><p><strong>交通流量监测</strong>：在城市道路、高速公路等交通场景中，光纤传感器可以埋设在路面下，通过检测车辆经过时引起的路面应变变化，实现对交通流量、车速等参数的实时监测，为交通管理和规划提供数据支持。<br><strong>桥梁和隧道安全监测</strong>：对于桥梁和隧道等交通基础设施，光纤传感器可以实时监测其结构的健康状况，如桥梁的振动、变形，隧道的围岩压力等，及时发现安全隐患，保障交通基础设施的安全运行。</p><h3 id="海洋领域"><a href="#海洋领域" class="headerlink" title="海洋领域"></a>海洋领域</h3><p><strong>海洋环境监测</strong>：在海洋研究和开发过程中，需要对海洋环境参数进行长期、实时的监测。光纤传感器可以用于测量海洋的温度、盐度、压力、浊度等参数，为海洋科学研究、海洋资源开发和海洋环境保护提供重要的数据支持。<br><strong>海洋结构物健康监测</strong>：对于海洋平台、海底管道等海洋结构物，光纤传感器可以监测其结构的应变、腐蚀等情况，及时发现结构中的损伤和缺陷，保障海洋结构物的安全运行。</p><h2 id="色标传感器"><a href="#色标传感器" class="headerlink" title="色标传感器"></a>色标传感器</h2><p>原理发射RGB光源照射物体， 由受光器接收反射光中RGB三种颜色的比例，检测照射物体和标定颜色是否一致，判断当前是否有色标经过</p><p>色标传感器检测流程</p><pre class=" language-markdown"><code class="language-markdown">先将目标色块放入光源下进行标定，记录比例数据--›在加工过程中标定颜色配比和实时颜色配比进行比对--›数据一致就进行热封、裁切等操作--›色标传感器可以通过和plc连接，通过触摸屏进行示教</code></pre><h2 id="中间继电器"><a href="#中间继电器" class="headerlink" title="中间继电器"></a>中间继电器</h2><p>分两位和四位</p><p>两位的有两个常开触点</p><p>四位的有四个常开触点</p><pre class=" language-markdown"><code class="language-markdown">通过中间继电器可以实现<span class="token code keyword">    小电流控制大电流（将接触器的A1和A2接在常开触点上）</span><span class="token code keyword">    同时控制几个用电器同时动作（输出点Q接正，负极接N24V，然后常开接要控制的用电器动作，就可以实现Q点得电，几个用电器同时动作）</span></code></pre><p>按照习惯接线柱 13接正14接负</p><h2 id="功率继电器（终端继电器）"><a href="#功率继电器（终端继电器）" class="headerlink" title="功率继电器（终端继电器）"></a>功率继电器（终端继电器）</h2><p>功率继电器</p><p>一般用于接三色灯蜂鸣器</p><p><img src="/posts/9fb3a31b/%E5%8A%9F%E7%8E%87%E7%BB%A7%E7%94%B5%E5%99%A8.png" alt="img"></p><p>内部接线图</p><p><img src="/posts/9fb3a31b/%E7%BB%88%E7%AB%AF%E7%BB%A7%E7%94%B5%E5%99%A8%E5%86%85%E9%83%A8%E6%8E%A5%E7%BA%BF%E5%9B%BE.png"></p><pre class=" language-markdown"><code class="language-markdown">in侧是线圈out侧是常开点</code></pre><p><strong>三色灯</strong></p><p>三色灯对照厂家接线图接线</p><h2 id="继电器模组"><a href="#继电器模组" class="headerlink" title="继电器模组"></a>继电器模组</h2><p><img src="/posts/9fb3a31b/%E7%BB%A7%E7%94%B5%E5%99%A8%E6%A8%A1%E7%BB%84.jpg"></p><p>继电器模组，通过设备信号获取设备的运行状态，查看或者修改设备信号</p><p>内部接线图</p><p><img src="/posts/9fb3a31b/%E7%BB%A7%E7%94%B5%E5%99%A8%E6%A8%A1%E7%BB%84%E5%86%85%E9%83%A8%E6%8E%A5%E7%BA%BF%E5%9B%BE.png"></p><h2 id="伺服"><a href="#伺服" class="headerlink" title="伺服"></a>伺服</h2><p>编码器线和信号线，电源线</p><pre class=" language-markdown"><code class="language-markdown">电机侧<span class="token code keyword">    编码器线按照颜色顺序（白 棕 绿 黄 灰 粉）或者编号顺序接线</span><span class="token code keyword">    电源线接 U V W PE和抱闸线br+接br+，br-接br-</span>伺服侧<span class="token code keyword">    编码器线直接插入编码器卡槽中</span><span class="token code keyword">    信号线 线盒接4根线，针脚 11接正  9接负  3接正  16接信号线</span><span class="token code keyword">    16信号线(抱闸信号)和电源线br+接在一起，br-接 n24v</span></code></pre><h2 id="变频器"><a href="#变频器" class="headerlink" title="变频器"></a>变频器</h2><pre class=" language-markdown"><code class="language-markdown">R S T接三根火线com 数字信号公共端X1 正转信号X2 反转信号X3 复位信号U V W PE 接电机</code></pre><h2 id="接线思路"><a href="#接线思路" class="headerlink" title="接线思路"></a>接线思路</h2><p>1.看总电源和总开关的接线方式</p><p>2.需要几部分的线路，每部分单独设置一个分开关，需不需要五孔插座</p><p>3.接开关电源后需要几部分的24v电源供应</p><p>4.连接plc时分析负载设备的是输入还是输出</p><p>5.通过io进行直接通信的设备需不需要接终端继电器</p><p>6.三色灯蜂鸣器</p><p>7.伺服，变频器接线</p><p>8.弱电强电分开，也就是220/380/24等，端子排放在最后一排，用线颜色区分</p><p>9.根据现场客户的情况，看看要不要使用接线盒，看看客户是不是走远程io</p><h1 id="气路接线"><a href="#气路接线" class="headerlink" title="气路接线"></a>气路接线</h1><h2 id="气路系统"><a href="#气路系统" class="headerlink" title="气路系统"></a>气路系统</h2><p>大气压：101.3Kpa</p><p>正压系统（气缸系统）：0.5-0.7Mpa</p><p>负压系统（真空系统）：-50Kpa</p><pre class=" language-markdown"><code class="language-markdown">气路系统组成<span class="token code keyword">    气源</span><span class="token code keyword">    执行元件</span><span class="token code keyword">    控制元件</span><span class="token code keyword">    辅助元件</span></code></pre><p>不管正压系统还是负压系统的气压值都是默认大气压为0的基础上增加的数值或者减小的数值</p><h3 id="气压系统工作原理"><a href="#气压系统工作原理" class="headerlink" title="气压系统工作原理"></a>气压系统工作原理</h3><p>是以空气压缩机为动力，以压缩空气为工作介质，通过控制元件的作用下，使执行元件按照设定的运动规律运动，对外做功。</p><h2 id="气缸系统"><a href="#气缸系统" class="headerlink" title="气缸系统"></a>气缸系统</h2><p>一般使用的气压值是0.5-0.7Mpa</p><p>气缸系统图</p><p><img src="/posts/9fb3a31b/%E6%B0%94%E7%BC%B8%E7%B3%BB%E7%BB%9F%E5%9B%9E%E8%B7%AF.png"></p><p><strong>储气罐作用</strong>：稳压，断气后维持短暂的空气压力，分离由和水</p><p><strong>三联件</strong>：</p><p>三联件螺纹类型</p><table><thead><tr><th>接头螺纹</th><th>尺寸</th></tr></thead><tbody><tr><td>M5</td><td>5mm</td></tr><tr><td>1分G1/8</td><td>9.5mm</td></tr><tr><td>2分G1/4</td><td>12.5mm</td></tr><tr><td>3分G3/8</td><td>16.5mm</td></tr><tr><td>4分G1/2</td><td>20.4mm</td></tr></tbody></table><p>电磁阀控制在10个以内使用PC10-2分的接头</p><p>电磁阀控制在25个以内使用PC12-2分的接头</p><p><strong>气缸缸径和气管接头选型</strong></p><p><img src="/posts/9fb3a31b/%E6%B0%94%E7%BC%B8%E7%BC%B8%E5%BE%84%E5%92%8C%E6%B0%94%E7%AE%A1%E6%8E%A5%E5%A4%B4%E9%80%89%E5%9E%8B.png"></p><p><strong>气缸分类</strong></p><p>回转气缸：来回翻转</p><p>单作用气缸：由一根气管控制，另一侧使用弹簧控制</p><p>分为单动引出（弹簧在气缸推杆对侧）和单动缩回（弹簧在气缸推杆同侧）两种类型</p><p>双作用气缸：由两根气管控制</p><p>直线往复型气缸：来回走一条直线</p><p>有杆气缸：有推杆的气缸</p><p>无杆气缸：没有推杆的气缸</p><p><strong>气缸缸径和空气压力决定力的大小</strong></p><pre class=" language-markdown"><code class="language-markdown">F=P<span class="token italic"><span class="token punctuation">*</span>S<span class="token punctuation">*</span></span>N  气缸力=横截面积<span class="token italic"><span class="token punctuation">*</span>压强<span class="token punctuation">*</span></span>负载率</code></pre><p>负载可以分为静负载和动负载</p><p>静负载：在运动过程中没有负载力</p><p>动负载：带负载运动</p><p><img src="/posts/9fb3a31b/%E6%B0%94%E7%BC%B8%E8%B4%9F%E8%BD%BD%E7%8E%87.png"></p><p><strong>气缸横向运行</strong></p><p>15kg（公斤）的负载所需要的气缸力有多大？</p><pre><code>横向运动受力分析  气缸力=摩擦力F=㎛g  摩擦力=摩擦系数*质量*重力加速度F=0.2*15*10=30N（实际输出力）F理*N负载率=F实</code></pre><p>同一个气缸伸出的力大，缩回的力小，原因横街面积不一样，无杆侧横街面积大，有杆侧横截面积小（有杆侧要减去杆的横截面积）</p><p>双作用气缸比单作用气缸的力大，原因是，单作用气缸要克服弹簧的拉力</p><h2 id="真空系统"><a href="#真空系统" class="headerlink" title="真空系统"></a>真空系统</h2><p>真空吸附，原理使用抽真空设备使压缩空气气压低于大气压</p><pre class=" language-markdown"><code class="language-markdown">抽真空的设备<span class="token code keyword">    真空泵：最大真空101.3kpa</span><span class="token code keyword">    真空发生器：最大真空-88kpa</span><span class="token code keyword">        原理：进气口到排气口的流速很快，出气口由于大气压的作用会把空气压向排气口，这样出气口的压力会越来越小</span></code></pre><p>真空设备的吸附元件是吸盘</p><pre class=" language-markdown"><code class="language-markdown">吸盘分类<span class="token code keyword">    平型：只能吸是平面并且比较硬的物体</span><span class="token code keyword">    风琴型：吸斜面比较软的物体</span><span class="token code keyword">    深型：吸曲面工件</span>材质<span class="token code keyword">    普通工况：NBR、PU</span><span class="token code keyword">    食品、半导体、模具、薄工件：硅胶</span><span class="token code keyword">    药品：氟橡胶</span></code></pre><p>吸盘吸附力的大小由吸盘直径决定</p><p>真空吸附力的计算公式</p><pre class=" language-markdown"><code class="language-markdown">F=P<span class="token italic"><span class="token punctuation">*</span>S<span class="token punctuation">*</span></span>0.1<span class="token italic"><span class="token punctuation">*</span>1/T   工件水平的时候T=4，工件垂直的时候T=8  P经验是50  0.1是用与单位转换（原公式中P单位是pa  S是m的平方   我们使用的P是kpa S是cm的平方） S面积单位cm的平方 1.5kg的水平吸物体需要多大的吸盘F=mg=15N15=50<span class="token punctuation">*</span></span>S<span class="token italic"><span class="token punctuation">*</span>0.1<span class="token punctuation">*</span></span>1/4S=12平方厘米所以选直径40mm的吸盘</code></pre><h2 id="阀"><a href="#阀" class="headerlink" title="阀"></a>阀</h2><h3 id="换向阀"><a href="#换向阀" class="headerlink" title="换向阀"></a>换向阀</h3><p><img src="/posts/9fb3a31b/%E7%94%B5%E7%A3%81%E9%98%80%E7%AE%80%E5%9B%BE.png"></p><pre class=" language-markdown"><code class="language-markdown">换向阀分类<span class="token code keyword">    机械换向：两位两通手动阀</span><span class="token code keyword">    气控换向</span><span class="token code keyword">    电磁换向：电磁阀</span></code></pre><p><strong>电磁阀</strong></p><p>位：有几个方框（工作状态）</p><p>通：有几个接气口</p><p>P进气  AB出气口  RS排气口</p><pre class=" language-markdown"><code class="language-markdown">2位2通电磁阀：手动换向2位3通电磁阀：控制单作用气缸（螺纹气缸）<span class="token code keyword">    常开</span><span class="token code keyword">    常闭</span><span class="token code keyword">    常开常闭可以切换，可以将进气口位置和排气口位置切换</span>2位5通电磁阀<span class="token code keyword">    单电控：只有一侧有电磁铁，另一侧依靠弹簧复位，断电自动复原</span><span class="token code keyword">    双电控：断电可保持当前状态，断电记忆</span>3位五通电磁阀：<span class="token code keyword">    中封：可以实现中位停止，断电记忆任意一个位置，断气可以保持当前状态一断时间</span><span class="token code keyword">    中压：可以实现中位缓慢顶出</span><span class="token code keyword">    中泄：可以实现中位停止，但是断气不能保持</span></code></pre><h3 id="单向阀"><a href="#单向阀" class="headerlink" title="单向阀"></a>单向阀</h3><p>可以实现气路单向通气</p><p><img src="/posts/9fb3a31b/%E5%8D%95%E5%90%91%E9%98%80.png"></p><p>如上图所示，气只能从上方往下走</p><h4 id="诱导止回阀（气控单向阀）"><a href="#诱导止回阀（气控单向阀）" class="headerlink" title="诱导止回阀（气控单向阀）"></a>诱导止回阀（气控单向阀）</h4><p>诱导止回阀工作原理</p><p>有气时双向都可以通气，没有气时只能单向通气</p><p><img src="/posts/9fb3a31b/%E8%AF%B1%E5%AF%BC%E6%AD%A2%E5%9B%9E%E9%98%80.png"></p><p>先导口 Z<br>进气口 P<br>出气口 A</p><p>当先导口没有通气时，P可以流向A，A不能流向P</p><p>当先导口通气时，P可以流向A，A也可以流向P</p><p><img src="/posts/9fb3a31b/%E8%AF%B1%E5%AF%BC%E6%AD%A2%E5%9B%9E%E9%98%80%E5%9B%BE%E5%BD%A2%E5%90%AB%E4%B9%89.png"></p><p>诱导止回阀接线</p><p><strong>双活塞气缸</strong></p><p><img src="/posts/9fb3a31b/%E5%8F%8C%E6%B4%BB%E5%A1%9E%E6%B0%94%E7%BC%B8.png"></p><p><strong>单活塞气缸</strong></p><p>两侧控制</p><p><img src="/posts/9fb3a31b/%E8%AF%B1%E5%AF%BC%E6%AD%A2%E5%9B%9E%E9%98%80%E6%8E%A5%E6%B0%94.png"></p><p>一侧控制</p><p><img src="/posts/9fb3a31b/%E5%8D%98%E6%B4%BB%E5%A1%9E%E5%8E%8B%E5%8A%9B%E4%BF%9D%E6%8C%81.png"></p><h3 id="流量控制阀"><a href="#流量控制阀" class="headerlink" title="流量控制阀"></a>流量控制阀</h3><p>控制气缸运动速度</p><h3 id="逻辑阀"><a href="#逻辑阀" class="headerlink" title="逻辑阀"></a>逻辑阀</h3><p><img src="/posts/9fb3a31b/%E7%BC%A9%E9%98%80%E3%80%81%E5%8F%8C%E5%8E%8B%E9%98%80.png"></p><p>缩阀</p><p>缩阀实现的是或逻辑命令，实现手动自动切换</p><table><thead><tr><th>P1</th><th>P2</th><th>A</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><p>双压阀</p><p>双压阀实现的是与逻辑指令，实现双手安全控制</p><table><thead><tr><th>P1</th><th>P2</th><th>A</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><h3 id="调速节流阀"><a href="#调速节流阀" class="headerlink" title="调速节流阀"></a>调速节流阀</h3><p><img src="/posts/9fb3a31b/%E8%B0%83%E9%80%9F%E8%8A%82%E6%B5%81%E9%98%80.png"></p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>调速节流阀是由定差减压阀和节流阀串联而成的组合阀，调速节流阀利用定差减压阀来保证节流阀前后的压力差恒定，从而使通过节流阀的流量只取决于节流阀开口的大小，而不受负载变化的影响，进而实现稳定的流量调节和速度控制。</p><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><h5 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h5><p>精确调节流量：通过改变节流口的通流面积，能够精确地控制液压系统中油液的流量。例如在机床的进给系统中，调速节流阀可以根据加工工艺的要求，精确地调节进入液压缸的油液流量，从而控制工作台的进给速度，保证加工精度。<br>稳定流量输出：在液压系统中，当系统压力发生波动时，调速节流阀能够自动补偿压力变化对流量的影响，使流量保持相对稳定。比如在注塑机的液压系统中，即使在注射过程中系统压力有所变化，调速节流阀也能确保进入注塑油缸的油液流量稳定，从而保证注塑制品的质量稳定。</p><h5 id="速度调节"><a href="#速度调节" class="headerlink" title="速度调节"></a>速度调节</h5><p><strong>实现无级调速</strong>：可以在一定范围内实现执行元件（如液压缸、液压马达）的无级调速。以起重机的液压系统为例，操作人员可以通过调节调速节流阀，使起重机的起升、变幅、回转等动作在不同的工作条件下，以不同的速度运行，满足各种作业要求。<br><strong>配合其他元件调速</strong>：与溢流阀、减压阀等其他液压元件配合使用，可组成多种调速回路，满足不同设备对速度调节的要求。比如在组合机床的液压系统中，调速节流阀与溢流阀等组成节流调速回路，能够根据加工需要，灵活地调节动力滑台的工作进给速度和快速移动速度。</p><h5 id="负载适应"><a href="#负载适应" class="headerlink" title="负载适应"></a>负载适应</h5><p><strong>适应不同负载工况</strong>：当液压系统的负载发生变化时，调速节流阀能够根据负载的大小自动调整节流口的开度，以适应负载的变化。例如在挖掘机的液压系统中，在挖掘不同硬度的土壤时，负载会发生很大变化，调速节流阀可以根据负载的变化自动调整流量，保证挖掘动作的平稳性和效率。<br><strong>提高系统效率</strong>：通过合理调节流量，使液压系统在不同负载下都能以较优的工作状态运行，避免了因流量过大或过小导致的能量损失，提高了系统的效率。例如在一些大型液压机的液压系统中，调速节流阀可以根据压制工件的不同负载，精确地调节流量，使液压机在工作过程中既能满足工作要求，又能降低能耗。</p><h5 id="防止气蚀和振动"><a href="#防止气蚀和振动" class="headerlink" title="防止气蚀和振动"></a>防止气蚀和振动</h5><p><strong>避免气蚀现象</strong>：通过合理控制流量和压力，调速节流阀可以防止液压系统中出现气蚀现象。例如在一些深海作业的液压设备中，调速节流阀能够根据海水压力等环境因素，精确调节油液流量和压力，避免在系统中产生气蚀，保护液压元件。<br><strong>减少振动和噪声</strong>：稳定的流量控制有助于减少液压系统中的压力波动和流体冲击，从而降低振动和噪声。比如在液压电梯的液压系统中，调速节流阀可以使油液流量平稳，减少系统运行时的振动和噪声，提高乘坐的舒适性。</p><h2 id="断气工件掉落方案"><a href="#断气工件掉落方案" class="headerlink" title="断气工件掉落方案"></a>断气工件掉落方案</h2><p>1.三位五通中封阀（保压时间相对不是很长）</p><p>2.使用气缸抱死装置，抱死装置接一根气管，有气时抱死装置不工作，无气时报警装置开始工作</p><p>3.诱导止回阀（保压时间可以很久）</p><h2 id="气路设计"><a href="#气路设计" class="headerlink" title="气路设计"></a>气路设计</h2><p>思路：</p><p>1.看需要带多少电磁阀确定三联件接口需要多大，走多粗的气管接总气源</p><p>2.电磁阀使用多大的进气口，使用多大的堵头和消音器</p><p>3.根据客户需求选择气管颜色</p><p>4.根据电磁阀安装位置，确定需要使用的气管长度，需要使用多粗的气管</p><p>5.根据现场气缸的数量，确定快接的数量和种类</p><p>5.画一个简单的气路安装图</p>]]></content>
      
      
      <categories>
          
          <category> 电气 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电气 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KUKA机器人学习</title>
      <link href="/posts/decccaa6.html"/>
      <url>/posts/decccaa6.html</url>
      
        <content type="html"><![CDATA[<p>KUKA机器人学习</p><span id="more"></span><hr><h2 id="示教器按键功能介绍"><a href="#示教器按键功能介绍" class="headerlink" title="示教器按键功能介绍"></a>示教器按键功能介绍</h2><p><img src="/posts/decccaa6/%E7%A4%BA%E6%95%99%E5%99%A8%E6%8C%89%E9%94%AE%E5%8A%9F%E8%83%BD.png"></p><h2 id="状态栏使用多的数据"><a href="#状态栏使用多的数据" class="headerlink" title="状态栏使用多的数据"></a>状态栏使用多的数据</h2><p>S 解释器后台扫描运行的程序</p><p>I 通俗理解为上电下电</p><p>R 程序复位到上一步，或者退出程序</p><p>T1 表示机器人当前的运动模式</p><h2 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h2><p>按选定可以运行程序</p><p>按打开可以查看内容</p><h2 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h2><p>查看输入输出</p><pre class=" language-markdown"><code class="language-markdown">菜单-->显示-->输入/输出端</code></pre><p>查看/修改机器人ip地址</p><pre class=" language-markdown"><code class="language-markdown">1.菜单-->投入运行-->网络配置2.菜单-->关机-->重新启动控制系统pc</code></pre><p>查看机器人的实际位置</p><pre class=" language-markdown"><code class="language-markdown">菜单-->显示-->实际位置</code></pre><h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>选型要素   负载   臂展（工作范围）</p><h2 id="机器人定点"><a href="#机器人定点" class="headerlink" title="机器人定点"></a>机器人定点</h2><h3 id="定点规则"><a href="#定点规则" class="headerlink" title="定点规则"></a>定点规则</h3><pre class=" language-markdown"><code class="language-markdown">命名规则：<span class="token code keyword">    R1C1P1</span><span class="token code keyword">    R1 层</span><span class="token code keyword">    C1 从左到右第几位</span><span class="token code keyword">    P1 每一位有几个点</span></code></pre><h3 id="点位数量"><a href="#点位数量" class="headerlink" title="点位数量"></a>点位数量</h3><p>一般点位数量在4到5个</p><p>一般抓取点间隙比较小的都是4个点就可以，托盘的这种夹具一般需要5个点</p><pre class=" language-markdown"><code class="language-markdown">抓取点外点抓取点近点（看情况这个点可以省略）抓取点抬升点抬升点外点</code></pre><h3 id="定点类型"><a href="#定点类型" class="headerlink" title="定点类型"></a>定点类型</h3><pre class=" language-markdown"><code class="language-markdown">1.厍位点2.需要机器人动作的工作台点3.厍位的home点4.机床、工作台的home点4.机器人轨迹修正的home点</code></pre><p>机器人定位准确的前提是机器人抓取的产品的位置和放产品的位置，相对于机器人夹爪来说夹住是同一位置，<br>取和放的点夹住的位置不一样，机器人的误差就会变大</p><h3 id="系统参数"><a href="#系统参数" class="headerlink" title="系统参数"></a>系统参数</h3><pre><code>PTP $POS_ACT：执行一个点对点（PTP，Point-to-Point）运动，目标位置是当前位置（$POS_ACT）WAIT FOR $T1：等待手动模式WAIT FOR $EXT：等待外部控制模式</code></pre><h3 id="机器人定位不准"><a href="#机器人定位不准" class="headerlink" title="机器人定位不准"></a>机器人定位不准</h3><p>机器人定位准确的前提是机器人抓取的产品的位置和放产品的位置，相对于机器人夹爪来说夹住是同一位置， 取和放的点夹住的位置不一样，机器人的误差就会变大</p><pre class=" language-markdown"><code class="language-markdown">机器人定位不准的原因<span class="token code keyword">            机器人遭受撞击机构/工具变形</span><span class="token code keyword">            机器人伺服电机出现反馈传感器故障、驱动器配置错误、编码器损坏等问题通常会导致机器人运动不精确或完全无法运动，影响其操作效率和精度。</span></code></pre><h2 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h2><h3 id="手动运动"><a href="#手动运动" class="headerlink" title="手动运动"></a>手动运动</h3><p>1.调整到轴运动模式进行单个轴的运动</p><p>2.调整到工具坐标进行工具的三轴运动，通过左右偏，前后翻转，左右反转来调整工具姿势</p><h3 id="程序运动"><a href="#程序运动" class="headerlink" title="程序运动"></a>程序运动</h3><p><strong>点到点运动PTP</strong></p><p><img src="/posts/decccaa6/ptp.png"></p><pre><code>PTP机器人运动到输入位置PTP &#123;A1 0, A2 -80, A3 75, A4 30, A5 30, A6 110&#125;空间位置 （以当前激活的工具和基坐标）PTP &#123;X 100, Y -50, Z 1500, A 0, B 0, C 90, S 3, T3 35机器人仅在输入一个或多个集合时运行PTP &#123;A1 30&#125; ; 仅 A1 移动至 30° PTP &#123;X 200, A 30&#125; ; 仅在X至200mm， A至30°PTP和SPTP区别运行速度区别不大PTP的使用范围除普通的程序模块以外还可以用在一些特殊场合，比如中断程序。SPTP则不能使用于中断程序内。PTP和SPTP出现在同一个模块内一起使用的话在两个指令过度的时候机器人有时会出现抖动一下。PTP在非联机表单的形式使用时必须提前赋值相关的工具，基座标，速度，加速度等。SPTP则可以更方便的进行变量赋值。或者根本不写也会以上一条运动指令的变量进行赋值运动。如果上面没有运动指令就会在INI行进行。</code></pre><p><strong>线性运动LIN</strong></p><p><img src="/posts/decccaa6/lin.png"></p><p><strong>圆周运行CIRC</strong></p><p><img src="/posts/decccaa6/circ.png"></p><h3 id="运动安全性"><a href="#运动安全性" class="headerlink" title="运动安全性"></a>运动安全性</h3><p>在间隙比较小的地方运动时进出速度要慢，能提高一点稳定性</p><p>在进行机器人运动之前先检查机器人位置和夹具的状态等</p><h3 id="外部控制运动"><a href="#外部控制运动" class="headerlink" title="外部控制运动"></a>外部控制运动</h3><h2 id="BCO"><a href="#BCO" class="headerlink" title="BCO"></a>BCO</h2><p>库卡机器人启动时候，会低速运行到点位，当机器人到达点位以后会停止并且报已达BCO,这里BCO是让机器人首次运行运行时候到达安全点位pHome，确保机器人安全，这时候我们还需要再次按下启动按键，机器人正式正常运行程序；        </p><p>注意：BCO 是 B Block coincidence （即程序段重合）的缩写。 重合意为 “ 一致 ” 及 “ 时间 / 空间事件的会合 ”。如果选定的运动语句包括 PTP 运行指令，则 BCO 运行将作为PTP 运动从实际位置移动到目标位置。 如果选定的运动语句包括 LIN 或 CIRC，则 BCO 运行将作为 LIN 运动被执行。 观察此运动，防止碰撞。 在 BCO 运行中速度自动降低。 </p><h3 id><a href="#" class="headerlink" title></a></h3><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><h3 id="变量的声明和初始化"><a href="#变量的声明和初始化" class="headerlink" title="变量的声明和初始化"></a>变量的声明和初始化</h3><p><strong>在 SRC 文件中声明和初始化</strong></p><pre><code>DEF MY_PROG ( ) DECL INT counter DECL REAL price DECL BOOL error DECL CHAR symbol INI counter = 10 price = 0.0 error = FALSE symbol = &quot;X&quot; ... END</code></pre><p><strong>在 DAT 文件中声明和初始化</strong></p><pre><code>DEFDAT MY_PROG EXTERNAL DECLARATIONS DECL INT counter = 10 DECL REAL price = 0.0 DECL BOOL error = FALSE DECL CHAR symbol = &quot;X&quot; ... ENDDAT</code></pre><p><strong>在DAT 文件中声明和在 SRC 文件中初始化</strong></p><p><strong>DAT文件中声明</strong></p><pre><code>DEFDAT MY_PROG EXTERNAL DECLARATIONS DECL INT counter DECL REAL price DECL BOOL error DECL CHAR symbol ... ENDDAT</code></pre><p><strong>SRC 文件中初始化</strong></p><pre><code>DEF MY_PROG ( ) ... INI counter = 10 price = 0.0 error = FALSE symbol = &quot;X&quot; ... END</code></pre><h3 id="常量的声明和初始化"><a href="#常量的声明和初始化" class="headerlink" title="常量的声明和初始化"></a>常量的声明和初始化</h3><p><strong>在DAT文件中</strong></p><pre><code>DEFDAT MY_PROG EXTERNAL DECLARATIONS DECL CONST INT max_size = 99 DECL CONST REAL PI = 3.1415 ... ENDDAT</code></pre><h3 id="设置点的全局应用"><a href="#设置点的全局应用" class="headerlink" title="设置点的全局应用"></a>设置点的全局应用</h3><p>​    <strong>全局点</strong><br>​            示教器管理者模式添加全局点全局点权限<br>​    <strong>全局声明</strong><br>​            在dat文件中DEFDAT  xxx 后面添加 public   在确定点DECL 之后添加 global</p><h3 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h3><p>全局方法可以被任何方法调用</p><pre><code>&amp;ACCESS RVDEF GRPS ( );FOLD INI;%&#123;PE&#125;  ;FOLD BASISTECH INI    GLOBAL INTERRUPT DECL 3 WHEN $STOPMESS==TRUE DO IR_STOPM ( )    INTERRUPT ON 3     BAS (#INITMOV,0 )  ;ENDFOLD (BASISTECH INI)  ;FOLD USER INI    ;Make your modifications here  ;ENDFOLD (USER INI);ENDFOLD (INI)ENDGLOBAL DEF  GRPS_DIANJI_OPEN ();电极$IN[3]和$OUT[4]在设置的时候对应的是同一信号$OUT[3]=FALSE$OUT[4]=TRUEWAIT SEC 0.1WAIT FOR (NOT $IN[4]) AND $IN[3]WAIT SEC 0.5ENDGLOBAL DEF GRPS_DIANJI_CLOSE ()$OUT[4]=FALSE$OUT[3]=TRUEWAIT SEC 0.1WAIT FOR (NOT $IN[3]) AND $IN[4]WAIT SEC 0.5ENDGLOBAL DEF GRPS_TUOPAN_OPEN ()$OUT[2]=FALSE$OUT[1]=TRUEWAIT SEC 0.1WAIT FOR (NOT $IN[2]) AND $IN[1]WAIT SEC 0.5ENDGLOBAL DEF GRPS_TUOPAN_CLOSE ()$OUT[1]=FALSE$OUT[2]=TRUEWAIT SEC 0.1;等待 NOT $IN[1] 等于 true（$IN[1]需为false） 并且 $IN[2] 等于 trueWAIT FOR (NOT $IN[1]) AND $IN[2]WAIT SEC 0.5END</code></pre><h2 id="plc控制机器人动作的原理"><a href="#plc控制机器人动作的原理" class="headerlink" title="plc控制机器人动作的原理"></a>plc控制机器人动作的原理</h2><p>plc通过和机器人建立通讯以外部控制的方式来给机器人下达指令，通过程序号控制机器人要执行的逻辑，通过确定好的点位和输入输出信号，控制机器人具体的动作</p><h2 id="WorkVisual-6-0-项目配置"><a href="#WorkVisual-6-0-项目配置" class="headerlink" title="WorkVisual 6.0 项目配置"></a>WorkVisual 6.0 项目配置</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>库卡机器人使用WorkVisual 6.0  下载需要对应库卡机器人的kop文件<br>包括EthernetKRL、 KUKA.PROFINET MS、UserTech等文件</p><h3 id="io名称修改"><a href="#io名称修改" class="headerlink" title="io名称修改"></a>io名称修改</h3><pre class=" language-markdown"><code class="language-markdown">编辑器-->长文本编辑器</code></pre><p>更改完之后下载</p>]]></content>
      
      
      <categories>
          
          <category> 机器人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KUKA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FANUC发那科工业机器人学习</title>
      <link href="/posts/cd56c0ab.html"/>
      <url>/posts/cd56c0ab.html</url>
      
        <content type="html"><![CDATA[<p>FANUC发那科工业机器人学习</p><span id="more"></span><hr><h2 id="FANUC发那科机器人项目的实施流程"><a href="#FANUC发那科机器人项目的实施流程" class="headerlink" title="FANUC发那科机器人项目的实施流程"></a>FANUC发那科机器人项目的实施流程</h2><pre><code>    开始        --&gt;项目分析        --&gt;是否进行了机器人组装        --&gt;是否进行了系统配置        --&gt;是否建立了坐标系        --&gt;是否进行了I/O信号配置        --&gt;是否编程        --&gt;是否自动运行        --&gt;结束</code></pre><h2 id="安全启动流程"><a href="#安全启动流程" class="headerlink" title="安全启动流程"></a>安全启动流程</h2><p>检查接线是否正确</p><p>启动控制柜模式切换到T1</p><p>有效开关拨动至ON</p><h2 id="FANUC机器人本体组成"><a href="#FANUC机器人本体组成" class="headerlink" title="FANUC机器人本体组成"></a>FANUC机器人本体组成</h2><p>工业机器人的机械主体，主要由机械臂、驱动装置、传动装置和内部传感器组成。对于六轴机器人而言，其机械臂主要包括基座、腰部、手臂(大臂和小臂)和手腕</p><h2 id="控制器（控制柜）"><a href="#控制器（控制柜）" class="headerlink" title="控制器（控制柜）"></a>控制器（控制柜）</h2><h3 id="控制器组成"><a href="#控制器组成" class="headerlink" title="控制器组成"></a>控制器组成</h3><p>操作面板</p><p>断路器</p><p>连接电缆</p><p>散热风扇</p><p>usb端口</p><h3 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h3><p>ON<br>上电，无法打开控制器柜门</p><p>OFF<br>将其旋转至“OFF”，并继续逆时针转动一段距离，才能打开柜门，此时无法启动控制器</p><h3 id="操作面板"><a href="#操作面板" class="headerlink" title="操作面板"></a>操作面板</h3><p><strong>左侧旋钮模式开关</strong></p><p>模式：</p><p>T1模式：手动控制，机器人只能低速运行，小于250mm/s的速度</p><p>T2模式：手动控制，机器人可以全速运行</p><p>AUTO：成产状态下使用</p><p><strong>中间是启动开关</strong></p><p>启动当前所选的程序程序启动中亮灯</p><p><strong>右侧是急停按钮</strong></p><p>按下按钮使机器人立即停止。向右旋转急停按钮即可解除按钮锁定</p><h2 id="示教器"><a href="#示教器" class="headerlink" title="示教器"></a>示教器</h2><h3 id="示教器的指示灯"><a href="#示教器的指示灯" class="headerlink" title="示教器的指示灯"></a>示教器的指示灯</h3><p>POWER<br>上电指示灯</p><p>FAULT<br>报警指示灯</p><h3 id="示教器硬件介绍"><a href="#示教器硬件介绍" class="headerlink" title="示教器硬件介绍"></a>示教器硬件介绍</h3><p>左上角盘示教器有效开关</p><p>右上角是急停按钮</p><h3 id="安全开关"><a href="#安全开关" class="headerlink" title="安全开关"></a>安全开关</h3><p>安全开关(示教器背后黄色按钮)</p><p>有三种状态:全松、半按全按 ，半按状态有效，全松和全按时，将无法执行机器人操作</p><h3 id="按键介绍"><a href="#按键介绍" class="headerlink" title="按键介绍"></a>按键介绍</h3><p>按键</p><p><img src="/posts/cd56c0ab/%E6%8C%89%E9%94%AE.png"></p><p>示教器操作键</p><p><img src="/posts/cd56c0ab/%E7%A4%BA%E6%95%99%E5%99%A8%E6%93%8D%E4%BD%9C%E9%94%AE.png"></p><p>示教器应用键</p><p><img src="/posts/cd56c0ab/%E7%A4%BA%E6%95%99%E5%99%A8%E5%BA%94%E7%94%A8%E9%94%AE.png"></p><p>与点动相关按键</p><p><img src="/posts/cd56c0ab/%E4%B8%8E%E7%82%B9%E5%8A%A8%E7%9B%B8%E5%85%B3%E6%8C%89%E9%94%AE.png"></p><p>与执行相关按键</p><p><img src="/posts/cd56c0ab/%E4%B8%8E%E6%89%A7%E8%A1%8C%E7%9B%B8%E5%85%B3%E6%8C%89%E9%94%AE.png"></p><h3 id="设置示教器显示语言"><a href="#设置示教器显示语言" class="headerlink" title="设置示教器显示语言"></a>设置示教器显示语言</h3><p>1.按MENU键向下选择SETUP </p><p>2.选择第二栏第二个选项 General 点enter键进入功能</p><p>3.选第二个选项按F4在新探窗中选择chinese点enter确定</p><h3 id="示教器画面"><a href="#示教器画面" class="headerlink" title="示教器画面"></a>示教器画面</h3><h4 id="状态窗口"><a href="#状态窗口" class="headerlink" title="状态窗口"></a>状态窗口</h4><p>示教器的显示画面的上部窗口，状态窗口，上面显示8个软件LED、报警显示、倍率值。带有图标的显示表示ON 不带图标的显示表示OFF</p><p><strong>状态显示及含义</strong></p><p>处理<br>机器人正在进行某项作业</p><p>单段<br>处在单段运转模式下</p><p>暂停<br>按下了HOLD(暂停)按钮，或输入了HOLD信号</p><p>异常<br>发生了异常</p><p>运转<br>应用程序固有的LED</p><p>测试中<br>应用程序固有的LED</p><p>I/O<br>应用程序固有的LED</p><p>实行<br>正在执行程序</p><h4 id="MENU菜单含义"><a href="#MENU菜单含义" class="headerlink" title="MENU菜单含义"></a>MENU菜单含义</h4><p><strong>MENU菜单1</strong></p><p>1.实用工具:使用各类机器人功能<br>2.试运行:进行测试运转的设定<br>3.手动操作:手动执行宏指令<br>4.报警:显示发生的报警和过去报警履历以及详细情况<br>5.I/O:进行各类I0的状态显示<br>6.设置:进行系统的各种设定<br>7.文件:进行文件的加载保护<br>8.用户:在执行消息指令时显示用户消息</p><p><strong>MENU菜单2</strong></p><p>1.一览:显示程序一览画面<br>2.编辑:进行程序的示教、修改、执行<br>3.数据:显示数值寄存器、位置寄存器和码垛寄存器的值<br>4.状态:显示系统的状态<br>5.4D图形:显示3画面。同时显示现在位置的位置数据<br>6.系统:进行系统变量的设定、零点标定的设定等<br>7.用户2:显示从KAREL程序输出的消息<br>8.浏览器:进行网络上的Web网页的浏览</p><h4 id="辅助菜单应用，画面分割"><a href="#辅助菜单应用，画面分割" class="headerlink" title="辅助菜单应用，画面分割"></a>辅助菜单应用，画面分割</h4><p>FCTN(辅助)键用来显示辅助菜单</p><p><strong>辅助菜单1</strong></p><p>中止程序:强制结束执行中或暂停中的程序<br>禁止前进后退:禁止或解除从示教器启动程序<br>解除等待:跳过当前执行中的等待指令</p><p><strong>辅助菜单2</strong></p><p>简易/全画面切换:用来切换通常的画面菜单和快捷菜单<br>保存:将与当前显示的画面相关的数据保存在外部存储装置中<br>打印画面:原样打印当前所显示的画面<br>打印:用于程序、系统变量的打印<br>所有的IO仿真解除:解除所有IO信号的仿真设定<br>重新启动:可以进行再启动(重新启动有三种模式：热启动，冷启动，控制启动)<br>启用HMI菜单:按下MENU键时，选择是否显示HMI菜单</p><p><strong>辅助菜单3</strong></p><p>更新面板:进行画面的再次显示<br>诊断记录:发生故障时记录调查用数据(发生故障时请在电源置于OFF前记录下来)<br>划除诊断记录:删除所记录的调查用数据</p><p>DISP键和SHIFT键同时按下就可以分屏</p><h3 id="查看事件日志"><a href="#查看事件日志" class="headerlink" title="查看事件日志"></a>查看事件日志</h3><p>MENU键  选择报警就可以查看日志类型</p><p>进入日志后可以按F1键切换其他的日志类型</p><h3 id="清除报警"><a href="#清除报警" class="headerlink" title="清除报警"></a>清除报警</h3><p>使用SHIFT+RESET键清除示教器报警</p><h3 id="手动操作关节运动"><a href="#手动操作关节运动" class="headerlink" title="手动操作关节运动"></a>手动操作关节运动</h3><p>长按COORD键将示教坐标切换至关节</p><p>左手按下安全开关，RESET键清除开关时产生的报警信息</p><p>按+%增加机器人运动速度，按-%减少机器人的运动速度</p><p>长按SHIFT键同时按j1-j6，进行六轴关节运动</p><h3 id="手动操作直角运动"><a href="#手动操作直角运动" class="headerlink" title="手动操作直角运动"></a>手动操作直角运动</h3><p>长按COORD键将示教坐标切换至世界</p><p>左手按下安全开关，RESET键清除开关时产生的报警信息</p><p>长按SHIFT键同时按XYZ就会就行X轴Y轴和Z轴的相关运动</p><p>为什么会出现奇异点？</p><p>报警信息显示在奇异点附近报警信息时，就出现奇异点，奇异点出现的原因是4轴轴线和六轴轴线平行时导致的</p><p><strong>出现奇异点如何解决？</strong></p><p>左手按下安全开关，RESET键清除开关时产生的报警信息</p><p>长按COORD键将示教坐标切换至关节，将机器人恢复到一个安全位置，再切换到世界，将机器人移动至想要移动到的位置</p><h3 id="工具坐标系的认识和建立"><a href="#工具坐标系的认识和建立" class="headerlink" title="工具坐标系的认识和建立"></a>工具坐标系的认识和建立</h3><p>工具坐标系是表示工具中心和工具姿势的直角坐标系，需要在编程前<br>先进行自定义。未定义工具坐标系时，将被默认工具坐标系所取代。</p><p>注意：工具坐标系是为适应机器人的末端执行机构机构（如机器人夹爪、快换工具等）而专门建立的</p><p><strong>工具坐标系建立</strong></p><p><strong>三点法</strong></p><p>接近点1<br>接近点2<br>接近点3</p><p>三点法示教只可以设置工具中心点 ，不可以设置工具位姿</p><p>示教时为了正确设定坐标系，应尽量使三个趋近方向各不相同</p><p>使用 SHIFT+F5 纪录点</p><p>三点设定完成后系统自动计算工具中心点</p><p><strong>六点法</strong></p><p>接近点1<br>接近点2<br>接近点3<br>坐标原点<br>X方向点<br>Y方向点</p><p>与三点法一样的设定工具中心点，然后设定工具姿势。设定工具姿势时使用直角坐标系进行示教，保持工具姿势不变。</p><p><strong>验证工具坐标系</strong></p><pre class=" language-markdown"><code class="language-markdown">MENU-->设置-->坐标系-->F3-->工具坐标系-->F5键切换-->输入要验证的工具坐标系编号，然后手动控制工具xyz三方向移动还有第六轴的xyz方向移动</code></pre><p><strong>工具坐标系建立步骤</strong></p><p><strong>准备工作</strong></p><p>坐标系标定工具安装在法兰盘末端<br>选取基础模块的尖端点作为固定点</p><pre><code>MENU--&gt;设置--&gt;坐标系--&gt;F3--&gt;工具坐标系--&gt;移动光标至想要建立坐标系的编号--&gt;F2--&gt;六点法XY--&gt;移动光标至接近点1--&gt;按SELECT--&gt;选择程序以第一种姿态移动到接近点--&gt;MENU--&gt;设置--&gt;使用 SHIFT+F5 纪录点接近点1接近点2接近点3使用一样的方法记录点坐标原点可以设置成接近点3X方向点在坐标原点基础上按SHIFT+ENTER然后SHIFT+X在X轴正方向移动--&gt;使用 SHIFT+F5 纪录点--&gt;移动光标至坐标原点--&gt;按SHIFT+F4移动到坐标原点--&gt;光标移动至Y方向点定点和X方向点一样的操作，显示以计算新位置表示设置完成</code></pre><h3 id="用户坐标系的认识和建立"><a href="#用户坐标系的认识和建立" class="headerlink" title="用户坐标系的认识和建立"></a>用户坐标系的认识和建立</h3><p>用户坐标系是用户对每个作业空间进行定义的直角坐标系。用户坐标<br>系在尚未设定时，将被世界坐标系所取代。</p><p><strong>设定方法</strong></p><p><strong>三点法</strong><br>示教3点，即坐标系的原点、X轴方向的1点、XY平面上的1点（Y轴方向的1点）进行示教。</p><p>不可改变机器人的姿态<br>Y方向点表示在XOY平面上一点</p><p><strong>四点法</strong><br>示教4点，即平行于坐标系的X轴的始点、X轴方向的1点、XY平面上的1点（Y轴方向的1点）、坐标系的原点进行示教。</p><p><strong>直接输入法</strong><br>直接输入相对世界坐标系的用户坐标系原点的位置x、y、2、和世界坐标系的X轴、Y轴、Z轴周围的回转角w、p、r、的值。</p><p><strong>验证用户坐标系</strong></p><pre><code>MENU--&gt;设置--&gt;坐标系--&gt;F3--&gt;用户坐标系--&gt;F5键切换--&gt;输入要验证的用户坐标系编号--&gt;ENTER--&gt;长按COORD键将示教坐标切换至用户，然后手动控制工具xyz三方向移动还有第六轴的xyz方向移动</code></pre><p><strong>用户坐标系建立步骤</strong></p><p><strong>准备工作</strong></p><p>坐标系标定工具安装在法兰盘末端<br>选取基础模块用于建立用户坐标系</p><pre><code>MENU--&gt;设置--&gt;坐标系--&gt;F3--&gt;用户坐标系--&gt;移动光标至想要建立坐标系的编号--&gt;F2--&gt;三点法--&gt;选择坐标原点--&gt;SELECT选择程序--&gt;ENTER--&gt;光标移动至第一行--&gt;FWD启动程序--&gt;ENTER--&gt;使用SHIFT+F5 纪录点X轴方向点、Y轴方向点操作一样</code></pre><h3 id="IO种类和类别"><a href="#IO种类和类别" class="headerlink" title="IO种类和类别"></a>IO种类和类别</h3><p><strong>I/O种类</strong></p><pre class=" language-markdown"><code class="language-markdown">通用I/O<span class="token code keyword">    数字I/0</span><span class="token code keyword">        属通用数字信号，从外围设备通过处理，分为数字量输入DI[i]和数字量输出DO[i]，有ON和OFF</span><span class="token code keyword">    组I/O</span><span class="token code keyword">        分为GI[i] /GO[i]，信号的值用数值(10/16进制数)来表达，转变或逆转变为2进制数后通过信号线交换数据。</span><span class="token code keyword">    模拟I/O</span><span class="token code keyword">        分为模拟量输入AI [i] 和模拟量输出AO[i]，进行读写时，将模拟输入/输出电压值转化为数字值</span>专用I/0<span class="token code keyword">    机器人I/O</span><span class="token code keyword">        机器人I/O是经由机器人，作为末端执行器I/O被使用的机器人数字信号。分为机器人输入信号RI[i]和机器人输出信号RO[i]。</span><span class="token code keyword">    外围设备IO</span><span class="token code keyword">        外围设备I/O(UI/UO)，是在系统中已经确定了其用途的专用信号。分为外围设备输入信号UI [i]和外围设备输出信号UO[i]。</span><span class="token code keyword">    操作面板I/O    </span><span class="token code keyword">        操作面板I/O,是用来进行操作面板操作箱的按钮和LED状态数据交换的数字专用信号。分为输入信号SI[i]和输出信号sO[i].</span></code></pre><p><strong>分配方法</strong></p><p><strong>概念</strong></p><p>机架:指IO模块的种类<br>48-R-30IB Mate的主板(CRMA15、CRMA16)</p><p><img src="/posts/cd56c0ab/%E5%8F%91%E9%82%A3%E7%A7%91%E6%9C%BA%E5%99%A8%E4%BA%BA%E7%9A%84%E6%9C%BA%E6%9E%B6%E5%8F%B7%E5%8F%B7%E7%A0%81.png"></p><p>插槽:指构成机架的I/O模块的编号<br>IO连接设备从机接口、R-30i Mate 的主板(CRMA15、CRMA16)中，改值始终为1</p><p><strong>分配</strong></p><p>在进行 I/O 分配时，需要设定机架号、插槽和开始点。 </p><pre><code>MENU--&gt;I/O--&gt;数字--&gt;F3切换数字输入和输出--&gt;F2进入分配界面—--&gt;状态显示PEND的时候表示分配成功，重启添加修改</code></pre><h2 id="发那科机器人添加外部轴"><a href="#发那科机器人添加外部轴" class="headerlink" title="发那科机器人添加外部轴"></a>发那科机器人添加外部轴</h2><h3 id="FSSB路径"><a href="#FSSB路径" class="headerlink" title="FSSB路径"></a>FSSB路径</h3><h4 id="FSSB的作用"><a href="#FSSB的作用" class="headerlink" title="FSSB的作用"></a><strong>FSSB的作用</strong></h4><ul><li><strong>数据传输</strong>：传输伺服控制指令、编码器反馈数据等。</li><li><strong>设备连接</strong>：串联机器人的伺服放大器、电机、I/O模块等。</li><li><strong>实时性</strong>：高实时性通信，确保运动控制的精度和同步性。</li></ul><hr><h4 id="FSSB路径的组成"><a href="#FSSB路径的组成" class="headerlink" title="FSSB路径的组成"></a><strong>FSSB路径的组成</strong></h4><p>FSSB路径通常包括以下硬件组件：</p><ul><li><strong>控制柜（如R-30iB）</strong>：主控制器生成控制信号。</li><li><strong>伺服放大器（Servo Amplifier）</strong>：驱动伺服电机。</li><li><strong>伺服电机（Servo Motor）</strong>：内置编码器反馈位置/速度。</li><li><strong>终端电阻（Terminator）</strong>：用于阻抗匹配，防止信号反射。</li></ul><hr><h4 id="FSSB路径的典型连接拓扑"><a href="#FSSB路径的典型连接拓扑" class="headerlink" title="FSSB路径的典型连接拓扑"></a><strong>FSSB路径的典型连接拓扑</strong></h4><pre><code>控制柜（Master） → 第1轴伺服放大器 → 第2轴伺服放大器 → … → 末端放大器（需终端电阻）</code></pre><ul><li><strong>串联结构</strong>：FSSB采用菊花链（Daisy Chain）方式连接，所有设备通过光缆或电缆串联。</li><li><strong>终端电阻</strong>：路径末端的放大器需安装终端电阻（通常为跳线或拨码开关设置）。</li></ul><h4 id="FSSB路径设置步骤"><a href="#FSSB路径设置步骤" class="headerlink" title="FSSB路径设置步骤"></a><strong>FSSB路径设置步骤</strong></h4><p><strong>(1) 硬件连接</strong></p><ul><li>使用专用光缆（如A660-8001-T010）或电缆连接控制柜与放大器。</li><li>确保终端电阻正确配置（末端放大器上的终端电阻开关设为ON）。</li></ul><p><strong>(2) 软件配置</strong></p><ol><li><strong>进入FSSB设定界面</strong>：<ul><li>示教器上依次选择：<code>MENU → 系统 → 配置 → FSSB</code>。</li></ul></li><li><strong>设定放大器编号（Axis No.）</strong>：<ul><li>为每个伺服放大器分配轴号（如1~6轴）。</li></ul></li><li><strong>电机ID设置</strong>：<ul><li>确保电机ID与放大器编号匹配（需与硬件连接顺序一致）。</li></ul></li><li><strong>保存并重启</strong>：<ul><li>保存配置后重启控制器生效。</li></ul></li></ol><hr><h3 id="在FANUC机器人系统中，确定外部轴抱闸号（Brake-Number）的步骤如下："><a href="#在FANUC机器人系统中，确定外部轴抱闸号（Brake-Number）的步骤如下：" class="headerlink" title="在FANUC机器人系统中，确定外部轴抱闸号（Brake Number）的步骤如下："></a>在FANUC机器人系统中，确定外部轴抱闸号（Brake Number）的步骤如下：</h3><hr><p><strong>1. 确认外部轴类型</strong></p><ul><li><strong>伺服电机型外部轴</strong>：通常需要配置抱闸信号（如导轨、变位机等）。</li><li><strong>气动/液压型外部轴</strong>：可能无需抱闸信号。</li></ul><hr><p><strong>2. 查看硬件连接</strong></p><ul><li><strong>抱闸线连接端口</strong>：外部轴的抱闸线通常连接到FANUC控制柜的 <strong>CRR65A/B</strong>（伺服放大器）或 <strong>I/O模块</strong>（如数字输出DO）。</li><li><strong>放大器编号</strong>：外部轴对应的伺服放大器编号（如1<del>3轴是放大器1，4</del>6轴是放大器2，依此类推）。</li></ul><hr><p><strong>3. 系统参数配置</strong></p><ul><li><strong>抱闸信号分配</strong>：<ol><li>进入 <strong>MENU → 6. SYSTEM → F1 [TYPE] → Brake</strong>。</li><li>找到外部轴对应的抱闸参数（通常为 <strong>BRKXXX</strong>，XXX代表轴号，如BRK007表示第7轴）。</li><li>抱闸号一般与 <strong>轴号+偏移量</strong> 相关（例如第7轴抱闸号可能是7或6，取决于系统配置）。</li></ol></li><li><strong>I/O分配（如使用DO）</strong>：<ol><li>进入 <strong>MENU → I/O → Digital</strong>。</li><li>查看外部轴抱闸对应的DO地址（如DO[102]），需与电气图纸一致。</li></ol></li></ul><hr><p><strong>4. 参考外部轴配置文件</strong></p><ul><li>在 <strong>SYSTEM → CONFIG</strong> 中检查外部轴的机械编号（Mech No.）和组号（Group No.）。</li><li>抱闸号通常与机械编号或组内轴顺序相关（例如组2的第1轴抱闸号可能是5）。</li></ul><hr><p><strong>5. 测试验证</strong></p><ul><li>手动释放抱闸（通过I/O或参数强制）观察外部轴是否可自由移动。</li><li>使用 <strong>MCR.*MCR*.BRK_RELEASE</strong> 系统变量监控抱闸状态。</li></ul><hr><p><strong>常见示例</strong></p><ul><li><strong>第7轴（单外部轴）</strong>：<ul><li>抱闸参数：<code>BRK007</code>（值通常为7）。</li><li>对应DO信号：<code>DO[102]</code>（需根据实际配置确认）。</li></ul></li><li><strong>第7~9轴（组2）</strong>：<ul><li>抱闸号可能为5、6、7（与组内轴顺序相关）。</li></ul></li></ul><h3 id="外部轴-单机-一轴变位机"><a href="#外部轴-单机-一轴变位机" class="headerlink" title="外部轴   单机+一轴变位机"></a>外部轴   单机+一轴变位机</h3><p>轴控制卡–FSSB路径1–1号放大器（焊接机器人）–2号放大器（电机）</p><p>1.设定参数</p><table><thead><tr><th>运动组</th><th>FSSB路径</th><th>FSSB第1路径总轴数</th><th>硬件开始轴</th><th>放大器号</th><th>抱闸号</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>无</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td><td>无</td><td>7</td><td>2</td><td>3</td></tr></tbody></table><p>注释：运动组2的抱闸号取决于抱闸线的连接</p><p>2.需要添加的软件</p><table><thead><tr><th>Basic Positioner</th><th>A05B-2500-H896</th></tr></thead><tbody><tr><td>Multi-Group Motion</td><td>A05B-2500-H896</td></tr></tbody></table><p>3.步骤</p><pre class=" language-markdown"><code class="language-markdown">执行控制启动操作<span class="token code keyword">    PREV（返回）和NEXT键 的同时接通电源</span><span class="token code keyword">    选择Controlled start 进入控制启动</span>按下MENUS 选择 MAINTENANCE（机器人设定）按下F4 MANUAL（手动），进入FSSB路径设定界面<span class="token code keyword">    由于组2走的是第一路径，输入当前默认值为1</span>按下enter进入轴开始号设定界面<span class="token code keyword">    第一组 看机器人是几轴机器人 如果是6轴，第二组就设置成7</span>按enter 进入运动学类型设置界面<span class="token code keyword">    如果知道定位器在各轴间的偏置量的情况下选择1（运动学已知），不清楚的情况下，选择2（运动学未知），一般选2</span>按enter进入设定界面<span class="token code keyword">    要显示或者修改输入1</span><span class="token code keyword">    要添加轴，输入2</span><span class="token code keyword">    要删除轴输入3</span><span class="token code keyword">    退出选择4</span>要添加一个外部轴，输入2，按enter进入马达设置界面一般情况下选择1:standard method 按enter进入马达设置界面，（如果没有当前匹配的马达型号，输入0.next.page,继续选择）这里以aiF22/3000为例输入0.next.page 按enter进入输入105:aiF22，按enter进入马达转速选择界面输入2./3000，按enter进入方法器电流选择界面输入7:80A，按enter进入放大器编号设定界面输入2，按enter进入放大器种类设定界面<span class="token code keyword">    1为机器人六轴放大器</span><span class="token code keyword">    2为外部轴放大器</span>输入2，按enter进入轴运动类型设置界面<span class="token code keyword">    1直线运动</span><span class="token code keyword">    2旋转运动</span></code></pre><p>​        </p>]]></content>
      
      
      <categories>
          
          <category> FANUC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FANUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ABB工业机器人学习</title>
      <link href="/posts/b469a95b.html"/>
      <url>/posts/b469a95b.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><hr><h2 id="ABB机器人编程参数介绍"><a href="#ABB机器人编程参数介绍" class="headerlink" title="ABB机器人编程参数介绍"></a>ABB机器人编程参数介绍</h2><h3 id="机器人操作法则"><a href="#机器人操作法则" class="headerlink" title="机器人操作法则"></a>机器人操作法则</h3><p><strong>矩形法则</strong></p><p>机器人夹爪使用<strong>双信号</strong>  如果突然断电，夹爪会保持不动</p><h3 id="fine"><a href="#fine" class="headerlink" title="fine"></a>fine</h3><p>选fine机器人会走到指定位置</p><p>用fine可以预读下一个程序</p><p>信号前设置为fine  信号后设置延时</p><h3 id="z50"><a href="#z50" class="headerlink" title="z50"></a>z50</h3><p>转弯半径，机器人会走圆角</p><h3 id="noeoffs"><a href="#noeoffs" class="headerlink" title="noeoffs"></a>noeoffs</h3><p>不偏移</p><h3 id="v200"><a href="#v200" class="headerlink" title="v200"></a>v200</h3><p>移动速度</p><h2 id="ABB机器人编程指令"><a href="#ABB机器人编程指令" class="headerlink" title="ABB机器人编程指令"></a>ABB机器人编程指令</h2><h3 id="Set-Reset"><a href="#Set-Reset" class="headerlink" title="Set  Reset"></a>Set  Reset</h3><p>Set 指令：设置数字输出信号。</p><p>Set 用于将数字输出信号的值设置为 1，即打开数字输出信号</p><p>Reset指令：重置数字输出信号。</p><p>Reset 用于将数字输出信号的值重置为 0，即关闭数字输出信号</p><h3 id="setdo"><a href="#setdo" class="headerlink" title="setdo"></a>setdo</h3><p>SetDO 指令的语法通常是:<br>SetQ&lt;输出号&gt;,&lt;状态&gt;。<br>DO数字输出<br>其中，输出号是指数字输出的编号，状态是指要设置的状态，通常是0或1，分别表示关闭和打开。</p><h3 id="waittime"><a href="#waittime" class="headerlink" title="waittime"></a>waittime</h3><p>程序流程指令-WaitTime abb时间单位：s  大多数是毫秒<br>当前指合只用于机器人等待相应时间后，才执行以后指合,使用参变量[InPos]，机器人及其外轴必须在完全停止的情况下，<br>才进行等待时间计时,此指合会延长循环时间。</p><p>实例：<br>waitTime 3;<br>waitTime \InPos ,0 . 5;<br>waitTime \InPos ,0 ;</p><h3 id="movel的offs功能"><a href="#movel的offs功能" class="headerlink" title="movel的offs功能"></a>movel的offs功能</h3><p>偏移指令offs<br>以选定目标点为基准，沿着选定工件坐标系的X、Y、Z轴方向偏移一定的距离。<br>movel offs(p1,0,0,5),v10,z5,tool0\wobj=wobj1；</p><p>将机器人TCP移动到p1为基准点，沿着wobj1的Z轴正方向偏移5mm。当工件坐标系为默认值wobj0时，偏移指令offs的偏移数据XYZ就相当于大地坐标系。</p><h3 id="movel"><a href="#movel" class="headerlink" title="movel"></a>movel</h3><p>线性移动</p><h3 id="moveabsj"><a href="#moveabsj" class="headerlink" title="moveabsj"></a>moveabsj</h3><p> 关节运动</p><p>​        控制轴回原点 </p><h3 id="movec"><a href="#movec" class="headerlink" title="movec"></a>movec</h3><p>弧形行动  常用于画圆弧</p>]]></content>
      
      
      <categories>
          
          <category> ABB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ABB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电气系统</title>
      <link href="/posts/c4fcee63.html"/>
      <url>/posts/c4fcee63.html</url>
      
        <content type="html"><![CDATA[<p>电气系统</p><span id="more"></span><hr><h2 id="自动化设备主要组成"><a href="#自动化设备主要组成" class="headerlink" title="自动化设备主要组成"></a>自动化设备主要组成</h2><p>大脑：PLC</p><p>左右手：气缸和电机 </p><p><strong>气缸和电机</strong> 都可以实现自动化设备的 <strong>夹取 平移 旋转</strong></p><p><strong>气缸</strong> 用 气动夹爪，拉杆气缸，回转气缸 实现</p><p><strong>电机</strong> 用 电动夹爪，直线电机，DD马达 实现</p><h2 id="气缸系统："><a href="#气缸系统：" class="headerlink" title="气缸系统："></a>气缸系统：</h2><p><img src="/posts/c4fcee63/%E6%B0%94%E7%BC%B8%E7%B3%BB%E7%BB%9F.png" alt="img"></p><h3 id="气缸与电磁阀的工作原理"><a href="#气缸与电磁阀的工作原理" class="headerlink" title="气缸与电磁阀的工作原理"></a>气缸与电磁阀的工作原理</h3><p><strong>气缸</strong>：</p><pre class=" language-markdown"><code class="language-markdown">组成：腔体，活塞，推杆汽缸是用流体推动活塞分类：<span class="token code keyword">    单作用气缸</span><span class="token code keyword">        单作用气缸，只有一侧气路，气路控制伸出，弹簧控制缩回</span><span class="token code keyword">        缺点：行程不大，弹簧还会阻挡气缸伸出</span><span class="token code keyword">    双作用气缸</span><span class="token code keyword">        双作用气缸，两侧都有气路，一侧气路控制伸出，另一侧控制缩回</span><span class="token code keyword">        配合齿轮。齿条，就可以实现伸缩，旋转，开合</span></code></pre><h4 id="电磁阀："><a href="#电磁阀：" class="headerlink" title="电磁阀："></a>电磁阀：</h4><p>作用：控制气缸伸缩/进退</p><p>先导式的电磁阀主阀芯是气动的，线圈控制的是先导阀阀芯</p><p>两位五通电磁阀，阀芯的两侧装上磁铁吗，阀体的两侧固定两个线圈，通过plc发出电信号同性相斥，就可以轻松控制电磁阀阀芯</p><p>两位五通电磁阀有单双控之分，单控就是把一侧换成弹簧</p><p><img src="/posts/c4fcee63/%E4%B8%A4%E4%BD%8D%E4%BA%94%E9%80%9A%E7%94%B5%E7%A3%81%E9%98%80%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="img"></p><h4 id="磁性开关："><a href="#磁性开关：" class="headerlink" title="磁性开关："></a>磁性开关：</h4><p>反馈气缸位置</p><p>磁簧式磁性开关工作原理：气缸的活塞上会有一个环形磁铁，当活塞到指定位置，磁簧的簧片会磁化吸合，此时LED发光，PLC也会收到电信号</p><p><img src="/posts/c4fcee63/%E7%A3%81%E7%B0%A7%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="img"></p><p>磁簧是触点式的传感器，还有非触点式的</p><p>磁簧优点是便宜，缺点是会被高频震动干扰</p><h4 id="节流阀："><a href="#节流阀：" class="headerlink" title="节流阀："></a>节流阀：</h4><p>伸缩太慢会影响节拍，伸缩太快会造成机器抖动</p><p>通常装在气嘴上，空间窄时会串接在气管上</p><p>作用：调节气缸运行的速度</p><p>工作原理：</p><p><img src="/posts/c4fcee63/%E8%8A%82%E6%B5%81%E9%98%80%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="img"></p><h4 id="调压阀："><a href="#调压阀：" class="headerlink" title="调压阀："></a>调压阀：</h4><p>气缸压力过小可能会造成机械卡顿，压力过大可能会损坏物料</p><p>作用：调节气缸压力</p><p>一般总进气口会有一个三连过滤器，可以控制设备的总气压，单个设备需要控制气压的    话，可以单独加一个调压阀</p><p>工作原理：</p><p><img src="/posts/c4fcee63/%E8%B0%83%E5%8E%8B%E9%98%80%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="img"></p><h4 id="三位电磁阀："><a href="#三位电磁阀：" class="headerlink" title="三位电磁阀："></a>三位电磁阀：</h4><p>两位五通阀只能两种状态一种是完全缩回，一种是完全伸出，控制气缸停止的位置，需    要用到三位五通阀，三位五通阀的阀芯两侧各有一个弹簧    可以让弹簧处于中间位置</p><p>作用：提供更多的工作模式</p><p>工作原理：    <img src="/posts/c4fcee63/%E4%B8%89%E4%BD%8D%E4%BA%94%E9%80%9A%E4%B8%AD%E5%B0%81%E9%98%80%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="img"></p><p>分类：</p><p><img src="/posts/c4fcee63/%E4%B8%89%E4%BD%8D%E4%BA%94%E9%80%9A%E9%98%80%E9%97%A8%E5%88%86%E7%B1%BB.png" alt="img"></p><h4 id="气缸故障排查思路"><a href="#气缸故障排查思路" class="headerlink" title="气缸故障排查思路"></a>气缸故障排查思路</h4><p><img src="/posts/c4fcee63/%E6%B0%94%E7%BC%B8%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5%E6%80%9D%E8%B7%AF.png" alt="img"></p><h2 id="电机："><a href="#电机：" class="headerlink" title="电机："></a>电机：</h2><h3 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">    绕组数量</span><span class="token code keyword">        单相电机/三相电机</span><span class="token code keyword">    电源种类</span><span class="token code keyword">        交流电机/直流电机</span><span class="token code keyword">    磁力来源</span><span class="token code keyword">        永磁电机/感应电机</span><span class="token code keyword">    磁场-转子速度</span><span class="token code keyword">        异步电机/同步电机</span><span class="token code keyword">    功能</span><span class="token code keyword">        发电机/电动机</span><span class="token code keyword">    用途</span><span class="token code keyword">        驱动电机/控制电机</span><span class="token code keyword">    有无电刷</span><span class="token code keyword">        有刷电机：通过直流电源电压驱动，使用电刷和换向器进行换向，结构简单，但成本较低。</span><span class="token code keyword">        无刷电机：需要通过控制器进行电子换向，无需电刷，转速稳定，但系统复杂度和成本较高。无刷电机的结构中，绕组保持与电路相连，电磁体成为定子，永磁体成为转子</span></code></pre><h3 id="电机工作流程："><a href="#电机工作流程：" class="headerlink" title="电机工作流程："></a>电机工作流程：</h3><p><img src="/posts/c4fcee63/%E7%94%B5%E6%9C%BA%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="img"></p><h3 id="电机控制方案："><a href="#电机控制方案：" class="headerlink" title="电机控制方案："></a>电机控制方案：</h3><p>接触器控制交流电机</p><p>调速器控制调速电机</p><p>变频器控制变频电机</p><p>步进驱动器控制步进电机</p><p>伺服驱动器控制伺服电机</p><h4 id="电机控制的具体内容主要分为-3类："><a href="#电机控制的具体内容主要分为-3类：" class="headerlink" title="电机控制的具体内容主要分为 3类："></a>电机控制的具体内容主要分为 3类：</h4><p>速度控制  位置控制  转矩控制</p><p><img src="/posts/c4fcee63/%E7%94%B5%E6%9C%BA%E6%8E%A7%E5%88%B6.png" alt="img"></p><h4 id="电机控制场景："><a href="#电机控制场景：" class="headerlink" title="电机控制场景："></a>电机控制场景：</h4><p>直接控制使用空气开关直接控制</p><p>通过信号控制</p><pre><code>    需要使用接触器：通过控制器发出信号控制接触器触点的断开吸合来控制电机动作（正反转）</code></pre><h4 id="影响电机速度的因素："><a href="#影响电机速度的因素：" class="headerlink" title="影响电机速度的因素："></a>影响电机速度的因素：</h4><pre><code>    极对数    电压：调速器通过电压来调速    电源频率：变频器通过改变频率调速</code></pre><p>旋钮式的调速器只能通过手动去改变电机速度，不能使用电信号调节</p><h4 id="变频器可以通过多种控制方式进行调速："><a href="#变频器可以通过多种控制方式进行调速：" class="headerlink" title="变频器可以通过多种控制方式进行调速："></a>变频器可以通过多种控制方式进行调速：</h4><pre><code>设置好运转指令来源可以通过下面这几种方式控制电机启停        操作面板    端子    通讯协议设置好频率来源就可以使用    面板按钮     端子     模拟量     电位器     通讯协议</code></pre><h4 id="电机功能比较："><a href="#电机功能比较：" class="headerlink" title="电机功能比较："></a>电机功能比较：</h4><p><img src="/posts/c4fcee63/%E7%94%B5%E6%9C%BA%E5%8A%9F%E8%83%BD%E6%AF%94%E8%BE%83.png" alt="img"></p><h3 id="步进电机与伺服电机："><a href="#步进电机与伺服电机：" class="headerlink" title="步进电机与伺服电机："></a>步进电机与伺服电机：</h3><p>步进电机、伺服电机与变频器的区别是增加了位置控制</p><p>位置控制作用是电机走到某个精确的位置停下来</p><p>plc将位置指令发给驱动器主要靠脉冲或者通讯</p><p><strong>编码器：</strong>检测电机的转轴和转速</p><h4 id="脉冲控制伺服："><a href="#脉冲控制伺服：" class="headerlink" title="脉冲控制伺服："></a>脉冲控制伺服：</h4><p><img src="/posts/c4fcee63/%E4%BC%BA%E6%9C%8D%E7%B3%BB%E7%BB%9F.png" alt="img"></p><h5 id="实现精准的位置控制的几个主要部分："><a href="#实现精准的位置控制的几个主要部分：" class="headerlink" title="实现精准的位置控制的几个主要部分："></a><strong>实现精准的位置控制的几个主要部分：</strong></h5><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">    plc:</span><span class="token code keyword">        plc指令：发布指令</span><span class="token code keyword">        plc脉冲发送模块：下发指令</span><span class="token code keyword">    驱动器：</span><span class="token code keyword">        驱动器脉冲接收模块：接收指令</span><span class="token code keyword">        驱动器电机控制模块：执行指令</span><span class="token code keyword">    电机编码器：</span><span class="token code keyword">        编码器：监督工作</span></code></pre><h5 id="常用运动控制指令："><a href="#常用运动控制指令：" class="headerlink" title="常用运动控制指令："></a><strong>常用运动控制指令：</strong></h5><p>点动<br>绝对定位<br>相对定位<br>回原点</p><h5 id="指令怎么传递给驱动器？"><a href="#指令怎么传递给驱动器？" class="headerlink" title="指令怎么传递给驱动器？"></a><strong>指令怎么传递给驱动器？</strong></h5><p>使用脉冲：电信号从无到有再到无这样的一个起伏就是脉冲</p><h5 id="脉冲是怎么表示位置和速度？"><a href="#脉冲是怎么表示位置和速度？" class="headerlink" title="脉冲是怎么表示位置和速度？"></a><strong>脉冲是怎么表示位置和速度？</strong></h5><p>在轴对象硬件设置中</p><p>可以设置每旋转一周对应多少行程，取决于减速机的减速比，丝杆的导程等参数</p><p>可以设置每转一圈会发出多少脉冲</p><p>plc用发送脉冲的数量实现对位置的控制</p><p>plc用发送脉冲的频率实现对速度的控制</p><h5 id="正反转如何实现的？"><a href="#正反转如何实现的？" class="headerlink" title="正反转如何实现的？"></a><strong>正反转如何实现的？</strong></h5><p><strong>脉冲+方向模式</strong></p><p>就是再加一个控制正反转的信号，通过这个信号（例如红灯亮灭）来控制正转或者反转，通过绿灯来决定位置和速度</p><p><strong>双脉冲模式</strong></p><p>红灯的脉冲表示反转，绿灯的脉冲表示正向</p><p><strong>AB向模式</strong></p><p>红灯超前的脉冲表示反转</p><p>绿灯超前的脉冲表示正向</p><p><strong>伺服正常工作条件：</strong></p><p>PLC与驱动器支持该模式<br>两侧模式设置一致<br>接线方式正确</p><h4 id="总线通讯控制伺服："><a href="#总线通讯控制伺服：" class="headerlink" title="总线通讯控制伺服："></a>总线通讯控制伺服：</h4><p>plc和驱动器建立通讯以报文的形式批量交互数据</p><p>西门子111报文，plc和驱动器每个周期都会互发24字节的数据</p><h5 id="伺服电机怎么依照指令运行到指定的角度？"><a href="#伺服电机怎么依照指令运行到指定的角度？" class="headerlink" title="伺服电机怎么依照指令运行到指定的角度？"></a>伺服电机怎么依照指令运行到指定的角度？</h5><p>通过控制电流的反向和大小就可以实现基础的定位功能</p><h5 id="伺服驱动的区别："><a href="#伺服驱动的区别：" class="headerlink" title="伺服驱动的区别："></a>伺服驱动的区别：</h5><p><strong>开环控制</strong>：磁力传动的方式不稳定当机构阻力较大时就会出现打滑的情况，没有反馈机制，在控制器的一侧无法真正了解电机有没有旋转到位，不完全可控</p><p><strong>伺服与步进相比最大的特点就是闭环</strong></p><p>伺服电机的尾部会有一个<strong>编码器</strong></p><p>常见的增量式编码器向驱动器反馈的是AB相脉冲信号，驱动器通过编码器反馈的脉冲数判断伺服有没有运行到位，如果没有到目标位置伺服驱动器会持续给电机电流</p><table><thead><tr><th>伺服电机</th><th>步进电机</th></tr></thead><tbody><tr><td>闭环控制</td><td>开环控制</td></tr><tr><td>响应速度快</td><td>响应速度慢</td></tr><tr><td>低速下无振动</td><td>低速下有振动</td></tr><tr><td>高速扭矩恒定</td><td>高速扭矩变小</td></tr><tr><td>支持过载</td><td>不支持过载</td></tr><tr><td>贵</td><td>便宜</td></tr></tbody></table><h4 id="伺服控制-EPOS模式"><a href="#伺服控制-EPOS模式" class="headerlink" title="伺服控制 EPOS模式"></a>伺服控制 EPOS模式</h4><pre class=" language-markdown"><code class="language-markdown">断开伺服电机负载，驱动器模式改为EPOS（基本定位器控制）</code></pre><p>使用FB284 （SinaPos）的方式进行控制</p><p><img src="/posts/c4fcee63/SinaPos.png"></p><h4 id="伺服探针是什么？"><a href="#伺服探针是什么？" class="headerlink" title="伺服探针是什么？"></a>伺服探针是什么？</h4><p>一种用于测量和检测的高精度工具</p><h6 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h6><ol><li><strong>高精度</strong>：伺服系统能精确控制探针位置，确保测量结果准确。</li><li><strong>自动化</strong>：可集成到自动化系统中，减少人工干预，提升效率。</li><li><strong>多功能</strong>：适用于多种测量任务，如尺寸、形状、位置等。</li><li><strong>实时反馈</strong>：提供实时数据，便于及时调整。</li></ol><h6 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h6><p>伺服探针通过伺服电机驱动探针移动，传感器实时反馈位置信息，控制系统根据反馈调整探针位置，确保测量精度。</p><h6 id="裁切流程中如何进行伺位置修正"><a href="#裁切流程中如何进行伺位置修正" class="headerlink" title="裁切流程中如何进行伺位置修正"></a>裁切流程中如何进行伺位置修正</h6><p>探针信号源设置成色标的输入信号</p><p>色标传感器接入伺服的DI点，设定探针功能设定位上升沿触发  ，伺服读取当前位置根据位置偏差信息让PLC进行补偿，通常采用位置叠加MC—SuperImpose指令，补偿值是每周期读取伺服探针的差值</p><h2 id="丝杆导轨"><a href="#丝杆导轨" class="headerlink" title="丝杆导轨"></a>丝杆导轨</h2><h2 id="凸轮分割器"><a href="#凸轮分割器" class="headerlink" title="凸轮分割器"></a>凸轮分割器</h2><h2 id="IGBT"><a href="#IGBT" class="headerlink" title="IGBT"></a>IGBT</h2><p>绝缘栅双极晶体管</p><p>开关类型的元器件</p><p>开关频率可以实现每秒上万次的通断</p><p>可以将直流电转换成交流电</p><h3 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h3><p>通过打开或关闭栅极G来打开或者关闭，给G极高电平就会导通，低电平就会截止</p><p>优势：低驱动电流，低导压降</p><p>关键字：GCE  G用来导通和截止电流 ，集电极C和发电极E用来导通电流</p>]]></content>
      
      
      <categories>
          
          <category> 电气系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电气系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西门子PLC组态基础</title>
      <link href="/posts/8e6eb1e2.html"/>
      <url>/posts/8e6eb1e2.html</url>
      
        <content type="html"><![CDATA[<p>西门子PLC组态基础</p><span id="more"></span><hr><h2 id="组态："><a href="#组态：" class="headerlink" title="组态："></a>组态：</h2><p>“组态(Configure)”的含义是“配置”、“设定”、“设置”等意思，是指用户通过类似“搭积木”的简单方式来完成自己所需要的软件功能，而不需要编写计算机程序，也就是所谓的“组态”。</p><h2 id="组态积木搭建方式："><a href="#组态积木搭建方式：" class="headerlink" title="组态积木搭建方式："></a>组态积木搭建方式：</h2><h3 id="步进："><a href="#步进：" class="headerlink" title="步进："></a>步进：</h3><p>使用轴工艺对象进行组态</p><p>电机每转的负载位移=电机轴单圈角度 ÷ 减速比</p><h3 id="伺服："><a href="#伺服：" class="headerlink" title="伺服："></a>伺服：</h3><p>使用RF120C_1 、CM1241和 modbus_RTU进行组态</p><p>目标位置=定位位置 ÷(电机轴单圈角度 ÷ 减速比)x 单圈脉冲当量</p><h3 id="仓库："><a href="#仓库：" class="headerlink" title="仓库："></a>仓库：</h3><p>使用modbus_TCP还有 Tcon_ip_v4 进行组态</p>]]></content>
      
      
      <categories>
          
          <category> 西门子PLC组态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 西门子PLC组态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西门子设备学习</title>
      <link href="/posts/d09e7b42.html"/>
      <url>/posts/d09e7b42.html</url>
      
        <content type="html"><![CDATA[<p>西门子设备学习</p><span id="more"></span><hr><h2 id="西门子1200"><a href="#西门子1200" class="headerlink" title="西门子1200"></a>西门子1200</h2><h3 id="西门子sm1223-DC-RLY是什么含义？"><a href="#西门子sm1223-DC-RLY是什么含义？" class="headerlink" title="西门子sm1223 DC/RLY是什么含义？"></a>西门子sm1223 DC/RLY是什么含义？</h3><p>RLY表示继电器输出，若为DC则为晶体管输出<br>继电器输出好理解，就是个干接点，跟我们平时使用的继电器触点并无太大的区别，只是体积更小了而已，<br>而晶体管输出则使用MOS管来控制通断，可以想理解为一个电子继电器，没有实际触点，但是可以控制通断，<br>并且是有源的，同样的最常见的是直流24V，但是绝对不仅仅是只有24V</p><h3 id="西门子PLC中DC-DC-DC、AC-DC-RLY和-DC-DC-RLY的含义"><a href="#西门子PLC中DC-DC-DC、AC-DC-RLY和-DC-DC-RLY的含义" class="headerlink" title="西门子PLC中DC/DC/DC、AC/DC/RLY和 DC/DC/RLY的含义"></a>西门子PLC中DC/DC/DC、AC/DC/RLY和 DC/DC/RLY的含义</h3><p>第一 个如果是DC代表PLC模块输入电源为直流24v，第二个如果是AC代表PLC的模块输入电源为交流220v。</p><p>第二个DC代表模块端子输入电源为直流24v。</p><p>第三个如果是DC代表模块输出形式为晶体管输出，第三个如果是RLY代表模块输出形式为继电器输出。</p><h2 id="西门子1500"><a href="#西门子1500" class="headerlink" title="西门子1500"></a>西门子1500</h2>]]></content>
      
      
      <categories>
          
          <category> 西门子设备 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 西门子设备 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西门子Wincc基础使用</title>
      <link href="/posts/efdc187b.html"/>
      <url>/posts/efdc187b.html</url>
      
        <content type="html"><![CDATA[<p>西门子Wincc基础使用</p><span id="more"></span><hr><h2 id="创建精致面版"><a href="#创建精致面版" class="headerlink" title="创建精致面版"></a>创建精致面版</h2><p>1.根据plc触摸屏版本创建对应的触摸屏（HML精致面版）</p><p>2.打开HML块查看连接选项的情况</p><p>3.打开设备与网络查看HML与plc连接情况</p><p>4.打开画面，根画面，绘制图像</p><p>5.检查ip的端口</p><h2 id="仿真："><a href="#仿真：" class="headerlink" title="仿真："></a>仿真：</h2><p>如果是需要仿真就编译后点击仿真就好</p><p>plc也是编译后直接点击仿真</p><h2 id="网口连接实体设备："><a href="#网口连接实体设备：" class="headerlink" title="网口连接实体设备："></a>网口连接实体设备：</h2><p>1.电脑 Wincc image 的插件有没有安装</p><p>2.要看plc的端口还有HML端口有没有和实体机器对应，在不在同一个网段</p><h2 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h2><h3 id="灯："><a href="#灯：" class="headerlink" title="灯："></a>灯：</h3><p>需要画一个圆–&gt;属性–&gt;显示–&gt;添加新动画–&gt;选择外观</p><p>关联属性设置范围</p><p><img src="/posts/efdc187b/%E7%81%AF.png"></p><h3 id="按一次1，再按一次0"><a href="#按一次1，再按一次0" class="headerlink" title="按一次1，再按一次0"></a>按一次1，再按一次0</h3><p>事件中选择按下属性 –&gt;函数选择取反位</p><h3 id="按下一直运行，抬起就停止"><a href="#按下一直运行，抬起就停止" class="headerlink" title="按下一直运行，抬起就停止"></a>按下一直运行，抬起就停止</h3><p>针对只需要执行一次的事件</p><p>事件中选择按下和抬起属性  –&gt;按下函数选择置位位，抬起函数选择复位位</p><h3 id="需要输入或者显示数据"><a href="#需要输入或者显示数据" class="headerlink" title="需要输入或者显示数据"></a>需要输入或者显示数据</h3><p>选择工具栏元素的io域 </p><h2 id="模板修改："><a href="#模板修改：" class="headerlink" title="模板修改："></a>模板修改：</h2><p>在画面管理模板中进行修改</p>]]></content>
      
      
      <categories>
          
          <category> 西门子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 西门子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>视频压缩神器</title>
      <link href="/posts/41b56158.html"/>
      <url>/posts/41b56158.html</url>
      
        <content type="html"><![CDATA[<p>视频压缩神器</p><span id="more"></span><hr><h2 id="视频压缩可以从三个方面入手"><a href="#视频压缩可以从三个方面入手" class="headerlink" title="视频压缩可以从三个方面入手"></a>视频压缩可以从三个方面入手</h2><p>分辨率  帧率  码率</p><p>分辨率改小视频直接变糢糊不符合需求<br>帧率改小视频就会出现明显的卡顿<br>码率改小可以实现不怎么损失清晰度又能大大减小文件体积</p><h2 id="码率压缩视频原理"><a href="#码率压缩视频原理" class="headerlink" title="码率压缩视频原理"></a>码率压缩视频原理</h2><p>码率也叫数据速率或者比特率</p><p>一般码率对画质影响的曲线图</p><p><img src="/posts/41b56158/%E7%A0%81%E7%8E%87%E5%AF%B9%E7%94%BB%E8%B4%A8%E5%BD%B1%E5%93%8D%E6%9B%B2%E7%BA%BF.png"></p><p>码率提高到一定程度对画质的提升就没那么大了</p><h2 id="如何计算一个视频的码率"><a href="#如何计算一个视频的码率" class="headerlink" title="如何计算一个视频的码率"></a>如何计算一个视频的码率</h2><p><img src="/posts/41b56158/%E8%AE%A1%E7%AE%97%E4%B8%80%E4%B8%AA%E8%A7%86%E9%A2%91%E7%9A%84%E7%A0%81%E7%8E%87.png"></p><h2 id="根据想要的文件大小计算码率"><a href="#根据想要的文件大小计算码率" class="headerlink" title="根据想要的文件大小计算码率"></a>根据想要的文件大小计算码率</h2><p><img src="/posts/41b56158/%E6%A0%B9%E6%8D%AE%E6%83%B3%E8%A6%81%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E8%AE%A1%E7%AE%97%E7%A0%81%E7%8E%87.png"></p><h2 id="码率选择"><a href="#码率选择" class="headerlink" title="码率选择"></a>码率选择</h2><p>一般视频网站码率</p><p><img src="/posts/41b56158/%E4%B8%80%E8%88%AC%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E7%A0%81%E7%8E%87.png"></p><p>一般都在3Mbps-6Mbps之间</p><p>选6Mbps就可以</p><h2 id="软件推荐"><a href="#软件推荐" class="headerlink" title="软件推荐"></a>软件推荐</h2><p>HandBrake</p><p><img src="/posts/41b56158/HandBrake.png"></p><p>拖进视频后选视频</p><p><img src="/posts/41b56158/%E7%A0%81%E7%8E%87%E5%88%87%E6%8D%A2%E4%BD%8D%E7%BD%AE.png"></p><p>就可以调整码率</p>]]></content>
      
      
      <categories>
          
          <category> 视频压缩 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三菱PLC基础</title>
      <link href="/posts/4e3bb898.html"/>
      <url>/posts/4e3bb898.html</url>
      
        <content type="html"><![CDATA[<p>三菱PLC基础</p><span id="more"></span><hr><h2 id="软件安装："><a href="#软件安装：" class="headerlink" title="软件安装："></a>软件安装：</h2><p>GX Work2</p><p>GX Work3</p><h3 id="软件安装错误解决"><a href="#软件安装错误解决" class="headerlink" title="软件安装错误解决"></a>软件安装错误解决</h3><h4 id="GX-Works2-存储器空间或桌面堆栈不足或安装GX-Works3显示没有文件夹权限-解决方案"><a href="#GX-Works2-存储器空间或桌面堆栈不足或安装GX-Works3显示没有文件夹权限-解决方案" class="headerlink" title="GX Works2 存储器空间或桌面堆栈不足或安装GX Works3显示没有文件夹权限 解决方案"></a>GX Works2 存储器空间或桌面堆栈不足或安装GX Works3显示没有文件夹权限 解决方案</h4><p>安装好GX Work2之后  继续安装GX Work3 安装好就可以解决 </p><p>原因：之前安装GX Work3卸载过</p><h3 id="电脑COM口被占用的超简单解决方法"><a href="#电脑COM口被占用的超简单解决方法" class="headerlink" title="电脑COM口被占用的超简单解决方法"></a>电脑COM口被占用的超简单解决方法</h3><p>打开注册表 win+r 再输入regedit 即可打开注册表</p><p>在注册表中打开<br>HKEY_LOCAL_MACHINE<br>/SYSTEM<br>/CurrentControlSet<br>/Control<br>/COM Name Arbiter</p><p>点开就可以看到com db删掉就好</p>]]></content>
      
      
      <categories>
          
          <category> PLC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PLC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>音乐相关软件及常用配置方式</title>
      <link href="/posts/fa2afadb.html"/>
      <url>/posts/fa2afadb.html</url>
      
        <content type="html"><![CDATA[<p>音乐相关软件及常用配置方式</p><span id="more"></span><hr><h2 id="批量歌词下载"><a href="#批量歌词下载" class="headerlink" title="批量歌词下载"></a>批量歌词下载</h2><p>github项目地址：<a href="https://github.com/real-zony/ZonyLrcToolsX/releases">https://github.com/real-zony/ZonyLrcToolsX/releases</a></p><p>软件命令：<br>1、CD到软件目录<br>2、ZonyLrcTools.Cli.exe download -d “音乐目录” -l -n 线程数</p><h2 id="使用音乐标签软件批量下载（推荐）"><a href="#使用音乐标签软件批量下载（推荐）" class="headerlink" title="使用音乐标签软件批量下载（推荐）"></a>使用音乐标签软件批量下载（推荐）</h2><p>MusicTag</p>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>昆仑通态使用基础</title>
      <link href="/posts/2a5c9db5.html"/>
      <url>/posts/2a5c9db5.html</url>
      
        <content type="html"><![CDATA[<p>昆仑通态使用基础</p><span id="more"></span><hr><h2 id="McgsPro-3-3-2-6187版本软件使用介绍"><a href="#McgsPro-3-3-2-6187版本软件使用介绍" class="headerlink" title="McgsPro 3.3.2.6187版本软件使用介绍"></a>McgsPro 3.3.2.6187版本软件使用介绍</h2><h3 id="1-软件选择"><a href="#1-软件选择" class="headerlink" title="1.软件选择"></a>1.软件选择</h3><p>先看昆仑通态背部机型，确定可以使用的软件版本</p><h3 id="2-设置ip地址"><a href="#2-设置ip地址" class="headerlink" title="2.设置ip地址"></a>2.设置ip地址</h3><p>触摸屏启动时一直点击屏幕会出现系统设置界面找到设置ip的地方设置触摸屏ip为192.168.0.15</p><p>电脑上打开昆仑通态软件，先配置设备组态</p><p><img src="/posts/2a5c9db5/%E6%98%86%E4%BB%91%E9%80%9A%E6%80%81%E8%AE%BE%E5%A4%87%E7%BB%84%E6%80%81%E8%AE%BE%E7%BD%AE.png"></p><p>点击设备组态后选择</p><p><img src="/posts/2a5c9db5/%E8%AE%BE%E5%A4%87%E5%B7%A5%E5%85%B7%E7%AE%B1%E6%93%8D%E4%BD%9C.png"></p><p>选好之后会出现下面的界面</p><p><img src="/posts/2a5c9db5/%E8%AE%BE%E5%A4%87%E5%B7%A5%E5%85%B7%E7%AE%B1%E6%93%8D%E4%BD%9C%E5%AE%8C%E6%88%90.png"></p><p>双击通用TCPIP父设备0</p><p><img src="/posts/2a5c9db5/%E7%88%B6%E8%AE%BE%E5%A4%87ip%E8%AE%BE%E7%BD%AE.png"></p><p>本地ip地址：触摸屏ip</p><p>远程ip地址：plc的ip地址（对应自己电脑软件plc的）</p><p><img src="/posts/2a5c9db5/plc%E7%9A%84ip%E8%AE%BE%E7%BD%AE.png"></p><p>还有一个自己电脑ip地址，可以设置成192.168.0.25，以太网设置好自动匹配后可以不用设置，总之必须在同一个网段才能算配置成功</p><h3 id="3-页面绘制"><a href="#3-页面绘制" class="headerlink" title="3.页面绘制"></a>3.页面绘制</h3><p><strong>新建页面</strong></p><p><img src="/posts/2a5c9db5/%E6%96%B0%E5%BB%BA%E9%A1%B5%E9%9D%A2.png"></p><p>然后进行页面绘制</p><p>圆形可以表示灯泡</p><p>按钮可以表示开关</p><p>标签可以做简单的图形说明</p><p><strong>地址绑定</strong></p><p>地址绑定方式有两种</p><p>一种是db数据块绑定</p><p><img src="/posts/2a5c9db5/%E6%95%B0%E6%8D%AEDB%E7%BB%91%E5%AE%9A.png"></p><p>比如</p><p>绑定DB2，偏移量是2.1的数据  通道地址就是2.2，数据类型就是通道的第01位</p><p>绑定DB2，偏移量是0.2的数据 通道地址就是2，数据类型就是通道的第02位</p><p>一种是直接绑定</p><p><img src="/posts/2a5c9db5/%E6%95%B0%E6%8D%AE%E7%9B%B4%E6%8E%A5%E7%BB%91%E5%AE%9A.png"></p><p>比如</p><p>绑定%M2.0 通道地址就是2，数据类型就是通道的第00位</p><h3 id="4-下载"><a href="#4-下载" class="headerlink" title="4.下载"></a>4.下载</h3><p><strong>确定PUTGET通信访问已经开启</strong></p><p>plc属性–&gt;连接机制–&gt;勾选PUTGET通信访问</p><p>下载按钮位置</p><p><img src="/posts/2a5c9db5/%E4%B8%8B%E8%BD%BD%E6%8C%89%E9%92%AE.png"></p><p>连接网线plc下载好项目，然后进行昆仑通态下载配置，目标机名注意要使用 触摸屏ip</p><p><img src="/posts/2a5c9db5/%E4%B8%8B%E8%BD%BD%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B.png"></p><h2 id="功能实现："><a href="#功能实现：" class="headerlink" title="功能实现："></a>功能实现：</h2><h3 id="灯："><a href="#灯：" class="headerlink" title="灯："></a>灯：</h3><p>使用椭圆画一个圆–&gt;基本属性勾选填充颜色–&gt;设置属性和分段点</p><p><img src="/posts/2a5c9db5/%E7%81%AF.png"></p><h3 id="一个按钮实现开关"><a href="#一个按钮实现开关" class="headerlink" title="一个按钮实现开关"></a>一个按钮实现开关</h3><p>操作属性–&gt;数据对象值操作–&gt;选择取反</p><h3 id="按钮按下一直运行，抬起就停止"><a href="#按钮按下一直运行，抬起就停止" class="headerlink" title="按钮按下一直运行，抬起就停止"></a>按钮按下一直运行，抬起就停止</h3><p>操作属性–&gt;数据对象值操作–&gt;按下选择置1，抬起选择清0</p>]]></content>
      
      
      <categories>
          
          <category> 昆仑通态 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 昆仑通态 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字孪生基础</title>
      <link href="/posts/523d37c0.html"/>
      <url>/posts/523d37c0.html</url>
      
        <content type="html"><![CDATA[<p>数字孪生</p><span id="more"></span><hr><h2 id="数字孪生总体框架："><a href="#数字孪生总体框架：" class="headerlink" title="数字孪生总体框架："></a>数字孪生总体框架：</h2><p><img src="/posts/523d37c0/%E6%95%B0%E5%AD%97%E5%AD%AA%E7%94%9F%E6%80%BB%E4%BD%93%E6%A1%86%E6%9E%B6.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数字孪生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字孪生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制转换</title>
      <link href="/posts/7dc91154.html"/>
      <url>/posts/7dc91154.html</url>
      
        <content type="html"><![CDATA[<p>进制转换</p><span id="more"></span><hr><h2 id="进制特点"><a href="#进制特点" class="headerlink" title="进制特点"></a>进制特点</h2><p>在学习四种进制转换之前先了解一下四种进制的特点</p><pre class=" language-markdown"><code class="language-markdown">十进制：十进制是Decimal，简写为D都是以0-9这九个数字组成。二进制：二进制是Binary，简写为B由0和1两个数字组成。八进制：八进制是Octal，简写为O由0-7数字组成，为了区分与其他进制的数字区别，开头都是以0开始。十六进制：十六进制为Hexadecimal，简写为H表示方式为0x开头计数到F后，再增加1个，就进位。由0-9和A-F组成，英文字母A，B，C，D，E，F分别表示数字10～15。1    2    3    4    5    6    7    8    9    A    B    C    D    E    F</code></pre><h2 id="相互转换："><a href="#相互转换：" class="headerlink" title="相互转换："></a>相互转换：</h2><p>接下来开始讲解二进制、八进制、十进制、十六进制之间的相互转换（包括整数和小数）</p><h3 id="一、整数转换"><a href="#一、整数转换" class="headerlink" title="一、整数转换"></a>一、整数转换</h3><h4 id="1、十进制转二进制"><a href="#1、十进制转二进制" class="headerlink" title="1、十进制转二进制"></a>1、十进制转二进制</h4><p>（1）十进制转二进制的原理：十进制数除以2，余数为权位上的数，得到商继续除以2，直到商为0终止，然后反向取余数。</p><p>具体实现：</p><p>例如(67)10 → (1000011)2</p><p>将67除以2得商33，余数1。将商（33）作为第二次的被除数一次类推，直到商为0.</p><p><img src="/posts/7dc91154/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.png"></p><p>（2）十进制转八、十六进制的原理：跟十转二原理一样，十进制数除以8/16，余数为权位上的数，得到商继续除以8/16，直到商为0终止，然后反向取余数。</p><p>具体实现：</p><p>例758（十进制）→ 1366（八进制）     951（十进制）→   3B7（十六进制） </p><p>步骤跟十进制转二进制一样。</p><p> <img src="/posts/7dc91154/%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%85%AB_%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6.png"></p><h4 id="2、二进制转十进制"><a href="#2、二进制转十进制" class="headerlink" title="2、二进制转十进制"></a>2、二进制转十进制</h4><p>方法：把二进制数按权展开、相加即得十进制数。 </p><p> <img src="/posts/7dc91154/%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6.png"></p><p>例题： 1001 0110B = ______ D</p><p>如下图所示，答案为150D</p><p><img src="/posts/7dc91154/%E4%BA%8C%E8%BD%AC%E5%8D%81.png"></p><p>例题： 26Q = ______ D</p><p>如下图所示，答案为22D</p><p><img src="/posts/7dc91154/%E5%85%AB%E8%BD%AC%E5%8D%81.png"></p><p>例题： 23daH = ______ D</p><p>如下图所示，答案为9178D</p><p><img src="/posts/7dc91154/%E5%8D%81%E5%85%AD%E8%BD%AC%E5%8D%81.png"></p><h4 id="3、二进制转八进制、十六进制"><a href="#3、二进制转八进制、十六进制" class="headerlink" title="3、二进制转八进制、十六进制"></a>3、二进制转八进制、十六进制</h4><p> 方法：3位二进制数按权展开相加得到1位八进制数。（注意事项，3位二进制转成八进制是从右到左开始转换，不足时补0）。</p><p> <img src="/posts/7dc91154/%E4%BA%8C%E8%BD%AC%E5%85%AB.png"></p><p>同理，二进制转十六进制时， 4位二进制数按权展开相加得到1位十六进制数，不足四位补0。</p><p><img src="/posts/7dc91154/%E4%BA%8C%E8%BD%AC%E5%8D%81%E5%85%AD.png"></p><h4 id="4、八进制转二进制"><a href="#4、八进制转二进制" class="headerlink" title="4、八进制转二进制"></a>4、八进制转二进制</h4><p>方法：八进制数通过除2取余法，得到二进制数，对每个八进制为3个二进制，不足时在最左边补零。 </p><p> <img src="/posts/7dc91154/%E5%85%AB%E8%BD%AC%E4%BA%8C.png"></p><p>同理，十六进制转二进制也是一样的方法 </p><h3 id="二、小数转换"><a href="#二、小数转换" class="headerlink" title="二、小数转换"></a>二、小数转换</h3><h4 id="1、十进制转二进制-1"><a href="#1、十进制转二进制-1" class="headerlink" title="1、十进制转二进制"></a>1、十进制转二进制</h4><p>方法：十进制小数转换成二进制小数采用“乘二取整，顺序输出”</p><p>例题： 0.618D = ______ B（精确到小数点后3位）</p><p>如下所示，0.68乘以2，取整，然后再将小数乘以2，取整，直到达到题目要求精度。</p><p>得到结果：0.101B.</p><p><img src="/posts/7dc91154/%E5%B0%8F%E6%95%B0%E5%8D%81%E8%BF%9B%E5%88%B6%E8%BD%AC%E4%BA%8C%E8%BF%9B%E5%88%B6.png"></p><p>同理十进制转八进制、十六进制也是一样的做法，大家可以尝试做一下例题，熟悉掌握计算流程</p><p>例题：10.68D = ______ Q（精确到小数点后3位）</p><p>25.68D = ______ H（精确到小数点后3位）</p><p>答案：12.534Q.     19.ae1H</p><p>注意：小数进制转换有误差，并不是任何一个十进制小数都能转成有限为的二进制数</p><h4 id="2、二进制转十进制-1"><a href="#2、二进制转十进制-1" class="headerlink" title="2、二进制转十进制"></a>2、二进制转十进制</h4><p>方法：把二进制数按权展开、相加即得十进制数。（具体操作如下）</p><p><img src="/posts/7dc91154/%E5%B0%8F%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6.png"></p><p>小数转换跟普通转换类似，小数点后幂次就变成了负的。 </p><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p><a href="https://blog.csdn.net/weixin_53564801">爱躺平的威威</a>：<a href="https://blog.csdn.net/weixin_53564801/article/details/123665194">https://blog.csdn.net/weixin_53564801/article/details/123665194</a></p>]]></content>
      
      
      <categories>
          
          <category> 进制转换 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>西门子PLC基础</title>
      <link href="/posts/a5a5d18.html"/>
      <url>/posts/a5a5d18.html</url>
      
        <content type="html"><![CDATA[<p>西门子PLC基础 TIA博途S7-1200学习笔记</p><span id="more"></span><hr><p>PLC(Programmable Logic Controller)控制系统，即可编程逻辑控制器，是专为工业生产和控制而设计的一种<strong>数字运算</strong>操作的电子装置，并采用可编程的存储器，用于其内部存储程序，执行<strong>逻辑运算，顺序控制，定时，计数与数据处理</strong>等面向用户的指令，并通过<strong>数字或模拟式输入/输出端口</strong>控制各种类型的机电设备或生产过程，是工业控制的核心部分。</p><h2 id="接线"><a href="#接线" class="headerlink" title="接线"></a>接线</h2><p>输入I点接负，输出Q点接正</p><p><img src="/posts/a5a5d18/cpu%E6%8E%A5%E7%BA%BF.png"></p><p>其中，24V DC传感器电源输出要获得更好的抗噪声效果，即使未使用传感器电源也可将“M”连接到机壳接地。对于漏型（低电平）输入，将“_”连接到“M”(如图所示)对于源型（高电平）输入，将“+”连接到“M’</p><p>一般情况下L接正，M接负 ， 1M公共端接负（也可以接正）空格不接线</p><h2 id="PLC控制系统"><a href="#PLC控制系统" class="headerlink" title="PLC控制系统"></a>PLC控制系统</h2><p>主要分为：</p><p>​    上位机 : 监控设备状态控制设备 例PC或触摸屏<br>​    控制系统 ：对现场设备进行控制，记录现场运行数据，将现场设备运行状态传送至上位机<br>​    执行装置 ：电动机为执行装置，负责执行PLC发出的指令，完成生产</p><h2 id="组态："><a href="#组态：" class="headerlink" title="组态："></a>组态：</h2><p>“组态(Configure)”的含义是“配置”、“设定”、“设置”等意思，是指用户通过类似“搭积木”的简单方式来完成自己所需要的软件功能，而不需要编写计算机程序，也就是所谓的“组态”。它有时候也称为“二次开发”，组态软件就称为“二次开发平台”。</p><h2 id="伺服："><a href="#伺服：" class="headerlink" title="伺服："></a>伺服：</h2><p>伺服系统：是使物体的位置、方位、状态等输出，能够跟随输入量或给定值的任意变化而变化的自动控制系统。</p><h2 id="基本结构与工作原理"><a href="#基本结构与工作原理" class="headerlink" title="基本结构与工作原理"></a>基本结构与工作原理</h2><h3 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h3><p>SIMATIC S7-1200是西门子公司的一款紧凑型、模块化的PLC，可完成简单与高级逻辑控制、触摸屏(HMI)网络通信等任务。对于需要网络通信功能和单屏或多屏HMI的自动化系统，易于设计和实施。具有支持小型运动控制系统、过程控制系统的高级应用功能。<br>1200系列PLC的CPU 将微处理器、集成电源、输入和输出电路、内置PROFINET、高速运动控制 I/O以及板载模拟量输入组合到一个设计紧凑的外壳中来形成功能强大的控制器。</p><h3 id="CPU："><a href="#CPU：" class="headerlink" title="CPU："></a>CPU：</h3><p>S7-1200 系列CPU有五种不同型号的模块，分别为CPU1211C、CPU1212C、CPU 1214C、CPU1215C和CPU1217C。每一种模块都可以进行扩展，以满足用户系统需要。用户可以在任何型号的CPU 前方加入一个信号板，用来扩展数字量或模拟量 I/O，同时不影响控制器的实际大小，也可将信号模块连接至 CPU 的右侧以进一步扩展数字量或模拟量 I/0 的容量。</p><p><img src="/posts/a5a5d18/CPU.png"></p><h4 id="组成："><a href="#组成：" class="headerlink" title="组成："></a>组成：</h4><h4 id="cpu模块"><a href="#cpu模块" class="headerlink" title="cpu模块"></a>cpu模块</h4><p>1 电源接口;<br>2 存储卡插槽(上保护盖下面):<br>3 可拆卸用户接线端子;<br>4 板载I/0状态指示LED;<br>5 PROFINET连接端口(CPU的底部)。</p><p>该CPU提供一个PROFINET端口用于与其他模块进行PROFINET网络通信。还可以使用附加模块通过PROFIBUS、RS485、RS232、GPRS、IEC等协议进行网络通信。电源接口用于给CPU提供24V直流电，存储卡可以作为CPU的预装载存储区，用户项目文件仅存储在卡中，CPU中没有项目文件离开存储卡将无法运行;忘记密码时，清除CPU内部项目文件和密码;存储卡还可以用于更新S7-1200CPU的固件版本(只限24M卡)。接线端子用于PLC与外部设备进行数字或模拟通讯:PROFINET连接端口用于PLC与外部设备以及编程计算机进行总线通讯。</p><h4 id="信号模块："><a href="#信号模块：" class="headerlink" title="信号模块："></a>信号模块：</h4><p>信号模块又称为SM模块(Signal Module)包括数字量输入模块(DI)、输出模块(DO)和模拟量输入模块(AI)、输出模块(AO)</p><p>输入模块用于采集和接收输入信号，数字量输入模块(DI)用于接收开关、按钮、限位开关、光电开关、继电器等过来的数字量输入信号;模拟量输入模块(AI)用于接收电位器，温度传感器，测速发电机，压力传感器等提供连续变化的模拟量信号。</p><p>输出模块用于控制外部设备。数字量输出模块(DO)用于控制接触器、继电器指示灯、电磁阀等数字量控制外设:模拟量输出模块(AO)可用于控制变频器、压力阀等模拟量控制的外设。</p><h4 id="通信模块："><a href="#通信模块：" class="headerlink" title="通信模块："></a>通信模块：</h4><p><img src="/posts/a5a5d18/%E9%80%9A%E4%BF%A1%E6%A8%A1%E5%9D%97.png"></p><p>通信模块（CB）安装在CPU模块的左边，最多可以添加三块通信模块，可以使用点对点通信模块、RPOFIBUS模块、AS-i接口模块和IO-Link模块等</p><h4 id="PLC的工作过程"><a href="#PLC的工作过程" class="headerlink" title="PLC的工作过程"></a>PLC的工作过程</h4><h5 id="CPU的工作模式"><a href="#CPU的工作模式" class="headerlink" title="CPU的工作模式"></a>CPU的工作模式</h5><p>CPU有3种工作模式:RUN(运行)、STOP(停机)和STARTUP(启动)面板上的状态LED用来显示当前的控制模式，可以用编程软件改变CPU的工作模式,STOP模式下，CPU只处理通信请求和进行自诊断，不执行用户程序，不更新过程映像。上电后CPU进入STARTUP(启动)模式，进行上电诊断和系统初始化，如果检查到错误，将禁止CPU进入RUN模式，保持在STOP模式，指示灯会变成红色，且闪。</p><h5 id="工作模式的切换"><a href="#工作模式的切换" class="headerlink" title="工作模式的切换"></a>工作模式的切换</h5><p>1200系列CPU模块上没有切换工作模式的选择开关，只能用STEP7变成软件在线工具中的CPU操作面板。或者工具栏上的<img src="/posts/a5a5d18/%E5%90%AF%E5%8A%A81.png">和 <img src="/posts/a5a5d18/%E5%81%9C%E6%AD%A22.png"> 按钮，来切换RUN或者STOP工作模式，也可在用户程序中用STP指令让CPU进入STOP模式。</p><h5 id="冷启动与暖启动"><a href="#冷启动与暖启动" class="headerlink" title="冷启动与暖启动"></a>冷启动与暖启动</h5><p>下载了用户程序的程序块和硬件组态后，下一次切换到RUN模式时，CPU会执行冷启动。冷启动时复位输入，初始化输出，复位存储器，即清除工作存储器、非保持性存储区和保持性存储区的数据，并将装载存储器的内容复制到工作存储器。存储器复位不会清除诊断缓冲区，也不会清除永久保存的IP地址</p><p>冷启动之后，在下一次下载程序之前的STOP到RUN模式的切换均为暖启动。暖启动时，所有费保持性的系统数据和用户数据被初始化，不会清除保持性存储区的数据。</p><h2 id="plc工作原理："><a href="#plc工作原理：" class="headerlink" title="plc工作原理："></a>plc工作原理：</h2><p><strong>硬件自检</strong></p><p>CPU<br>通信模块<br>内存<br>扩展模块和接口<br>I/O模块<br>电源模块</p><p>如果有问题ERR报警灯就会亮</p><p>PLC <strong>重启</strong>方式（重启可以解决大部分的问题）</p><p>方式1:钥匙或拨码开关</p><p>用于将PLC切换到STOP状态，然后再切换到RUN状态，从而实现重启。</p><p>方式2:手动复位按钮</p><p>一些PLC上会有手动复位按钮按下该按钮可以将PLC重置为初始状态，实现重启。</p><p>方式3:编程软件在线控制</p><p>通过PLC的编程软件(如西门子的STEP7、Codesys等)连接到PLC，然后在软件中进行在线操作，将PLC切换到STOP状态，再切换到RUN状态，实现重启。</p><p><strong>自检没有问题就会进行初始化</strong></p><p>数据区清零与恢复<br>输出量置位或复位</p><p>因为大多数PLC没有断电保持的功能（断电保持是指在PLC断电后其内部某些关键数据、程序或状态信息仍然能够保持并在电源恢复后能够继续使用的功能。）</p><p><strong>之后进行扫描</strong></p><pre class=" language-markdown"><code class="language-markdown">输入扫描-->扫描程序，执行程序-->输出刷新-->输入扫描</code></pre><p>先进行输入的扫描，扫描的过程中输入发生变化，还是会按照老的输入状态执行，之后以从上至下从左至右的顺序扫描程序，实时刷新plc中的寄存器（计数器寄存器，定时寄存器，辅助继电器，内部继电器），程序扫描完之后，对输出的程序进行统一刷新输出</p><p><strong>运行过程中线程自检</strong></p><p>比如，</p><p>1.运行看门狗 （Watch Dog Timer）<br>即看门狗定时器时钟，如果在指定时间内没有喂狗(清零)操作，则重启扫描程序，避免死机。</p><p>2.通讯模块前置到输入采样的前面<br>PLC的通讯模块能够实现与多种设备的数据传输，包括传感器、执行器、其他PLC以及上位计算机(如工控机)等。通过通讯功能，PLC能够实时获取这些设备的数据，并将处理后的数据发送出去，从而实现整个工业自动化系统的数据共享和协同工作。</p><p><strong>PLC数据存储方式</strong></p><p>数据在存储器中是以字节方式存储的</p><p>程序在内存中相当于0-255的数字（2的8次方减1）</p><p><strong>计算机如何理解这些数字？</strong></p><p>计算机的每条指令对应一个具体的行动，指令分为操作码和操作数。操作码理解为要执行的动作，操作数可以理解为对应动作的属性，表示怎么干，现在只需要给每一条指令分配一串唯一的数字（例如 20 80 00 00 这样的机器语言）这样计算机就可以理解了</p><p>cpu中有程序计数器，可以理解为书签，cpu通过书签去判断程序运行到了哪一行</p><p>cpu有三个动作：1.读取指令2.翻译代码3.执行指令</p><p>cpu执行完一条指令的时候，程序计数器就会加1，当遇到跳转指令的时候就会修改程序计数器的数值，跳转到对应指令继续执行</p><h2 id="编程方式："><a href="#编程方式：" class="headerlink" title="编程方式："></a>编程方式：</h2><h3 id="梯形图"><a href="#梯形图" class="headerlink" title="梯形图"></a>梯形图</h3><p><img src="/posts/a5a5d18/%E6%A2%AF%E5%BD%A2%E8%87%AA%E9%94%81%E7%A8%8B%E5%BA%8F.png"></p><p>逻辑用梯形图</p><h3 id="功能块图"><a href="#功能块图" class="headerlink" title="功能块图"></a>功能块图</h3><p>功能块图(FBD)使用类似于数字电路的图形逻辑符号来表示控制逻辑，几乎没人用</p><p>用鼠标右键点击’MAIN(OB1)”，找到“切换编程语言”，选择“FBD”</p><h3 id="SCL语言"><a href="#SCL语言" class="headerlink" title="SCL语言"></a>SCL语言</h3><p><img src="/posts/a5a5d18/SCL%E8%AF%AD%E8%A8%80%E6%A1%88%E4%BE%8B.png"></p><p>数据处理用SCL</p><p>SCL(Structured Control Language，结构化控制语言)是一种基于PASCAL的高级编程语言。SCL除了包含PLC的典型元素(例如输入、输出、定时器等)外，还包含高级编程语言中的表达式、运算符和赋值运算。SCL提供了简便的指令进行程序控制如创建程序分支、循环或跳转。SCL主要适用于以下领域:数据处理、过程优化、数学运算和统计任务等。</p><h2 id="系统存储区："><a href="#系统存储区：" class="headerlink" title="系统存储区："></a>系统存储区：</h2><h3 id="PLC选择的物理存储器"><a href="#PLC选择的物理存储器" class="headerlink" title="PLC选择的物理存储器"></a>PLC选择的物理存储器</h3><p>1)只读存储器(ROM)。只读存储器只能读出，不能写入，<strong>是非易失性存储器电源中断也不会造成数据的丢失，一般用来存放PLC的操作系统</strong>。</p><p>2)随机存储器(RAM)。CPU可以从存储器读出数据或者向存储器写入数据，<strong>是易失性存储器，电源中断后，存储器的数据丢失</strong>:</p><p>3)快闪存储器(FLASH EPROM)和电擦除存储器(EEPROM)<strong>是非易失性存储器，用来存放用户程序和断电时需要保护的重要数据</strong>。</p><h3 id="装载存储器"><a href="#装载存储器" class="headerlink" title="装载存储器"></a>装载存储器</h3><p>装载存储器用于非易失性的存储用户程序、数据和组态信息，能够在断电后继续保持，该存储区位于存储卡(如果有)或者CPU中。项目被下载到CPU后，首先存储在装在存储区中。</p><h3 id="工作存储器"><a href="#工作存储器" class="headerlink" title="工作存储器"></a>工作存储器</h3><p>工作存储器是易失性存储器，用于在执行用户程序时存储用户项目的某些内容。CPU会将一些项目内容从装载存储区复制到工作存储区中，该存储区在断电后丢失，在回复供电时由CPU恢复。</p><h3 id="断电保持存储器"><a href="#断电保持存储器" class="headerlink" title="断电保持存储器"></a>断电保持存储器</h3><p>保持存储器用于在断电时存储所选用户存储单元的值。断电发生时，CPU留出了足够的缓冲时间来保存几个有限的指定单元的值，这些被保持的值会在下次供电时恢复。暖启动后，断电保持存储器中的数据保持不变，冷启动时断电保持存储器的值会被清除。</p><p>存储卡<br>可选的SIMATIC存储卡可用作存储用户程序的替代存储器，或用于传送程序，如果使用存储卡，CPU将运行存储卡中的程序，而不是自身存储器中的程序。(CPU仅支持预先已格式化的存储卡。存储卡保护开关要离开“LOCK”位置，关掉写保护功能。存储卡可将项目复制到多个CPU中，传送卡将存储的项目从卡中复制到CPU的存储器后必须取出存储卡。存储卡作为程序卡使用时，可以替代CPU存储器，所有CPU功能都由该程序卡进行控制，插入程序卡会擦出CPU内部装载存储器的所有内容(包括用户程序和任何强制I/0)，然后<strong>CPU会执行程序卡中的用户程序，程序卡必须保留在CPU中，如果取出，CPU必须切换到STOP模式</strong>。</p><h2 id="基本数据类型："><a href="#基本数据类型：" class="headerlink" title="基本数据类型："></a>基本数据类型：</h2><p>数据类型组中定义有数据的属性，例如：内容及有效存储区的表示。</p><p>在用户程序中，可使用预定义的数据类型，并将这些数据类型添加到用户自定义数据类型中。此时，可使用以下类别：</p><p>基本数据类型（二进制数、整数、浮点数、定时器、DATE、TOD、LTOD、CHAR、WCHAR）</p><p>复杂数据类型（DT、LDT、DTL、STRING、WSTRING、ARRAY、STRUCT）</p><p>用户自定义数据类型（PLC 数据类型 (UDT)）</p><p>指针</p><p>参数类型</p><p>系统数据类型</p><p>硬件数据类型<br>————————————————</p><table><thead><tr><th>数据符号</th><th>数据名称</th><th>取值</th><th>数值类型</th><th>应用范围</th><th>输入示例</th></tr></thead><tbody><tr><td>BOOL</td><td>布尔，是表示1位的值</td><td>0或1</td><td>二进制数</td><td>逻辑计算</td><td>TRUE，FALSE，0，1</td></tr><tr><td>BYTE</td><td>字节，是位字符串，占有8位</td><td>16#00—16#FF</td><td>二进制数</td><td>逻辑计算</td><td>16#12，16#AB</td></tr><tr><td>WORD</td><td>字，是位字符串，占有16位</td><td>16#0—16#FFFF</td><td>二进制数</td><td>逻辑计算</td><td>16#ABCD，16#0001</td></tr><tr><td>DWORD</td><td>双字，是位字符串占有32位</td><td>16#0—16#FFFF FFFF</td><td>二进制数</td><td>逻辑计算</td><td>16#02468ACE</td></tr><tr><td>LWORD</td><td>LWORD是一个64位的无符号整数，它可以存储64位的数据。</td><td>~</td><td>二进制数</td><td>逻辑计算，如果你需要存储大量的位数据，使用LWORD将会很方便。</td><td></td></tr><tr><td>Char</td><td>字符，占有8位</td><td>ASCII 字符</td><td>字符</td><td></td><td>‘A’,‘@’,’t’</td></tr><tr><td>WCHAR</td><td>宽字符，占有16位</td><td>ASCII 字符</td><td>字符</td><td>WCHAR 数据类型将扩展字符集中的单个字符保存为 UFT-16 编码形式。</td><td>WCHAR#‘A’</td></tr><tr><td>STRING</td><td></td><td>ASCII 字符串，包括特殊字符</td><td>字符串</td><td></td><td>“name”</td></tr><tr><td>SINT</td><td>有符号短整型，占有8位</td><td>-128—127</td><td>整型</td><td>数学计算</td><td>123，-123</td></tr><tr><td>USINT</td><td>无符号短整型，占有8位</td><td>0—255</td><td>整型</td><td>数学计算</td><td>123</td></tr><tr><td>INT</td><td>有符号整型，占16位</td><td>-32768—32767</td><td>整型</td><td>数学计算</td><td>123，-123</td></tr><tr><td>UINT</td><td>无符号整型，占16位</td><td>0—65535</td><td>整型</td><td>数学计算</td><td>123</td></tr><tr><td>DINT</td><td>有符号双整型，占32位</td><td>-2,147,483,648—2,147,483,647</td><td>整型</td><td>数学计算</td><td>123，-123</td></tr><tr><td>UDINT</td><td>无符号双整型，占32位</td><td>0—4,294,967,295</td><td>整型</td><td>数学计算</td><td>123</td></tr><tr><td>LINT</td><td>有符号长整型，占有8位</td><td>~</td><td>整型</td><td>数学计算</td><td>123，-123</td></tr><tr><td>ULINT</td><td>无符号长整型，占有8位</td><td>~</td><td>整型</td><td>数学计算</td><td>123</td></tr><tr><td>Real</td><td>单精度浮点数，最多可以指定 6 位有效数字来保持精度，占有32 位</td><td>实数：+/-1.18x10∧－38到+/-3.40x10 ∧38</td><td>浮点数</td><td></td><td>123.456、-3.4、-1.2E+12、<br>3.4E-3</td></tr><tr><td>LReal</td><td>双精度浮点数，最多可以指定 15 位有效数字来保持精度，占有64 位</td><td>长实数：+1-2.23x10∧ -308 到 +/-1.79 x10 ∧308</td><td>浮点数</td><td></td><td>12345.123456789，-1.2E+40</td></tr><tr><td>Time</td><td>32</td><td>T#-24d 20h 31m 23s 648ms toT#24d 20h_31m_23s_647ms<br>存储形式:-2,147,483,648 ms to+2.147.483.647 ms</td><td>时间</td><td></td><td>T#5m_30s<br>5#-2d<br>T#1d_2h_15m_30x_45ms</td></tr><tr><td>String</td><td>变量</td><td>0 到 254 字节字符 字符串</td><td>字符串</td><td></td><td>‘ABC’</td></tr><tr><td>DTL∧1</td><td>12个字节</td><td>最小值:DTL#1970-01-01-00:00:00.0最大值:DTL#2554-12-31-23:59:59.999 999999</td><td>日期</td><td></td><td>DTL#2008-12-16-20:30:20.250</td></tr><tr><td>Array（数组）</td><td></td><td></td><td>复杂数据类型</td><td></td><td></td></tr></tbody></table><p><strong>word数据类型可以写成16个%X，%X1-%X16</strong></p><p>因为word是16位，%X表示一个二进制位</p><h2 id="寄存器分类："><a href="#寄存器分类：" class="headerlink" title="寄存器分类："></a>寄存器分类：</h2><p>计算机内部都是以“0”、“1”二进制形式存储的，最小的存储单元位通常位一个字节（8个比特位：8bit），1bit位就是<strong>存储元</strong>（晶体管构成门电路，门电路构成锁存器或触发器，锁存器或触发器构成存储元）</p><p>一个字节存储单元</p><p>而根据CPU读写数据速度的不同，存储区域又可以划分为不同的存储区，相当于<strong>居民小区</strong>里有很多幢<strong>居民楼</strong>（进一步理解，可以将居民楼里的房间理解为<strong>存储元</strong>）,距离小区门口近的居民楼，进出小区自然是又快又方便。同理，距离CPU路程越近的存储区，其数据的访问速度也会越快，这块存储区我们称为<strong>寄存器</strong>，也是价格最贵的一块存储区。</p><p>PLC（可编程控制器）也是一个小型的计算机，它的CPU内部有用于PLC程序、数据和组态信息保存的<strong>装载存储器</strong>，有用于程序运行的工作存储器（相当于PC的运行内存RAM），有用于非易失性地存储限量的工作存储器值的保持性存储器。而用于用户程序在执行期间数据存储的地方称为数据存储区，这片存储区也是集成在CPU内部的，包括以下几大类：</p><table><thead><tr><th>存储区</th><th>说明</th><th>强制</th><th>保持性</th></tr></thead><tbody><tr><td>I 存储区<br>(过程映像输入)</td><td>在扫描周期开始时读取输入端子外围设备的“开”“关”的状态，将状态值写入到存储区</td><td>立即输入点<br>支持强制</td><td>无</td></tr><tr><td>Q 存储区<br>(过程映像输出)</td><td>PLC程序运算的输出值不会直接作用到输出端子的设备上，而是在扫描周期开始时先复制到Q存储区</td><td>立即输出点<br>支持强制</td><td>无</td></tr><tr><td>M 存储器</td><td>中间数据存储器，比如程序运算的一个中间值可以存到这里</td><td>无</td><td>可选</td></tr><tr><td>临时存储器L</td><td>存储块的临时数据，这些数据仅在该块的本地范围内有效</td><td>无</td><td>无</td></tr><tr><td>DB数据块</td><td>数据存储器，同时也是FB(功能块)的参数存储器</td><td>无</td><td>可选</td></tr></tbody></table><h2 id="寻址方式"><a href="#寻址方式" class="headerlink" title="寻址方式:"></a>寻址方式:</h2><p>程序在执行的过程中需要读写数据，而读写数据的第一步就是寻址（址：数据的地址，PLC中所有能访问的数据都有地址，就像每个人都有一个身份证一样），寻址方式分为：按位寻址、按字节寻址，按字寻址和按双字寻址</p><h3 id="按位寻址"><a href="#按位寻址" class="headerlink" title="按位寻址"></a>按位寻址</h3><p><img src="/posts/a5a5d18/%E6%8C%89%E4%BD%8D%E5%AF%BB%E5%9D%80.png"></p><p>按位寻址就是一次访问一个存储元的存储值，上图黑色存储元在Byte2字节Bit2位处，那么对他的寻址（访问）方式就是<strong>M2.2</strong>，“M”表示存储器的标识符，第一个“2”表示字节号，第二个“2”表示位号。</p><h3 id="按字节寻址"><a href="#按字节寻址" class="headerlink" title="按字节寻址"></a>按字节寻址</h3><p><img src="/posts/a5a5d18/%E6%8C%89%E5%AD%97%E8%8A%82%E5%AF%BB%E5%9D%80.png"></p><p>按字节寻址就是一次访问或者读写一个字节大小（8个bit位）的存储区，上图中绿色区域为Byte3，对他的寻址就是<strong>MB3</strong>，“M”表示存储器的标识符，“B”表示为按字（Byte）节寻址，“3”表示字节号。</p><h3 id="按字寻址"><a href="#按字寻址" class="headerlink" title="按字寻址"></a>按字寻址</h3><p><img src="/posts/a5a5d18/%E6%8C%89%E5%AD%97%E5%AF%BB%E5%9D%80.png"></p><p>按字寻址就是一次访问或者读写2个字节（16个bit位），上图中绿色和蓝色存储区的寻址方式分别位MW1和MW5，“M”表示存储器的标识符，“W”表示为按字（Word）寻址，“1”和“5”表示字节号。</p><h3 id="按双字寻址"><a href="#按双字寻址" class="headerlink" title="按双字寻址"></a>按双字寻址</h3><p><img src="/posts/a5a5d18/%E6%8C%89%E5%8F%8C%E5%AD%97%E5%AF%BB%E5%9D%80.png"></p><p>按双字寻址就是一次访问或者读写4个字节（32个bit位）的数据，上图中绿色和蓝色区域的寻址方式分别位MD0和MD4，“M”表示存储器的标识符，“D”表示为按双子（Double Word）寻址，“0”和“4”表示字节号</p><h3 id="寻址案例："><a href="#寻址案例：" class="headerlink" title="寻址案例："></a>寻址案例：</h3><p><img src="/posts/a5a5d18/%E5%AF%BB%E5%9D%80%E6%A1%88%E4%BE%8B.png"></p><p>程序运行时，每个扫描周期都会对I和Q存储器寻址，比如，当IO.0寻址的值为“1”，则常开触点闭合，若此时急停按钮时闭合的（急停按钮一般是一对常闭触点），则输出线圈Q0.0闭合，Q存储器0字节0位这个存储元就被写入“1”，这个存储元的“1”值会在下一个扫描周期开始时将PLC的Q0.0这个输出端子接通，KM接触器线圈得电，主电路接通，电机工作。</p><h2 id="程序块及类别"><a href="#程序块及类别" class="headerlink" title="程序块及类别"></a>程序块及类别</h2><p><img src="/posts/a5a5d18/%E7%A8%8B%E5%BA%8F%E5%9D%97.png"></p><p>在PLC的编程中，<strong>程序块</strong>是指一组逻辑控制代码，用于实现系统中特定的控制功能。程序块主要分为四类，包括函数块（FB）、函数（FC）、数据块（DB）和组织块（OB）四种类型。不严谨的说，组织块（OB）可以相当于主程序，函数块（FB）和函数（FC）可以相当于子程序，数据块（DB）可以相当于数据存储区。</p><p>关心数据FB</p><p>不关心数据FC</p><p>全局数据块DB</p><p>OB主程序不能被其他系统调用</p><h3 id="函数块（FB）"><a href="#函数块（FB）" class="headerlink" title="函数块（FB）"></a>函数块（FB）</h3><p><img src="/posts/a5a5d18/%E5%87%BD%E6%95%B0%E5%9D%97.png"></p><p>描述：函数块是用户编写的包含经常使用的功能的子程序，其含有专用的背景数据块。<br>由于运行过程中需要调用各种参数，因此产生了背景数据块DB，所以需要用到的数据就存储在了DB中。即使结束调用，数据也不丢失。</p><p>函数块（Function Block）是PLC编程中最常用的程序块类型。它类似于面向对象编程中的类，用于封装特定的控制逻辑，并将其作为一个整体进行调用和重复使用。函数块可以由多个输入和输出组成，它们的功能通常与具体的硬件设备相关。例如，一个函数块可以用来控制一个电机，另一个函数块可以用来实现温度控制。函数块通常由多个网络组成，每个网络包含了一个或多个指令，它们共同实现函数块的控制逻辑。一个函数块可以被多个程序或函数调用，这使得程序的编写变得更加高效和简单。</p><p>CPU执行FB中的程序，将块的输入输出参数和局部静态变量保存在背景数据块中，以便在后面的扫描周期访问它们。FB的典型应用是执行不能再一个扫描周期完成的操作。在调用FB时，会自动打开对应的背景数据块，数据块中的变量可以供其他代码块使用。</p><h3 id="函数（FC）"><a href="#函数（FC）" class="headerlink" title="函数（FC）"></a>函数（FC）</h3><p><img src="/posts/a5a5d18/%E5%87%BD%E6%95%B0.png"></p><p>函数也是用户编写的包含经常使用的功能的子程序。</p><p>函数（Function）与函数块非常相似，但它只包含一个网络，通常用于实现简单的控制逻辑。与函数块不同的是，FC无专用的背景数据块，函数（FC）在运行时产生的临时变量保存在全局数据块DB中，函数没有输入和输出参数，它只是将数据作为参数进行处理，然后返回处理结果，执行结束后，数据将丢失，不具备存储功能。函数通常用于实现一些通用的算法，例如加减乘除、求平方根、三角函数等。</p><p>可以在程序的不同位置多次调用同一个FC或FB块，这样可以简化重复执行的任务编程。</p><h3 id="数据块（DB）"><a href="#数据块（DB）" class="headerlink" title="数据块（DB）"></a>数据块（DB）</h3><p><img src="/posts/a5a5d18/%E6%95%B0%E6%8D%AE%E5%9D%97.png"></p><p>数据块（Data Block）是PLC编程中用于存储和管理数据的程序块类型。数据块可以包含各种数据类型，例如整型、浮点型、字符型等。在程序中，可以通过数据块来读取和写入变量的值。数据块通常用于存储程序的输入、输出、状态等数据，也可以用于存储程序运行过程中的临时变量。数据块可以在程序块之间共享，这使得程序的编写变得更加高效和简单。例如，如果多个函数块需要共享一个变量，可以将这个变量定义为一个数据块，并在函数块中引用它。</p><p>数据块分为背景数据块和全局数据块两种。<br>背景数据块是专门用于保存函数块（FB）中的输入变量，输出变量和静态变量的。其中的数据在编译时自动生成。FB的临时数据不是用背景数据块保存的。<br>全局数据块是一片存储用户数据的区域，供所有的代码块访问，所有的OB、FB和FC都可以访问，全局数据块也被称为共享数据块.</p><p>创建好数据块要看偏移量，需要右击数据块，取消优化的块访问，再编译下项目就可以看到偏移量</p><h3 id="组织块（OB）"><a href="#组织块（OB）" class="headerlink" title="组织块（OB）"></a>组织块（OB）</h3><p><img src="/posts/a5a5d18/%E7%BB%84%E7%BB%87%E5%9D%97.png"></p><p>组织块（Organization Block）是PLC编程中用于管理程序运行的程序块类型。组织块可以控制程序的执行顺序、周期、中断等。在程序中，通常需要定义一个或多个组织块来实现程序的运行和控制。组织块是CPU操作系统与用户程序的接口，决定了用户的程序结构。组织块将自动被操作系统调用。<br>使用中有中断组织块，启动组织块等。<br>使用时必须有OB1组织块，操作系统每个扫描周期执行一次OB1。</p><p>组织块通常由多个网络组成，每个网络包含了一个或多个指令，它们共同实现组织块的控制逻辑。组织块可以被编译成PLC的内部指令，以便在PLC运行时进行执行。在程序中，通常需要将组织块与输入和输出绑定，以便实现程序的运行和控制。</p><p>在PLC编程中，组织块可以分为多种类型，例如主程序（Main Program）、子程序（Subroutine）、中断（Interrupt）、异常（Exception）等。每种类型的组织块都有其独特的用途和应用场景，可以根据需要选择适合的类型。</p><p>每个组织块必须有唯一的编号，123号之前的一些编号是保留的，其他OB的编号应大于等于123。0B块不能互相调用，也不能被FC和FB块调用，只有启动事件(如周期性中断事件或诊断中断事件)可以启动OB块的执行。OB1是用户程序中的主程序，在每一次循环中，操作系统程序调用一次0B1，因此0B1中的程序时循环执行的。一个PLC程序中允许有多个程序循环，默认的块是OB1，其他的循环程序OB的编号必须大于等于123</p><h3 id="程序块作用："><a href="#程序块作用：" class="headerlink" title="程序块作用："></a>程序块作用：</h3><p>函数块和函数用于实现控制逻辑，数据块用于存储和管理数据，组织块用于管理程序的执行顺序、周期、中断等。</p><p>程序块的使用可以<strong>使PLC程序的编写变得更加高效和简单</strong>。</p><p>通过使用程序块，<strong>可以将复杂的控制逻辑封装为一个整体，实现代码的重复使用和共享</strong>。</p><p>程序块也可以<strong>提高程序的可读性和可维护性，降低程序的出错率</strong>。</p><h3 id="程序块的选择："><a href="#程序块的选择：" class="headerlink" title="程序块的选择："></a>程序块的选择：</h3><p>在PLC编程中，<strong>需要根据具体的应用场景选择适合的程序块</strong>类型。</p><p>​    例如，<br>​    如果需要实现电机控制，可以选择函数块；<br>​    如果需要实现通用的算法，可以选择函数；<br>​    如果需要存储和管理数据，可以选择数据块；<br>​    如果需要管理程序的执行顺序、周期、中断等，可以选择组织块。</p><h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>以串联方式连接的触点创建与（AND）逻辑程序段。以并联方式连接的触点创建或（OR）逻辑程序段。 可将触点相互连接并创建用户自己的组合逻辑。如果用户指定的输入位使用存储器标识符I（输入）或Q（输出），则从过程映像寄存器中读取位值。</p><p>控制过程中的物理触点信号会连接到PLC上的I端子。CPU扫描已连接的输入信号并持续更新过程映像输入寄存器中的相应状态值。</p><p>通过在I偏移量后加入“:P”，可指定立即读取物理输入（例如：“%I3.4:P”）</p><p>通过在Q偏移量后加入“:P”，可指定立即写入物理输出。对于立即写入，将位数据值写入过程映像输出寄存器并直接写入物理输出。</p><h3 id="1-位逻辑运算操作"><a href="#1-位逻辑运算操作" class="headerlink" title="1 位逻辑运算操作"></a>1 位逻辑运算操作</h3><p><img src="/posts/a5a5d18/%E4%BD%8D%E9%80%BB%E8%BE%91%E6%8C%87%E4%BB%A4.png"></p><p>1.1 常开触点<br><strong>—| |—</strong></p><p>1为OFF，0为ON。</p><p>1.2 常闭触点<br><strong>—|/|—</strong></p><p>1为ON，0为OFF。</p><p>1.3 取反触点<br><strong>—|NOT|—</strong><br>输入为0，输出为1，输入为1输出为0；</p><p>1.4 线圈<br><strong>—( )—</strong><br>1.5 赋值取反<br><strong>—( / )—</strong><br>将逻辑运算的结果进行取反，然后将其赋值给这个线圈的操作数。</p><p>1.6 复位输出<br><strong>—( R )—</strong><br>1.7 置位输出<br><strong>—( S )—</strong><br>1.8 置位位域<br><strong>—( SET_BF )—</strong><br>1.9 复位位域<br><strong>—( RESET_BF )—</strong><br>1.10 SR置位/复位触发器</p><p><img src="/posts/a5a5d18/SR%E7%BD%AE%E4%BD%8D_%E5%A4%8D%E4%BD%8D%E8%A7%A6%E5%8F%91%E5%99%A8.png"></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>S</td><td>使能置位</td></tr><tr><td>RI</td><td>使能复位，复位优先</td></tr><tr><td>SR</td><td>待使能操作数</td></tr><tr><td>Q</td><td>操作数信号状态</td></tr></tbody></table><p>SR置位/复位触发器-信号真值表</p><table><thead><tr><th>S</th><th>RI</th><th>Q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>保持</td></tr><tr><td>0</td><td>1</td><td>复位</td></tr><tr><td>1</td><td>0</td><td>置位</td></tr><tr><td>1</td><td>1</td><td>复位</td></tr></tbody></table><p>​        </p><p>1.11 RS复位/置位触发器</p><p><img src="/posts/a5a5d18/RS%E5%A4%8D%E4%BD%8D_%E7%BD%AE%E4%BD%8D%E8%A7%A6%E5%8F%91%E5%99%A8.png"></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>R</td><td>使能复位</td></tr><tr><td>SI</td><td>使能置位，置位优先</td></tr><tr><td>SR</td><td>待使能操作数</td></tr><tr><td>Q</td><td>操作数信号状态</td></tr></tbody></table><p>RS复位/置位触发器-信号真值表</p><table><thead><tr><th>SI</th><th>R</th><th>Q</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>保持</td></tr><tr><td>0</td><td>1</td><td>复位</td></tr><tr><td>1</td><td>0</td><td>置位</td></tr><tr><td>1</td><td>1</td><td>置位</td></tr></tbody></table><p>1.12 扫描操作数的信号上升沿<br><strong>—| P |—</strong><br>检测到信号上升沿时，操作数 1 的信号状态将在一个程序周期内保持置位为“1”。在其它任何情况下，操作数的信号状态均为“0”。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>操作数1</td><td>要扫描的信号</td></tr><tr><td>操作数2</td><td>保存上一次查询的信号状态的边沿存储位</td></tr></tbody></table><p>1.13 扫描操作数的信号下降沿<br><strong>—| N |—</strong><br>检测到信号下降沿时，操作数 1 的信号状态将在一个程序周期内保持置位为“1”。在其它任何情况下，操作数的信号状态均为“0</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>操作数1</td><td>要扫描的信号</td></tr><tr><td>操作数2</td><td>保存上一次查询的信号状态的边沿存储位</td></tr></tbody></table><p>1.14 在信号上升沿置位操作数<br><strong>—( P )—</strong><br>当输入查询到上升沿时，操作数置位为1一个程序周期，然后其它时间全为0；</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>操作数1</td><td>上升沿置位的操作数</td></tr><tr><td>操作数2</td><td>边沿存储位</td></tr></tbody></table><p>1.15 在信号下降沿置位操作数<br><strong>—( N )—</strong><br>当输入查询到下降沿时，操作数置位为1一个程序周期，然后其它时间全为0；</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>操作数1</td><td>下降沿置位的操作数</td></tr><tr><td>操作数2</td><td>边沿存储位</td></tr></tbody></table><p>1.16 P_TRIG扫描 RLO 的信号上升沿</p><p>![]( P_TRIG扫描 RLO 的信号上升沿.png)</p><p>检测到信号上升沿时，该指令输出 Q 将立即返回程序代码长度的信号状态“1”。在其它任何情况下，该输出返回的信号状态均为“0”。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>CLK</td><td>沿信号输入端，当前RLO</td></tr><tr><td>操作数</td><td>保存上一次查询的信号状态的边沿存储位</td></tr><tr><td>Q</td><td>边沿检测结果</td></tr></tbody></table><p>1.17 N_TRIG扫描 RLO 的信号下降沿</p><p>![](N_TRIG扫描 RLO 的信号下降沿.png)</p><p>检测到信号下降沿时，该指令输出 Q 将立即返回程序代码长度的信号状态“1”。在其它任何情况下，该输出返回的信号状态均为“0”。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>CLK</td><td>沿信号输入端，当前RLO</td></tr><tr><td>操作数</td><td>保存上一次查询的信号状态的边沿存储位</td></tr><tr><td>Q</td><td>边沿检测结果</td></tr></tbody></table><p>1.18 R_TRIG检查信号上升沿</p><p><img src="/posts/a5a5d18/R_TRIG%E6%A3%80%E6%9F%A5%E4%BF%A1%E5%8F%B7%E4%B8%8A%E5%8D%87%E6%B2%BF.png"></p><p>该指令将输入 CLK 的当前值与保存在指定实例中的上次查询（边沿存储位）的状态进行比较。如果该指令检测到输入 CLK 的状态从“0”变成了“1”，就会在输出 Q 中生成一个信号上升沿，输出的值将在一个循环周期内为 TRUE 或“1”。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>EN</td><td>使能输入</td></tr><tr><td>ENO</td><td>使能输出</td></tr><tr><td>CLK</td><td>达到信号，将查询该信号的边沿</td></tr><tr><td>Q</td><td>边沿检测的结果</td></tr></tbody></table><p>1.19 F_TRIG：检查信号下降沿</p><p><img src="/posts/a5a5d18/F_TRIG%EF%BC%9A%E6%A3%80%E6%9F%A5%E4%BF%A1%E5%8F%B7%E4%B8%8B%E9%99%8D%E6%B2%BF.png"></p><p>该指令将输入 CLK 的当前值与保存在指定实例中的上次查询（边沿存储位）的状态进行比较。如果该指令检测到输入 CLK 的状态从“1”变成了“0”，就会在输出 Q 中生成一个信号下降沿，输出的值将在一个循环周期内为 TRUE 或“1”。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>EN</td><td>使能输入</td></tr><tr><td>ENO</td><td>使能输出</td></tr><tr><td>CLK</td><td>达到信号，将查询该信号的边沿</td></tr><tr><td>Q</td><td>边沿检测的结果</td></tr></tbody></table><p>1.20 四种沿信号的区别<br>1.20.1</p><p><img src="/posts/a5a5d18/1.20.1.png"></p><p>在P触点上面的I0.0的上升沿，该触点接通一个扫描周期。因此P触点用于检测触点上面的地址的上升沿，并且直接输出上升沿脉冲。其他3种指令都是用来检测逻辑运算结果RLO（即流入指令输入端的能流）的上升沿。</p><p>1.20.2</p><p><img src="/posts/a5a5d18/1.20.2.png"></p><p>在流过P线圈的能流的上升沿，线圈上面的地址Q0.1在一个扫描周期为1状态。因此P线圈用于检测能流的上升沿，并用线圈上面M2.2的触点来输出上升沿脉冲。其他3种指令都是直接输出检测结果。</p><p>1.20.3&amp;4</p><p><img src="/posts/a5a5d18/1.20.3&4.png"></p><p>R_TRIG指令与P_TRIG指令都是用于检测流入它们的CLK端的能流的上升沿，并用Q端直接输出检测结果。其区别在于R_TRIG是函数块，用它的背景数据块DB3保存上一次扫描循环CLK端信号的状态，<br>而P_TRIG指令用边沿存储位M10.3来保存它。P 触点和P线圈分别用边沿存储位M10.0和M10.1来保存它们的输入信号的状态。</p><table><thead><tr><th>对比项目</th><th>P触点</th><th>P线圈</th><th>P_TRIG</th><th>R_TRIG</th></tr></thead><tbody><tr><td>沿信号来源</td><td>靠自己</td><td>靠别人</td><td>靠别人</td><td>靠别人</td></tr><tr><td>输出脉冲</td><td>给别人</td><td>给自己</td><td>给别人</td><td>给别人</td></tr><tr><td>边沿存储</td><td>自己的位</td><td>自己的位</td><td>自己的位</td><td>背景数据块</td></tr></tbody></table><h3 id="2-定时器指令"><a href="#2-定时器指令" class="headerlink" title="2 定时器指令"></a>2 定时器指令</h3><p>IEC：国际电工委员会缩写，IEC定时器表示国际标准定时器。</p><p>2.1 TP 脉冲定时器</p><p><img src="/posts/a5a5d18/TP_%E8%84%89%E5%86%B2%E5%AE%9A%E6%97%B6%E5%99%A8.png"></p><p>当 IN 端收到一个上升沿信号，Q开始输出能流并开始计时，当计时时间达到PT设定时间后，Q不再有能流输出，知道下有一个上升沿信号输入到IN端口。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>IN</td><td>启动输入</td></tr><tr><td>PT</td><td>脉冲持续时间</td></tr><tr><td>Q</td><td>脉冲输出</td></tr><tr><td>ET</td><td>当前时间值</td></tr></tbody></table><p>2.2 TON 接通延时定时器</p><p><img src="/posts/a5a5d18/TON_%E6%8E%A5%E9%80%9A%E5%BB%B6%E6%97%B6%E5%AE%9A%E6%97%B6%E5%99%A8.png"></p><p>【延时接通，瞬时关断】当IN有能流输入时，且保持一直有，则TON 开始计时，当计时时间达到PT设定时间后，Q输出能流，且只要IN有能流输入，Q便一直有能流输出。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>IN</td><td>启动输入</td></tr><tr><td>PT</td><td>接通延时持续时间</td></tr><tr><td>Q</td><td>超过时间PT后置位的输出</td></tr><tr><td>ET</td><td>当前时间值</td></tr></tbody></table><p>2.3 TOF 关断延时定时器</p><p><img src="/posts/a5a5d18/TOF_%E5%85%B3%E6%96%AD%E5%BB%B6%E6%97%B6%E5%AE%9A%E6%97%B6%E5%99%A8.png"></p><p>【瞬时接通，延时关断】当IN有能流输入时，Q输出能流，且只要IN有能流输入，Q便一直有能流输出；当IN从接通改为断开后，则TON 开始计时，此时Q仍有能流输出，当计时时间达到PT设定时间后，Q被复位。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>IN</td><td>启动输入</td></tr><tr><td>PT</td><td>关断延时的持续时间</td></tr><tr><td>Q</td><td>超过时间PT后复位的输出</td></tr><tr><td>ET</td><td>当前时间值</td></tr></tbody></table><p>2.5 TONR时间累加器定时器</p><p><img src="/posts/a5a5d18/TONR_%E6%97%B6%E9%97%B4%E7%B4%AF%E5%8A%A0%E5%99%A8%E5%AE%9A%E6%97%B6%E5%99%A8.png"></p><p>描述： 当IN端接通时，TNOR开始计时，当IN断开时，TNOR停止计时，但当前计时时间不清零，下次IN再接通时计时时间累加，当累加计时时间达到PT设定值后，Q输出能流，此时无论IN 是否接通都不在影响Q输出能流。<br>当R收到一个上升沿信号时，TONR累计时间清零，Q被复位。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>IN</td><td>启动输入</td></tr><tr><td>R</td><td>复位输入</td></tr><tr><td>PT</td><td>时间记录最长持续时间</td></tr><tr><td>Q</td><td>超过时间PT后要置位的输出</td></tr><tr><td>ET</td><td>累计时间值</td></tr></tbody></table><h3 id="3-计数器指令"><a href="#3-计数器指令" class="headerlink" title="3 计数器指令"></a>3 计数器指令</h3><p>3.1 CTU 加计数器</p><p><img src="/posts/a5a5d18/CTU_%E5%8A%A0%E8%AE%A1%E6%95%B0%E5%99%A8.png"></p><p>描述： CU端每收到一个上升沿信号，CTU便做加一计数，当计数值累加到PV设定值后，Q有能力输出；当R端接收到一个上升沿信号后，Q输出复位，CTU计数清零。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>CU</td><td>计数输入</td></tr><tr><td>R</td><td>复位输入</td></tr><tr><td>PV</td><td>置位输出Q的值</td></tr><tr><td>Q</td><td>计数器状态</td></tr><tr><td>CV</td><td>当前计数器的值</td></tr></tbody></table><p>3.2 CTD 减计数器</p><p><img src="/posts/a5a5d18/CTD_%E5%87%8F%E8%AE%A1%E6%95%B0%E5%99%A8.png"></p><p>描述： 程序刚启动时，当CD和LD都没有产生上升沿信号时，Q有能流输出；当LD收到一个上升沿信号，便将PV设定值装载到CTD计数器中，并且复位Q；每当CD收到一个上升沿信号时，CTD自减一，当减到0时，置位Q输出能流。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>CD</td><td>计数输入</td></tr><tr><td>LD</td><td>转载输入</td></tr><tr><td>PV</td><td>装载的计数值</td></tr><tr><td>Q</td><td>计数器状态</td></tr><tr><td>CV</td><td>当前计数器的值</td></tr></tbody></table><p>3.3 CTUD 加减计数器</p><p><img src="/posts/a5a5d18/CTUD_%E5%8A%A0%E5%87%8F%E8%AE%A1%E6%95%B0%E5%99%A8.png"></p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>CU</td><td>加计数输入</td></tr><tr><td>CD</td><td>减计数输入</td></tr><tr><td>R</td><td>复位输入</td></tr><tr><td>LD</td><td>转载输入</td></tr><tr><td>PV</td><td>装载的计数值</td></tr><tr><td>QU</td><td>加计数器状态</td></tr><tr><td>QD</td><td>减计数器状态</td></tr><tr><td>CV</td><td>当前计数器的值</td></tr></tbody></table><p>描述： cu让计数器自加一，CD让计数器自减一，R给计数器计数值清零，LD将PV的设定值装载到计数器；<br>计数器值对应的输出状态</p><table><thead><tr><th>数值范围</th><th>QU</th><th>QD</th></tr></thead><tbody><tr><td>(+∞,0]</td><td>0</td><td>1</td></tr><tr><td>(0,PV)</td><td>0</td><td>0</td></tr><tr><td>[PV,+∞)</td><td>1</td><td>0</td></tr></tbody></table><h3 id="4-比较指令"><a href="#4-比较指令" class="headerlink" title="4 比较指令"></a>4 比较指令</h3><table><thead><tr><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>CMP==</td><td>等于</td></tr><tr><td>CMP&lt;&gt;</td><td>不等于</td></tr><tr><td>CMP&gt;=</td><td>大于等于</td></tr><tr><td>CMP&lt;=</td><td>小于等于</td></tr><tr><td>CMP&gt;</td><td>大于</td></tr><tr><td>CMP&lt;</td><td>小于</td></tr><tr><td>IN_Range</td><td>值在范围内</td></tr><tr><td>OUT_Range</td><td>值不在范围内</td></tr><tr><td>—| OK |—</td><td>检查有效性</td></tr><tr><td>—| NOT OK |—</td><td>检查无效性</td></tr></tbody></table><p>检查有效性指令和检查无效性指令只针对浮点数数据类型进行查验。</p><p><img src="/posts/a5a5d18/%E6%AF%94%E8%BE%83%E6%8C%87%E4%BB%A41.png"></p><p><img src="/posts/a5a5d18/%E6%AF%94%E8%BE%83%E6%8C%87%E4%BB%A42.png"></p><h3 id="5-数学函数"><a href="#5-数学函数" class="headerlink" title="5 数学函数"></a>5 数学函数</h3><table><thead><tr><th>指令</th><th>描述</th><th>指令</th><th>描述</th></tr></thead><tbody><tr><td>CALCULATE</td><td>计算函数</td><td>LIMIT</td><td>设置限值</td></tr><tr><td>ADD</td><td>加</td><td>SQR</td><td>计算平方</td></tr><tr><td>SUB</td><td>减</td><td>SQRT</td><td>计算平方根</td></tr><tr><td>MUL</td><td>乘</td><td>LN</td><td>计算自然数对数</td></tr><tr><td>DIN</td><td>除法</td><td>EXP</td><td>计算指数值</td></tr><tr><td>MOD</td><td>取余</td><td>SIN</td><td>计算正弦值</td></tr><tr><td>NEG</td><td>求二进制补码</td><td>COS</td><td>计算余弦值</td></tr><tr><td>INC</td><td>递增</td><td>TAN</td><td>计算正切值</td></tr><tr><td>DEC</td><td>递减</td><td>ASIN</td><td>计算反正弦值</td></tr><tr><td>ABS</td><td>计算的绝对值</td><td>ACOS</td><td>计算反余弦值</td></tr><tr><td>MIN</td><td>获取最小值</td><td>ATAN</td><td>计算反正切值</td></tr><tr><td>MAX</td><td>获取最大值</td><td>FRAC</td><td>返回小数</td></tr><tr><td>EXPT</td><td>取幂</td><td></td><td></td></tr></tbody></table><h3 id="6-移动操作"><a href="#6-移动操作" class="headerlink" title="6 移动操作"></a>6 移动操作</h3><p>&lt;略&gt;学习中……</p><h3 id="7-转换操作"><a href="#7-转换操作" class="headerlink" title="7 转换操作"></a>7 转换操作</h3><p>&lt;略&gt;学习中……</p><h3 id="8-程序控制指令"><a href="#8-程序控制指令" class="headerlink" title="8 程序控制指令"></a>8 程序控制指令</h3><p>&lt;略&gt;学习中……</p><h3 id="9-字逻辑运算操作"><a href="#9-字逻辑运算操作" class="headerlink" title="9 字逻辑运算操作"></a>9 字逻辑运算操作</h3><p>&lt;略&gt;学习中……</p><h3 id="10-移位和循环"><a href="#10-移位和循环" class="headerlink" title="10 移位和循环"></a>10 移位和循环</h3><p>&lt;略&gt;学习中……</p><h2 id="编程操作及注意事项"><a href="#编程操作及注意事项" class="headerlink" title="编程操作及注意事项"></a>编程操作及注意事项</h2><h3 id="西门子PLC编程规范"><a href="#西门子PLC编程规范" class="headerlink" title="西门子PLC编程规范"></a>西门子PLC编程规范</h3><h4 id="启动标准流程："><a href="#启动标准流程：" class="headerlink" title="启动标准流程："></a>启动标准流程：</h4><p>​    启动流程：</p><p>​    编译项目–&gt; 下载项目 –&gt; stop plc–&gt; run plc –&gt;打开监控模式（小眼睛）</p><p>​    停止流程：</p><p>​    stop plc–&gt; 关闭监控模式 –&gt; 设置成离线模式 </p><p>​    中间需要修改代码：</p><p>​    上述停止流程后在修改，修改好之后重新执行一次启动流程</p><p>wincc模拟流程：</p><p>昆仑通态注意事项：</p><p>​    连接机制勾选put/get</p><h3 id="设置HZ频率"><a href="#设置HZ频率" class="headerlink" title="设置HZ频率"></a>设置HZ频率</h3><p><img src="/posts/a5a5d18/HZ%E9%A2%91%E7%8E%87%E8%AE%BE%E7%BD%AE.png"></p><p>地址不能使用默认设置，会影响其他地址的使用</p><p><strong>使用方式</strong></p><p><img src="/posts/a5a5d18/HZ%E6%A2%AF%E5%BD%A2%E5%9B%BE%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F.png"></p><h3 id="双线圈问题"><a href="#双线圈问题" class="headerlink" title="双线圈问题"></a>双线圈问题</h3><p><img src="/posts/a5a5d18/%E5%8F%8C%E7%BA%BF%E5%9C%88%E9%97%AE%E9%A2%98.png"></p><p>双线圈最新的结果就会覆盖掉前面的结果<br>双线圈问题一旦出现，决定该线圈状态的是程序中最后一个线圈的逻辑运算结果。</p><p>解决方案：</p><p>1.把线圈变成一个，将前面的触点并起来之后再与线圈连接</p><p><img src="/posts/a5a5d18/%E5%8F%8C%E7%BA%BF%E5%9C%88%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%881.png"></p><p>2.换掉线圈，使用置位指令，因为置位指令不同于线圈，其前面不导通时也不会对线圈进行任何操作，所以无需担心后面线圈的逻辑运算结果会覆盖前面的</p><p><img src="/posts/a5a5d18/%E5%8F%8C%E7%BA%BF%E5%9C%88%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F2.png"></p><h3 id="下位组件错误"><a href="#下位组件错误" class="headerlink" title="下位组件错误"></a>下位组件错误</h3><p>​    解决方式：（一般只要不影响项目运行就不管，有可能是项目缓存没有刷新好，等等就好了）</p><p>​        1.在软件中右击plc项目软件全部重构</p><p>​        2.直接编译（一般只要不影响项目运行）</p><p>​        3.下位组件重新分配名称</p><h2 id="PLC项目整合方式"><a href="#PLC项目整合方式" class="headerlink" title="PLC项目整合方式"></a>PLC项目整合方式</h2><h3 id="PLC总控"><a href="#PLC总控" class="headerlink" title="PLC总控"></a>PLC总控</h3><p>使用PLC15系列做PLC总控</p><p>负责把其他plc的程序存到一起运行</p><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>网关主要做数据的收集处理</p><h2 id="通讯"><a href="#通讯" class="headerlink" title="通讯"></a>通讯</h2><h3 id="PROFINET和PROFIbus之间的关系"><a href="#PROFINET和PROFIbus之间的关系" class="headerlink" title="PROFINET和PROFIbus之间的关系"></a>PROFINET和PROFIbus之间的关系</h3><p>PROFINET=PROFIbus+etherNET，把Profibus的主从结构移植到以太网上，所以profinet会有Controller和Device，他们的关系可以简单的对应于profibus的Master和Slave，当然，是有区别的，但这样对应可以有助于理解。另外由于profinet是基于以太网的，所以可以有以太网的星型、树形、总线型等拓扑结构，而profibus只有总线型。所以profinet就是把profibus的主从结构和ethernet的拓扑结构相结合的产物，其他像等时性等西门子鼓吹的特性其实以太网也有，只不过profinet由于有Controller这样的控制单元可以提高等时性的精度而已。</p><p>PROFINET 是一种新的以太网通讯系统。PROFINET 系统集成了基于 Profibus 的系统，提供了对现有系统投资的保护。它也可以集成其它现场总线系统。</p><p>PROFINET同样是西门子SIMATIC NET中的一个协议，具体说是众多协议的集合，其中包括PROFINET IO RT, CBA RT, IO IRT等等的实时协议。所以说PROFINET和工业以太网不能比，只能说PROFINET是工业以太网上运行的实时协议而以。不过现在常常称有些网络是PROFINET网络，那是因为这个网络上应用了PROFINET协议而已。</p><h3 id="PROFINET和Modbus的区别"><a href="#PROFINET和Modbus的区别" class="headerlink" title="PROFINET和Modbus的区别"></a>PROFINET和Modbus的区别</h3><p>PROFINET是基于工业以太网的总线协议，通过网线进行数据传输，Modbus是基于串口485/232/422的现场总线协议，多见于仪表等设备。实现Modbus和ProfiNet的转换可以使用上海泗博自动化的TS-180，TS-180主要实现M串口和ProfiNet的转换，串口端支持自定义协议，可以连接多个Modbus从站设备</p><h3 id="串口通讯的工作原理是什么-浅析串口协议的三层结构"><a href="#串口通讯的工作原理是什么-浅析串口协议的三层结构" class="headerlink" title="串口通讯的工作原理是什么?浅析串口协议的三层结构"></a>串口通讯的工作原理是什么?浅析串口协议的三层结构</h3><h4 id="一个数据位占多长时间"><a href="#一个数据位占多长时间" class="headerlink" title="一个数据位占多长时间?"></a><strong>一个数据位占多长时间?</strong></h4><p>使用异步传输，约定波特率</p><p>比如每秒展示一个位，1位/秒，发送方每1秒钟展示一位数据，接收方每1秒钟接收一位数据，这种表示通讯速度的物理量叫作<strong>波特率</strong>，波特率默认为9600位/秒</p><p>一盏灯的时候双方目标速度相同但是实际操作起来速度很难一致，这样的通讯叫作<strong>异步通讯</strong></p><p>引入时钟信号，我们在发送一位数据的时候时钟信号灯就亮一次，引入时钟信号的两盏灯的时候，数据接收方不需要关心速度只需要根据发送方的速度来接收数据，这样的传输叫作<strong>同步传输</strong></p><h4 id="怎样确定数据从哪开始"><a href="#怎样确定数据从哪开始" class="headerlink" title="怎样确定数据从哪开始?"></a><strong>怎样确定数据从哪开始?</strong></h4><p>通过开始位判断发送何时开始</p><p>发送数据之前发送一个特殊的信号表示传输的开始，当不发送数据信号时就让灯保持点亮，发送数据之前线让灯熄灭一秒2-9秒发送表示字符的八位数据</p><h4 id="收发节奏不同步怎么办？"><a href="#收发节奏不同步怎么办？" class="headerlink" title="收发节奏不同步怎么办？"></a><strong>收发节奏不同步怎么办？</strong></h4><p>限制数据长度通过结束位分割</p><p>发送多个数据的时候首发双方的实际节奏略有不同，两个设备之间通讯，设备的时钟振荡器也不会完全相同，数据量少的时候不影响，数据量大的时候就会出现累积误差（会把下一位的数据当成当前位数据去读取，数据乱码），解决方式是添加开始位和结束位，每读取一个字符数据就停一下，让灯固定亮一秒作为结束位，接收方在看到下一个开始位时由新的开始位重新确定每一位的数据采集时间，就能避免累计误差</p><h4 id="接收数据对错如何检验"><a href="#接收数据对错如何检验" class="headerlink" title="接收数据对错如何检验?"></a><strong>接收数据对错如何检验?</strong></h4><p>通过校验位 进行奇/偶校验</p><p>既可以收又可以发的通信叫作双工通信<br>灯光传输可以同时收发叫作全双工通信<br>鼓声传输就像对讲机一样同一时间只能由一方说话叫作半双工通信</p><p>只能由一方发送另一方或者几方接收叫作单工通信</p><h4 id="三层结构"><a href="#三层结构" class="headerlink" title="三层结构"></a>三层结构</h4><p>三层结构对应协议</p><p><img src="/posts/a5a5d18/%E4%B8%89%E5%B1%82%E7%BB%93%E6%9E%84%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8D%8F%E8%AE%AE.png" alt="img"></p><h5 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h5><p>将0和1的信号与声、光、电压一类的物理信号相互转换</p><p>工控常见的物理层协议</p><p><img src="/posts/a5a5d18/%E7%89%A9%E7%90%86%E5%B1%82.png" alt="img"></p><h5 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h5><p>将文字数据转换成0101的比特流或者将比特流转换成文字数据</p><p>数据链路层UART协议的工作原理（异步通讯）</p><p><img src="/posts/a5a5d18/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82.png" alt="img"></p><p>使用UART通讯时需要约定好波特率、数据长度、校验方式、结束位长度，默认是</p><p><img src="/posts/a5a5d18/%E9%BB%98%E8%AE%A4uart%E5%8D%8F%E8%AE%AE%E6%95%B0%E6%8D%AE.png" alt="img"></p><p>数据链路层协议还有PROFIBUS、CC-Link、SPI和IIC，其中SPI和IIC这两个协议是同步通讯的需要时钟线，嵌入式领域常用，工控领域几乎没有</p><h5 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h5><p>分为主站和从站，从站不能发送信息，只需要执行主站的任务</p><p>从站地址报文格式</p><p><img src="/posts/a5a5d18/%E4%BB%8E%E7%AB%99%E5%9C%B0%E5%9D%80%E7%9A%84%E6%8A%A5%E6%96%87.png" alt="img"></p><p>一个主站给多个从站发送信息，看报文中具体的从站地址，地址不相同的从站会忽略掉指令</p><p>主站和从站之间的通讯要轮询执行、</p><p><strong>应用层协议</strong></p><p>Modbus、PROFIBUS、CC-Link</p><h5 id="三层机构之间的关系"><a href="#三层机构之间的关系" class="headerlink" title="三层机构之间的关系"></a>三层机构之间的关系</h5><p><strong>物理层</strong>只定义1和0和物理量之间的对应关系</p><p><strong>数据链路层</strong>不关心底层0和1是怎么实现的只负责二进制数据流和字节数据相互转换</p><p><strong>应用层</strong>不关心数据是怎么获取的，只定义数据与业务逻辑的对应关系</p><p>没有应用层，只使用物理层和数据链路层通讯只能起到传声筒作用，通讯双方必须编写业务逻辑，使用Modbus、PROFIBUS，主站就可以随意查询和修改从站内部变量，或者周期性同步从站数据，把从站视为主站一部分</p><h3 id="开放式用户通信"><a href="#开放式用户通信" class="headerlink" title="开放式用户通信"></a>开放式用户通信</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">        组态模块：</span><span class="token code keyword">                通信-->开放式用户通信（Socket通信）</span><span class="token code keyword">                        TSend_C：建立连接发送数据</span><span class="token code keyword">                                触发条件：</span><span class="token code keyword">                                        REQ："Clock_5Hz"</span><span class="token code keyword">                                        CONNECT：使用模块右上角小蓝盒进行组态</span><span class="token code keyword">                                        DATA：plc发送给机器人指令数据</span><span class="token code keyword">                        TRCV_C：建立连接接收数据</span><span class="token code keyword">                                触发条件：</span><span class="token code keyword">                                        EN_R："AlwaysTRUE"</span><span class="token code keyword">                                        CONNECT：使用模块右上角小蓝盒进行组态</span><span class="token code keyword">                                        DATA：机器人响应并返回给plc的数据</span><span class="token code keyword">        注意：机器人与plc的数据是不兼容的需要进行数据的转换，输入/输出进行单独转换</span><span class="token code keyword">        案例：机器人与PLC通讯交互</span></code></pre><h3 id="MODBUS-TCP"><a href="#MODBUS-TCP" class="headerlink" title="MODBUS TCP"></a>MODBUS TCP</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">        组态模块：</span><span class="token code keyword">                通信-->其他-->Modbus Tcp</span><span class="token code keyword">                MB_CLIENT：通过PROFINET进行通信，作为客户端</span><span class="token code keyword">                        触发条件：</span><span class="token code keyword">                                REQ："AlwaysTRUE"</span><span class="token code keyword">                                DISCONNECT："AlwaysFALSE"</span><span class="token code keyword">                                MB_MODE：Modbus 的请求模式（读取、写入或诊断）  0：读    1，2：写</span><span class="token code keyword">                                MB_DATA_ADDR：这里对应需要匹配的仓位的起始地址</span><span class="token code keyword">                                MB_DATA_LEN：代表仓位的数量</span><span class="token code keyword">                                MB_DATA_PTR：P#DB4.DBX14.0 BOOL 8 表示哪个db块数据类型和所占存储区容量</span><span class="token code keyword">                                CONNECT ：连接通信协议TCON_IP_v4，一般建立单独db块，数据类型选择</span><span class="token code keyword">                                        InterfaceId：默认64</span><span class="token code keyword">                                        ID：不重复就可以</span><span class="token code keyword">                                        ActiveEstablished：</span><span class="token code keyword">                                                主动连接：true，将当前PLC作为TCP通信的客户端</span><span class="token code keyword">                                                被动连接：false，将当前PLC作为TCP通信的服务器</span><span class="token code keyword">                                        RemoteAddress：表示要连接的设备ip地址</span><span class="token code keyword">                                        RemotePort：要连接的设备的端口</span><span class="token code keyword">                MB_SERVER：通过PROFINET进行通信，作为服务端</span><span class="token code keyword">        案例：立体仓库</span></code></pre><h3 id="RFID"><a href="#RFID" class="headerlink" title="RFID"></a>RFID</h3><pre class=" language-markdown"><code class="language-markdown">通过硬件通讯：<span class="token code keyword">        组态硬件：</span><span class="token code keyword">                使用串口硬件 RF_120C RS422进行通信</span><span class="token code keyword">                对芯片进行读写时Ident设备/系统要选择  通过FB/光学阅读器获取参数</span><span class="token code keyword">        组态软件：</span><span class="token code keyword">                Ident工艺对象</span><span class="token code keyword">                        普通阅读器</span><span class="token code keyword">        组态模块：</span><span class="token code keyword">                选件包--> SIMATIC Ident（全双工：使用串口RF_120C 422）</span><span class="token code keyword">                        复位块：</span><span class="token code keyword">                                Reset_RF300：错误复位  （根据模块的实际型号选最近的）</span><span class="token code keyword">                                        触发条件：</span><span class="token code keyword">                                                EXECUTE：使用常开开关+FirstScan进行控制（FirstScan程序启动先执行一次进行复位）</span><span class="token code keyword">                                                TAG_TYPE：选择1 ，所有的ISO都可以发送应答（ISO西门子早期的以太网协议）</span><span class="token code keyword">                                                RF_POWER：默认</span><span class="token code keyword">                                                HW_CONNECT：</span><span class="token code keyword">                                                        两种连接方式</span><span class="token code keyword">                                                                TO_IDENT：创建Ident 工艺对象</span><span class="token code keyword">                                                                IID_HW_CONNECT：    </span><span class="token code keyword">                                                                        HW_ID：模块RF_120C的硬件标识符</span><span class="token code keyword">                                                                        LADDR：模块io地址                        </span><span class="token code keyword">                        Read:读数据</span><span class="token code keyword">                                触发条件：</span><span class="token code keyword">                                        EXECUTE：开关类型</span><span class="token code keyword">                                        ADDR_TAG：默认</span><span class="token code keyword">                                        LEN_DATA：是具体要读取的数据数组长度和写入长度相同</span><span class="token code keyword">                                        HW_CONNECT：连接TO_IDENT工艺对象或者IID_HW_CONNECT</span><span class="token code keyword">                                        IDENT_DATA：读取数组的db数据                </span><span class="token code keyword">                        Write:写数据</span><span class="token code keyword">                                触发条件：</span><span class="token code keyword">                                        EXECUTE：开关类型</span><span class="token code keyword">                                         ADDR_TAG：默认</span><span class="token code keyword">                                         LEN_DATA：是具体要写入的数据数组长度和读取长度相同</span><span class="token code keyword">                                         HW_CONNECT：连接TO_IDENT工艺对象或者IID_HW_CONNECT</span><span class="token code keyword">                                         IDENT_DATA：写入数组的db数据                    </span><span class="token code keyword">        注意：</span><span class="token code keyword">         读写器一次一般只能执行112BYTE 根据芯片来决定</span><span class="token code keyword">        </span>通过MODBUS TCP进行通信<span class="token code keyword">        </span><span class="token code keyword">        组态模块：</span><span class="token code keyword">            </span><span class="token code keyword">                通信-->其他-->Modbus Tcp</span><span class="token code keyword">                </span><span class="token code keyword">                    使用MB_CLIENT的两个同名DB块（因为走一个协议所以应该是一个通道 用同一个db块）</span><span class="token code keyword">                        </span><span class="token code keyword">                        触发条件：</span><span class="token code keyword">                            写：</span><span class="token code keyword">                                REQ："AlwaysTRUE"或者做一个开关</span><span class="token code keyword">                                MB_MODE：1</span><span class="token code keyword">                                MB_DATA_ADDR：根据具体的读写器地址来决定，写和读，一致 例：40015</span><span class="token code keyword">                                CONNECT ：写和读使用同一个协议</span><span class="token code keyword">                                </span><span class="token code keyword">                            读：</span><span class="token code keyword">                                REQ：做一个开关</span><span class="token code keyword">                                MB_MODE：0</span><span class="token code keyword">                                MB_DATA_ADDR：根据具体的读写器地址来决定，写和读，一致 例：40015</span><span class="token code keyword">                                CONNECT ：写和读使用同一个协议</span><span class="token code keyword">                </span><span class="token code keyword">                </span><span class="token code keyword">        报错：</span><span class="token code keyword">        80A3:看读模式的块和写模式的块的名称是否不同，不同的db块会产生两个不同的通道，一个通讯协议不能在两个不同通道进行数据交换</span><span class="token code keyword">        8383:看数据的长度和类型，国产的一般可以用INT进行通讯，可以将读取/写入的array数组改成INT数据类型，一般常见最长的长度是112个BYTE，也就是56个INT</span><span class="token code keyword">        40011-40015 这四位是系统常数 总共是11位  前四位可以不读，所以可以写成40015 7位</span></code></pre><p><strong>Modbus协议的数据模型和地址模型</strong></p><p><strong>数据模型</strong>是对从站设备可访问的数据进行抽象，Modbus协议的数据模型定义了四种可访问的数据，为了简化数据模型与设备存储区的对应关系，又引入了<strong>地址模型</strong>的概念，通过编号的方式对不同类型数据进行区分，也就是通过特定的编号作为前缀加到所讨论的数据地址中。如表中所示，通过0,1,3,4分别表示线圈，离散量输入，输入寄存器，和保持寄存器。</p><table><thead><tr><th>地址前缀编号</th><th>编号范围(1~65536)</th><th>编号范围(1~9999)</th><th>数据区块</th><th><strong>数据</strong>类型</th><th>访问类型</th></tr></thead><tbody><tr><td><strong>0</strong></td><td>000001~065536</td><td>00001~09999</td><td>线圈(Coils)</td><td>布尔</td><td>读/写</td></tr><tr><td><strong>1</strong></td><td>100001~165536</td><td>10001~19999</td><td>离散量输入(Discrete Input)</td><td>布尔</td><td>只读</td></tr><tr><td><strong>3</strong></td><td>300001~365536</td><td>30001~39999</td><td>输入寄存器(Input registers)</td><td>无符号2字节整型</td><td>只读</td></tr><tr><td><strong>4</strong></td><td>400001~465536</td><td>40001~49999</td><td>保持寄存器(Holding registers)</td><td>无符号2字节整型</td><td>读/写</td></tr></tbody></table><p>理论上，</p><p>线圈地址范围：000001~065536</p><p>离散量输入地址范围：100001~165536</p><p>输入寄存器地址范围：300001~365536</p><p>保持寄存器地址范围：400001~465536</p><p>由于65536是比较大的数值，实际应用一般不需要这么大的存储区，因此设备厂家普遍采用的是10000以内的地址范围，即：</p><p>线圈地址范围：00001~09999</p><p>离散量输入地址范围：10001~19999</p><p>输入寄存器地址范围：30001~39999</p><p>保持寄存器地址范围：40001~49999</p><p>有了该地址模型，我们就可以从Modbus寄存器的地址判断要访问的区块的类型。</p><h3 id="MODBUS-RTU"><a href="#MODBUS-RTU" class="headerlink" title="MODBUS (RTU)"></a>MODBUS (RTU)</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">        组态硬件：</span><span class="token code keyword">                 使用硬件CM1241进行组态以半双工RS485/232的方式进行通讯</span><span class="token code keyword">         组态模块：</span><span class="token code keyword">                 通信-->通信处理器-->MODBUS(RTU)</span><span class="token code keyword">                 Modbus_Comm_Load：组态Modbus 的端口</span><span class="token code keyword">                         REQ："AlwaysTRUE"</span><span class="token code keyword">                         BAUD：默认 ，数据传输速率</span><span class="token code keyword">                         PARITY：默认，奇偶检验</span><span class="token code keyword">                         FLOW_CTRL：默认，流控制</span><span class="token code keyword">                         RTS_ON_DLY：50，接通延迟</span><span class="token code keyword">                         RTS_OFF_DLY：50，关断延迟</span><span class="token code keyword">                         RESP_TO：默认，响应超时时间</span><span class="token code keyword">                         MB_DB：Modbus_Master.DB 对 Modbus_Master 或 Modbus_Slave 指令的背景数据块的引用    </span><span class="token code keyword">                 Modbus_Master：作为主站通讯，写入通讯</span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 REQ：常闭的写入DONE，写入BUSY，读取DONE，读取BUSY串联，并联常开的写入ERROR+5HZ时钟,并联常开的读取ERROR+5HZ时钟作为使能条件</span><span class="token code keyword">                                 MB_ADDR：一般为1，Modbus RTU 站地址 </span><span class="token code keyword">                                 MODE：1，读取</span><span class="token code keyword">                                 DATA_ADDR：从站中的起始地址，要根据实际设备的写入起始地址决定</span><span class="token code keyword">                                 DATA_LEN：要根据实际设备的写入地址长度决定</span><span class="token code keyword">                                 COM_RST：进行Modbus RTU 的重置</span><span class="token code keyword">                                 DATA_PTR：写入数据块，根据实际设备参数决定</span><span class="token code keyword">                 Modbus_Master：作为主站通讯， 读取通讯</span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 REQ：写入DONE作为使能条件，写入操作完成之后才能开始读取</span><span class="token code keyword">                                 MB_ADDR：一般为1，Modbus RTU 站地址 </span><span class="token code keyword">                                 MODE：0，读取</span><span class="token code keyword">                                 DATA_ADDR：从站中的起始地址，要根据实际设备的读取起始地址决定</span><span class="token code keyword">                                 DATA_LEN：要根据实际设备的读取地址长度决定</span><span class="token code keyword">                                 COM_RST：进行Modbus RTU 的重置</span><span class="token code keyword">                                 DATA_PTR：读取数据块，根据实际设备参数决定</span><span class="token code keyword">         案例：变位机伺服控制</span></code></pre><h3 id="工艺-轴控制"><a href="#工艺-轴控制" class="headerlink" title="工艺-轴控制"></a>工艺-轴控制</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">        组态软件：轴工艺对象</span><span class="token code keyword">         组态模块：</span><span class="token code keyword">                 MC_POWER :轴启动和停止</span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 Axis：轴对象</span><span class="token code keyword">                                 Enable：常开使能开关</span><span class="token code keyword">                                 StartMode：1，轴位置控制</span><span class="token code keyword">                                 StopMode：0，停止模式</span><span class="token code keyword">                 MC_RESET: 进行出错重置</span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 Axis：轴对象</span><span class="token code keyword">                                 Execute：常开使能开关</span><span class="token code keyword">                 MC_HOME: 回原点</span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 Axis：轴对象</span><span class="token code keyword">                                 Execute：常开使能开关</span><span class="token code keyword">                                 Position：默认是0，回原点之后轴的相对位置</span><span class="token code keyword">                                 Mode：3,回原点的模式</span><span class="token code keyword">                 MC_MoveAbsolute:绝对位移</span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 Axis：轴对象</span><span class="token code keyword">                                 Execute：常开使能开关</span><span class="token code keyword">                                 Position：绝对目标位置，-1.0E12 ≤ Position ≤ 1.0E12</span><span class="token code keyword">                                 Velocity：轴的速度，启动/停止速度 ≤ Velocity ≤ 最大速度</span><span class="token code keyword">                                 Direction：默认是1，轴的运动方向，1是正方向，2是负方向，3是最短距离</span><span class="token code keyword">                 MC_MoveRelative:相对位移</span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 Axis：轴对象</span><span class="token code keyword">                                 Execute：常开使能开关</span><span class="token code keyword">                                 Distance：定位操作的移动距离</span><span class="token code keyword">                                 Velocity：轴的速度，启动/停止速度 ≤ Velocity ≤ 最大速度</span><span class="token code keyword">                 MC_MoveJog:点动</span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 Axis：轴对象</span><span class="token code keyword">                                 JogForward：常开使能开关，点动正向移动</span><span class="token code keyword">                                 JogBackward：常开使能开关，点动反向移动</span><span class="token code keyword">                                 Velocity：点动预设速度，启动/停止速度 ≤ 速度 ≤ 最大速度</span><span class="token code keyword">                                 PositionControlled：默认true</span><span class="token code keyword">                 MC_ReadParam:读取轴对象参数比如：实时位置             </span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 Enable："AlwaysTRUE"</span><span class="token code keyword">                                 Parameter："轴_1".ActualPosition，获取轴的数据</span><span class="token code keyword">                                 Value：DB中定义的实际位置变量，指向写入所读取值的目标变量或目标地址的 VARIANT 指针</span><span class="token code keyword">         案例：旋转供料模块控制</span></code></pre><h3 id="硬件伺服控制"><a href="#硬件伺服控制" class="headerlink" title="硬件伺服控制"></a>硬件伺服控制</h3><pre class=" language-markdown"><code class="language-markdown"><span class="token code keyword">        组态硬件：</span><span class="token code keyword">             IS620F-RT伺服</span><span class="token code keyword">                 +驱动+111报文</span><span class="token code keyword">         组态模块：</span><span class="token code keyword">                 SinaPos:报文111位置控制轴指令</span><span class="token code keyword">                         触发条件：</span><span class="token code keyword">                                 ModePos：运动方式</span><span class="token code keyword">                                 EnableAxis：常开使能开关</span><span class="token code keyword">                                 CancelTraversing：默认，是否拒绝激活状态的运行作业</span><span class="token code keyword">                                 IntermediateStop：默认，激活状态的运行指令中断</span><span class="token code keyword">                                 Positive：默认，正方向</span><span class="token code keyword">                                 Negative：默认，正方向</span><span class="token code keyword">                                 Jog1：Jog 信号源1，正转</span><span class="token code keyword">                                 Jog2：Jog 信号源2，反转</span><span class="token code keyword">                                 FlyRef：默认，取消主动回原点参考</span><span class="token code keyword">                                 AckError：常开开关，故障应答/故障清除</span><span class="token code keyword">                                 ExecuteMode：常开开关，激活运行作业/接收设定值/激活回参考点功能</span><span class="token code keyword">                                 Position：具体模式执行的位置</span><span class="token code keyword">                                 Velocity：具体模式执行的速度</span><span class="token code keyword">                                 OverV：默认</span><span class="token code keyword">                                 OverAcc：默认</span><span class="token code keyword">                                 OverDec：默认</span><span class="token code keyword">                                 ConfigEPos：一般为16#07</span><span class="token code keyword">                                 HWIDSTW：伺服驱动对象报文</span><span class="token code keyword">                                 HWIDZSW：伺服驱动对象报文</span><span class="token code keyword">                         响应重要参数：</span><span class="token code keyword">                                 AxisPosOk：使能是否成功状态</span><span class="token code keyword">                                 ActVelocity：当前速度</span><span class="token code keyword">                                 ActPosition：当前位置</span><span class="token code keyword">                                 ActMode：当前处于激活状态的运行模式</span><span class="token code keyword">                                 Error：是否存在故障</span><span class="token code keyword">                                 Status：故障错误码</span></code></pre><h3 id="RS422"><a href="#RS422" class="headerlink" title="RS422"></a>RS422</h3><p>422全双工 读写可以同时进行<br>        全双工（Full Duplex）通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合。全双工指可以同时（瞬时）进行信号的双向传输（A→B且B→A）。指A→B的同时B→A，是瞬时同步的。</p><h3 id="RS485"><a href="#RS485" class="headerlink" title="RS485"></a>RS485</h3><p>通信模式</p><p>485半双工  只读或者只写，通信线路上的数据只能单向传输<br>半双工（Half Duplex）数据传输指数据可以在一个信号载体的两个方向上传输，但是不能同时传输。            RS485是串行数据传输的标准，主要用于多点通信，使用差分信号进行数据传输，也就是通过两根通信线之间的电压差表示传递的信号，一般采用主从的通讯模式，主站发送数据，从站接收数据，上传数据</p><p>电气特性</p><pre class=" language-markdown"><code class="language-markdown">逻辑电平：逻辑1表示电压在+2~+6v之间，逻辑0表示电压在-2~-6v之间</code></pre><p>网络拓扑和节点数量</p><p>RS485总线，一条总线将各个节点串联起来，一般情况下可以接32个节点</p><h3 id="不同的设备使用了不同的通讯协议，这两者怎么进行通讯？"><a href="#不同的设备使用了不同的通讯协议，这两者怎么进行通讯？" class="headerlink" title="不同的设备使用了不同的通讯协议，这两者怎么进行通讯？"></a>不同的设备使用了不同的通讯协议，这两者怎么进行通讯？</h3><p>1.使用网关或者协议转换器</p><p> 网口 <strong>MODBUS TCP</strong> 转  串口<strong>MODBUS (RTU)</strong>    使用 <strong>串口服务器</strong></p><p><strong>Profinet</strong>转<strong>MODBUS (RTU)</strong>  协议需要使用  <strong>Profinet 转 MODBUS (RTU) 网关</strong></p><p><strong>MODBUS (RTU)</strong> 转<strong>EtherCAT</strong> 需要使用<strong>RS485转EtherCAT网关</strong></p><p>2.将有线的转为无线的网关</p><p>串口转Lora</p><p>串口转RF(无线射频)</p><p>串口转MQTT（MQTT可以连接到云平台，云平台可以连接不同类型的设备，方便远程监控和管理）</p><h2 id="自定义程序块"><a href="#自定义程序块" class="headerlink" title="自定义程序块"></a>自定义程序块</h2><h3 id="西门子plc中input-和output还有inout有什么功能怎么使用？"><a href="#西门子plc中input-和output还有inout有什么功能怎么使用？" class="headerlink" title="西门子plc中input 和output还有inout有什么功能怎么使用？"></a>西门子plc中input 和output还有inout有什么功能怎么使用？</h3><p><strong>Input</strong>：只读，PLC读取外部信号。</p><p><strong>Output</strong>：只写，PLC向外部设备发送控制信号。</p><p><strong>InOut</strong>：读写，既可以传入数据，也可以输出数据，适用于需要传递并修改数据的函数块或程序模块。</p><h2 id="编程优化"><a href="#编程优化" class="headerlink" title="编程优化"></a>编程优化</h2><pre class=" language-markdown"><code class="language-markdown">使用FB数据块的#I  <span class="token code keyword">    优点</span><span class="token code keyword">        程序清晰</span><span class="token code keyword">        调用方便</span><span class="token code keyword">    出现数据长度不一致，看代码中的#I 使用是否正确</span>使用流程步<span class="token code keyword">    优点：</span><span class="token code keyword">        验证效率高</span><span class="token code keyword">        结构清晰</span><span class="token code keyword">    缺点：</span><span class="token code keyword">        测试程序复位比较麻烦</span><span class="token code keyword">        流程步设置成0会影响其他流程</span>设置程序号<span class="token code keyword">    通过程序号可以控制plc的程序分步执行</span></code></pre><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>工业互联网：<a href="https://blog.csdn.net/weixin_45586124/article/details/136580828">https://blog.csdn.net/weixin_45586124/article/details/136580828</a></p><p><a href="https://blog.csdn.net/qq_37424623">驽马同学</a>：<a href="https://blog.csdn.net/qq_37424623/article/details/116642032">https://blog.csdn.net/qq_37424623/article/details/116642032</a></p><p>B站匹尔西：<a href="https://space.bilibili.com/381962124">https://space.bilibili.com/381962124</a></p>]]></content>
      
      
      <categories>
          
          <category> 西门子PLC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 西门子PLC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工业机器人基础</title>
      <link href="/posts/870a1cf5.html"/>
      <url>/posts/870a1cf5.html</url>
      
        <content type="html"><![CDATA[<p>工业机器人基础</p><span id="more"></span><hr><h2 id="工业机器人定义"><a href="#工业机器人定义" class="headerlink" title="工业机器人定义"></a>工业机器人定义</h2><p>国际标准化组织(ISO)的定义为:“工业机器人是一种能自动控制，可重复编程，多功能，多自由度的操作机，能够搬运材料、工件或者操持工具来完成各种作业。</p><h2 id="工业机器人特点"><a href="#工业机器人特点" class="headerlink" title="工业机器人特点"></a>工业机器人特点</h2><p>拟人化<br>在机械结构上类似于人的手臂或者其他组织结构</p><p>通用性<br>可执行不同的作业任务，动作程序可按需求改变</p><p>智能性<br>具有不同程度的智能性，如感知系统等提高了工业机器人对周围环境<br>的自适应能力</p><p>独立性<br>工作中可以不依赖于人的干预</p><h2 id="机器人简介"><a href="#机器人简介" class="headerlink" title="机器人简介"></a>机器人简介</h2><h3 id="设备模块构成："><a href="#设备模块构成：" class="headerlink" title="设备模块构成："></a>设备模块构成：</h3><pre class=" language-markdown"><code class="language-markdown">暂存快换立体仓库<span class="token code keyword">    以太网io通讯模块</span><span class="token code keyword">    使用Modbus-tcp 通讯协议进行通讯</span>上料传输带视觉模块变位机装配RFID<span class="token code keyword">    作用：产品追溯</span>旋转供料</code></pre><h3 id="机器人的三大构造"><a href="#机器人的三大构造" class="headerlink" title="机器人的三大构造"></a>机器人的三大构造</h3><pre class=" language-markdown"><code class="language-markdown">本体 控制柜 <span class="token code keyword">    控制按钮</span><span class="token code keyword">        模式切换钥匙开关</span><span class="token code keyword">        使能开关</span><span class="token code keyword">        急停开关</span><span class="token code keyword">        撞击重置开关（一般不按，设备会有防误触盖板）        </span>示教器</code></pre><h3 id="工业机器人原型"><a href="#工业机器人原型" class="headerlink" title="工业机器人原型"></a>工业机器人原型</h3><p>数控机+计算机</p><h3 id="运动的三种方式"><a href="#运动的三种方式" class="headerlink" title="运动的三种方式"></a>运动的三种方式</h3><p>关节运动  电机的正反转   控制机械臂<br>线性运动 tcp通讯中心点   右手法则<br>重定位  调整姿态</p><p>注：一个点位对机器人来说叫位姿</p><h3 id="机器人定点"><a href="#机器人定点" class="headerlink" title="机器人定点"></a>机器人定点</h3><p>机器人定位准确的前提是机器人抓取的产品的位置和放产品的位置，相对于机器人夹爪来说夹住是同一位置，<br>取和放的点夹住的位置不一样，机器人的误差就会变大</p><h2 id="就业方向"><a href="#就业方向" class="headerlink" title="就业方向"></a>就业方向</h2><h3 id="机器人调试"><a href="#机器人调试" class="headerlink" title="机器人调试"></a>机器人调试</h3><p>品牌：</p><p>abb等四大家族</p><p>fanuc</p><p>abb 设计符合人体工学   仿真软件易用性更好</p><h3 id="视觉工程师"><a href="#视觉工程师" class="headerlink" title="视觉工程师"></a>视觉工程师</h3><p>品牌：</p><p>康耐士</p><p>hoken</p>]]></content>
      
      
      <categories>
          
          <category> 机器人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gpt</title>
      <link href="/posts/ca8ec864.html"/>
      <url>/posts/ca8ec864.html</url>
      
        <content type="html"><![CDATA[<p>gpt</p><span id="more"></span><hr><h2 id="chatgpt注册方法"><a href="#chatgpt注册方法" class="headerlink" title="chatgpt注册方法"></a>chatgpt注册方法</h2><p>1.<a href="https://sockboom.tv/auth/login%E7%BF%BB%E5%A2%99%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E8%B4%AD%E4%B9%B0">https://sockboom.tv/auth/login</a> 翻墙软件下载购买</p><p>2.sms-activate.org/cn 购买虚拟手机号，注册谷歌邮箱</p><p>3.打开gpt官网 <a href="https://chat.openai.com/%EF%BC%8C%E7%94%A8%E8%B0%B7%E6%AD%8C%E9%82%AE%E7%AE%B1%E6%B3%A8%E5%86%8C%E5%8D%B3%E5%8F%AF%E4%BD%BF%E7%94%A8">https://chat.openai.com/，用谷歌邮箱注册即可使用</a></p><p>4.可参考教程<a href="https://www.bilibili.com/video/BV1q8411u7KL/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ea4bcd3384d957a3a43ffa2dc96d7564">https://www.bilibili.com/video/BV1q8411u7KL/?spm_id_from=333.337.search-card.all.click&amp;vd_source=ea4bcd3384d957a3a43ffa2dc96d7564</a></p>]]></content>
      
      
      <categories>
          
          <category> gpt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gpt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电气基本原理</title>
      <link href="/posts/6ed155d3.html"/>
      <url>/posts/6ed155d3.html</url>
      
        <content type="html"><![CDATA[<p>电气基本原理</p><span id="more"></span><hr><h2 id="常见的电气品牌"><a href="#常见的电气品牌" class="headerlink" title="常见的电气品牌"></a>常见的电气品牌</h2><p>schneider  施耐德</p><p>omron 欧姆龙</p><p>Beckhoff 倍福</p><p>Chint 正泰</p><p>INOVANCE 汇川</p><p>SIEMENS 西门子</p><p>三菱</p><p>Delta 台达</p><h2 id="常用电气符号认识"><a href="#常用电气符号认识" class="headerlink" title="常用电气符号认识"></a>常用电气符号认识</h2><p>N 表示零线（将多余的电导入地面，零线不能接保险丝）</p><p>L 表示火线</p><p>交流 AC  </p><p>直流 DC </p><p>灯泡 HL</p><p>二极管  单向通电 下面这种二极管是电流只能是从左到右</p><p>电气图形： <img src="/posts/6ed155d3/%E4%BA%8C%E6%9E%81%E7%AE%A1.png" alt="img"></p><p>交流接触器：电工符号：KM</p><h2 id="端子"><a href="#端子" class="headerlink" title="端子"></a>端子</h2><h3 id="冷压端子"><a href="#冷压端子" class="headerlink" title="冷压端子"></a>冷压端子</h3><p>冷压端子是一种通过冷压（即不加热）将电线与金属端子连接的连接器件。其主要特点是通过机械压力将导线的铜芯或其他导体固定在端子内部，达到紧密连接的效果。</p><p><img src="/posts/6ed155d3/%E5%86%B7%E5%8E%8B%E7%AB%AF%E5%AD%90.png" alt="img"></p><h4 id="冷压端子的特点："><a href="#冷压端子的特点：" class="headerlink" title="冷压端子的特点："></a>冷压端子的特点：</h4><ul><li><strong>简单可靠</strong>：冷压端子通过压接工具进行压接操作，不需要焊接或加热，连接稳固可靠。</li><li><strong>适应性强</strong>：适用于各种不同的电线规格，常见的如裸线、PVC绝缘线等。</li><li><strong>抗振动性好</strong>：由于是通过压接而非焊接连接，因此在振动环境中也能保持较好的稳定性。</li><li><strong>耐用性高</strong>：冷压端子通常采用铜、镍或镀锡铜等材料，具有较好的导电性和耐腐蚀性。</li></ul><p><strong>不同类型的冷压端子能承受的电流大小</strong></p><table><thead><tr><th>冷压端子类型</th><th>小型（0.5mm² 到 1mm²）</th><th>中型（1.5mm² 到 2.5mm²）</th><th>大型（4mm² 到 6mm²）</th><th>特大型（10mm² 以上）</th></tr></thead><tbody><tr><td><strong>圆形冷压端子</strong></td><td><strong>6A 到 10A</strong></td><td><strong>15A 到 20A</strong></td><td><strong>25A 到 30A</strong></td><td><strong>40A 以上</strong></td></tr><tr><td><strong>插片冷压端子</strong></td><td>6A 到 10A</td><td>10A 到 20A</td><td>20A 到 30A</td><td>40A 以上</td></tr><tr><td><strong>插接冷压端子</strong></td><td>6A 到 10A</td><td>10A 到 20A</td><td>20A 到 30A</td><td>40A 到 50A</td></tr><tr><td><strong>母头冷压端子</strong></td><td>6A 到 10A</td><td>10A 到 20A</td><td>20A 到 30A</td><td>40A 以上</td></tr><tr><td><strong>公头冷压端子</strong></td><td>6A 到 10A</td><td>10A 到 20A</td><td>20A 到 30A</td><td>40A 以上</td></tr><tr><td><strong>T型冷压端子</strong></td><td>6A 到 10A</td><td>10A 到 20A</td><td>20A 到 30A</td><td></td></tr><tr><td><strong>带绝缘外壳冷压端子</strong></td><td><strong>6A 到 10A</strong></td><td><strong>10A 到 20A</strong></td><td><strong>20A 到 30A</strong></td><td><strong>40A 到 50A</strong></td></tr><tr><td><strong>封闭式冷压端子</strong></td><td><strong>6A 到 10A</strong></td><td>10A 到 20A</td><td>20A 到 30A</td><td>40A 到 50A</td></tr></tbody></table><h3 id="压线帽"><a href="#压线帽" class="headerlink" title="压线帽"></a>压线帽</h3><p>压线帽是一种用于连接两根或多根电线的连接器。它通过螺旋形的设计，简单地将多根导线扭在一起，确保电气连接安全稳定。</p><p><img src="/posts/6ed155d3/%E5%8E%8B%E7%BA%BF%E5%B8%BD.png" alt="img"></p><h4 id="压线帽的特点："><a href="#压线帽的特点：" class="headerlink" title="压线帽的特点："></a>压线帽的特点：</h4><ul><li><strong>安装简单</strong>：无需工具，只需将电线插入压线帽内并旋紧即可完成连接。</li><li><strong>适用于多线连接</strong>：压线帽常用于多根电线连接，尤其在住宅电气安装中非常普遍。</li><li><strong>绝缘性强</strong>：压线帽通常有良好的绝缘性能，可以防止电线接触引起短路或触电。</li><li><strong>维护简便</strong>：如果需要更换或修理，只需拆下压线帽，重新连接电线即可。</li></ul><h2 id="电气元件"><a href="#电气元件" class="headerlink" title="电气元件"></a>电气元件</h2><h3 id="开关类元器件"><a href="#开关类元器件" class="headerlink" title="开关类元器件"></a>开关类元器件</h3><h4 id="刀开关"><a href="#刀开关" class="headerlink" title="刀开关"></a>刀开关</h4><p>熔断器式刀开关</p><p>也叫隔离开关、应急开关、隔离开关</p><p>符号QS 三组常开 启动开关</p><p>电气图形：<img src="/posts/6ed155d3/%E5%88%80%E5%BC%80%E5%85%B3.png" alt="img"></p><p>作用：接通和分断</p><p>注意：刀开关只能竖着放，其他方式容易发生危险</p><h4 id="低压熔断器-空开（空气开关，空气断路器）"><a href="#低压熔断器-空开（空气开关，空气断路器）" class="headerlink" title="低压熔断器 空开（空气开关，空气断路器）"></a>低压熔断器 空开（空气开关，空气断路器）</h4><p>主要作用：接通和分断电源  还能在短路、严重过负载、欠压的情况下保护电路</p><p>分为 c型（家用型）和d型 （电机保护型）</p><p>电气符号：QF    </p><p>有的空开还有漏电保护器，一般情况下作为设备的不频繁转换启动</p><p>有2p（NL）和3p（LLL）两种类型</p><p>电气图形：<img src="/posts/6ed155d3/%E7%A9%BA%E6%B0%94%E5%BC%80%E5%85%B3.png" alt="img"></p><h4 id="熔断器"><a href="#熔断器" class="headerlink" title="熔断器"></a>熔断器</h4><p>串接在电路中，主要起短路保护的作用</p><p>选型：小于等于空开的额定电流</p><p>电气符号：FU</p><p>电气图形：<img src="/posts/6ed155d3/%E7%86%94%E6%96%AD%E5%99%A8.png" alt="img"></p><h4 id="开关电源"><a href="#开关电源" class="headerlink" title="开关电源"></a>开关电源</h4><p>作用：交流转直流</p><p>有12v、24v、36v</p><p>电压可以在小范围内调节</p><p>电气符号：UR</p><p>内有电容：在直接通过空气开关断电的情况下，灯泡不会立刻熄灭，就是因为电容内还留有部分电流</p><p>开关电源  </p><p>EDR-120-12 表示 EDR系列 输出功率为 120W、输出电压为 12V </p><p>NDR-240-24 表示NDR系列 输出功率为 240W、输出电压为 24V </p><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p>电气图形：<img src="/posts/6ed155d3/%E6%8C%89%E9%92%AE.jpg" alt="img"></p><p>电气符号：SB</p><h4 id="接近开关"><a href="#接近开关" class="headerlink" title="接近开关"></a>接近开关</h4><p>接线：两线制的接近开关，蓝线接N24V，棕线接I点</p><h3 id="线圈类元器件"><a href="#线圈类元器件" class="headerlink" title="线圈类元器件"></a>线圈类元器件</h3><h4 id="中间继电器"><a href="#中间继电器" class="headerlink" title="中间继电器"></a>中间继电器</h4><p>符号：</p><p>作用：传递信号同时控制多个电路，小电流控制大电流，小电压控制大电压，直接控制小容量电机和电气执行元件</p><p>电气图形：<img src="/posts/6ed155d3/%E4%B8%AD%E9%97%B4%E7%BB%A7%E7%94%B5%E5%99%A8.png" alt="img"></p><p>线圈先得电，常开才能闭合，常闭才能断开</p><p>小电流控制大电流就是通过常开触电吸合让接触器a1和a2得电，通过这种方式来实现</p><h5 id="继电器隔离"><a href="#继电器隔离" class="headerlink" title="继电器隔离"></a>继电器隔离</h5><p>继电器隔离就是plc的输出端例如Q0.0接24v继电器，继电器常开触点上端接220v正，下端接接触器A1,A2接220v负通过这种方式来控制接触器，即使控制电路有问题，烧坏了继电器，也可以保证plc是安全的</p><h4 id="时间继电器"><a href="#时间继电器" class="headerlink" title="时间继电器"></a>时间继电器</h4><p>符号：KT</p><p>作用：延时断电，延时得电</p><p>延时得电的状态是：电存在电容内，有电压，无电流</p><p>例如：空调，微波炉</p><p>电气图形：<img src="/posts/6ed155d3/%E6%97%B6%E9%97%B4%E7%BB%A7%E7%94%B5%E5%99%A8.png" alt="img"></p><h4 id="热继电器"><a href="#热继电器" class="headerlink" title="热继电器"></a>热继电器</h4><p>电气图形：<img src="/posts/6ed155d3/%E7%83%AD%E7%BB%A7%E7%94%B5%E5%99%A8.png" alt="img"></p><p>电气符号：FR(国内)/KH(国际)</p><p>作用：电动机的过载保护、断相及电流不平衡运行的保护及其他电气设备发热状态的控制</p><h4 id="功率继电器"><a href="#功率继电器" class="headerlink" title="功率继电器"></a>功率继电器</h4><h3 id="电磁阀"><a href="#电磁阀" class="headerlink" title="电磁阀"></a>电磁阀</h3><p>两线制的电磁阀，红线接P24V，黑线接Q点</p><h3 id="传感器"><a href="#传感器" class="headerlink" title="传感器"></a>传感器</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><h5 id="按照信号特点分类"><a href="#按照信号特点分类" class="headerlink" title="按照信号特点分类"></a>按照信号特点分类</h5><table><thead><tr><th align="center">类型</th><th align="center">数字信号</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">开关量</td><td align="center">二进制信号</td><td align="center">它只有两种状态，即0和1，在数字电路中使用，例如晶体管开关等</td></tr><tr><td align="center">数字量</td><td align="center">离散信号</td><td align="center">它可以取多个离散值，通常由数字量传感器提供，例如温度计湿度计、压力传感器等。</td></tr><tr><td align="center">模拟量</td><td align="center">连续信号</td><td align="center">它可以取连续的数值，例如电压、电流、温度等，通常由模拟量传感器提供。</td></tr><tr><td align="center">离散量</td><td align="center">离散信号</td><td align="center">它与数字量类似，但通常是指一组离散的状态，例如开/关、启/停、上/下、左/右等。</td></tr><tr><td align="center">脉冲量</td><td align="center">方波信号</td><td align="center">它通常用于测量速度、频率和角度，例如编码器、霍尔传感器</td></tr></tbody></table><ul><li>开关量（Switching Quantity）</li></ul><p>开关量是一种只有两种状态的数据类型，通常表示设备的开或关、高或低等状态。这种数据类型通常用于表示设备的状态，例如一个开关是否被按下，或者一个灯是否亮着。开关量的优点在于其简单、可靠，并且容易进行信号处理。例如，你可以通过逻辑运算（AND、OR、NOT等）来处理开关量的数据。例子：一个房间里有多个灯，每个灯都可以通过一个开关控制。开关量的数据类型可以用来表示每个灯的状态，例如灯是否亮着。</p><ul><li>数字量（Digital Quantity）</li></ul><p>数字量是一种离散的数据类型，可以表示整数或实数。数字量的取值范围是有限的，并且每个值都对应一个二进制代码。数字量的精度取决于其编码方式和位数。数字量的优点在于其精度高、抗干扰能力强，并且可以进行复杂的运算和处理。例子：一个数字温度计可以测量温度并将温度值以数字量的形式显示出来。数字量的数据类型可以用来表示这个温度值，例如30摄氏度。</p><ul><li>模拟量（Analog Quantity）</li></ul><p>模拟量是一种连续的数据类型，可以表示任何实数。模拟量的取值范围是无限的，并且每个值都对应一个电压或电流信号。模拟量的优点在于其能够表示真实世界的连续变化，但在数字处理方面比较困难。例子：一个模拟水位传感器可以检测水位并将水位值以模拟量的形式输出。模拟量的数据类型可以用来表示这个水位值，例如1.5米。</p><ul><li>离散量（Discrete quantity）</li></ul><p>在物联网（Internet of Things, IoT）中是指一种在时间或空间上离散取值的数据。离散量通常用于表示只有特定几个取值状态的现象或事物，如开关状态、分类数据等。与连续量（如温度、湿度等模拟量）不同，离散量是分散的、不连续的。例子：工业自动化：在工业自动化领域，机器的状态（如运行状态、故障状态等）通常用离散量表示。例如，一台机器的运行状态可以用离散量表示，取值可以为“运行中”、“停机”、“故障”等。智能家居系统：在智能家居系统中，各种设备（如灯光、空调、电视等）的状态通常用离散量表示。例如，灯光的开关状态可以用离散量表示，取值可以为“开”或“关”。</p><ul><li>脉冲量（Pulse Quantity）</li></ul><p>脉冲量是一种特殊的数据类型，它通常用于表示一段时间内的脉冲数量或时间间隔。这种数据类型可以用于测量频率、周期、时间间隔等。与开关量类似，脉冲量的取值范围也是有限的，通常是一个整数。脉冲量的优点在于其能够表示一段时间内的变化，并且可以进行高精度的测量。例子：一个速度传感器可以检测车速并将车速值以脉冲量的形式输出。脉冲量的数据类型可以用来表示这个车速值，例如每分钟60转。</p><h5 id="按照命名分类"><a href="#按照命名分类" class="headerlink" title="按照命名分类"></a>按照命名分类</h5><p>​    以用途命名</p><p>​    以原理命名</p><h4 id="传感器类型和接线方式"><a href="#传感器类型和接线方式" class="headerlink" title="传感器类型和接线方式"></a>传感器类型和接线方式</h4><p>一般由传感器控制中间继电器再控制用电设备</p><h5 id="传感器线制类型："><a href="#传感器线制类型：" class="headerlink" title="传感器线制类型："></a>传感器线制类型：</h5><p>一般是三线制：</p><p>​    棕：连接开关电源正极 </p><p>​    蓝：连接开关电源负极</p><p>​    黑：是传感器的信号线</p><p>​    也有四线的传感器为了区分常开和常闭</p><p>​    四线会多一根白色信号线，一般为常闭，黑色线为常开</p><p>也会有两线制传感器，和三线制传感器的区别是</p><p>1.工作方式不同：两线制传感器相当于开关，没有NPN和PNP之分，三线制相当于有NPN和PNP。</p><p>2.接线方式不同：两线制传感器为两根线，一根接正极，一根接输出信号。三线制传感器两根接电源线（一般是棕正蓝负），另外一根接输出信号（黑色线常开或者白色线常闭）</p><p>注意：两线制传感器比三线制压降大得多，因此使用是要注意负载的最小电压是多少，两线制必须要经过负载才能使用，比如PLC的IO模块，继电器线圈等。不然直接接24V电源两端就会烧掉。</p><h5 id="高低电平传感器接线方式："><a href="#高低电平传感器接线方式：" class="headerlink" title="高低电平传感器接线方式："></a>高低电平传感器接线方式：</h5><p>传感器都是开关信号，通过触发传感器的信号可以判断传感器位点的高低电平</p><p><strong>传感器接在plc上的情况</strong></p><p>plc对应点位灯亮的话就是高电平</p><p>plc对应点位灯不亮就是低电平</p><p><strong>NPN型传感器</strong>：输出低电平，低电平有效</p><p>电路连接方式；<img src="/posts/6ed155d3/NPN%E5%9E%8B%E4%BC%A0%E6%84%9F%E5%99%A8%E7%94%B5%E8%B7%AF%E8%BF%9E%E6%8E%A5.png" alt="img"></p><p><strong>PNP型传感器</strong>：输出高电平，高电平有效</p><p>电路连接方式；<img src="/posts/6ed155d3/PNP%E5%9E%8B%E4%BC%A0%E6%84%9F%E5%99%A8%E7%94%B5%E8%B7%AF%E8%BF%9E%E6%8E%A5%E6%96%B9%E5%BC%8F.png" alt="img"></p><h3 id="变频器："><a href="#变频器：" class="headerlink" title="变频器："></a>变频器：</h3><h4 id="工作原理："><a href="#工作原理：" class="headerlink" title="工作原理："></a>工作原理：</h4><p>变频器的工作原理是基于交流电动机的转速与供电频率之间的关系。当供电频率不变时，电动机的转速也保持不变；而当供电频率增加时，电动机的转速会相应降低。这是因为电动机的<a href="https://www.eeworld.com.cn/zhuanti/HO0qP4">电磁转矩</a>与供电频率成正比，电动机的最大功率是不会变的，功率=转矩✘转速，转矩大，转速就会变小 即：</p><p>T = Kf × f</p><p>其中，T为电磁转矩；Kf为比例常数；f为供电频率。</p><p>为了使电动机在不同转速下都能获得最佳效率，需要通过变频器对供电频率进行调整。变频器通过内部电路对供电频率进行精确控制，从而实现对电动机转速的精确调节。同时，变频器还可以实现对电动机输出功率的调节</p><h4 id="符号："><a href="#符号：" class="headerlink" title="符号："></a>符号：</h4><p>电气符号：U</p><p>1、输入和输出的相关符号</p><table><thead><tr><th>符号</th><th>名称</th></tr></thead><tbody><tr><td>Vin</td><td>输入电压</td></tr><tr><td>Vout</td><td>输出电压</td></tr><tr><td>VLL</td><td>线电压</td></tr><tr><td>VLN</td><td>相电压</td></tr><tr><td>Iin</td><td>输入电流</td></tr><tr><td>Iout</td><td>输出电流</td></tr><tr><td>Io</td><td>无功电流</td></tr><tr><td>fin</td><td>输入频率</td></tr><tr><td>fout</td><td>输出频率</td></tr></tbody></table><p>2、显示与指示符号</p><table><thead><tr><th>符号</th><th>名称</th></tr></thead><tbody><tr><td>RUN</td><td>运行指示灯</td></tr><tr><td>STOP</td><td>停止指示灯</td></tr><tr><td>ALM</td><td>报警指示灯</td></tr><tr><td>FLT</td><td>故障指示灯</td></tr></tbody></table><h4 id="台达变频器"><a href="#台达变频器" class="headerlink" title="台达变频器"></a>台达变频器</h4><h5 id="接线图片："><a href="#接线图片：" class="headerlink" title="接线图片："></a>接线图片：</h5><p><img src="/posts/6ed155d3/%E5%8F%98%E9%A2%91%E5%99%A8%E6%8E%A5%E7%BA%BF%E5%9B%BE1.jpg"></p><p><img src="/posts/6ed155d3/%E5%8F%98%E9%A2%91%E5%99%A8%E6%8E%A5%E7%BA%BF%E5%9B%BE2.jpg"></p><p><img src="/posts/6ed155d3/%E5%8F%98%E9%A2%91%E5%99%A8%E6%8E%A5%E7%BA%BF%E5%9B%BE3.jpg"></p><p><img src="/posts/6ed155d3/%E5%8F%98%E9%A2%91%E5%99%A8%E6%8E%A5%E7%BA%BF%E5%9B%BE4.jpg"></p><h5 id="铭牌说明"><a href="#铭牌说明" class="headerlink" title="铭牌说明:"></a>铭牌说明:</h5><p><img src="/posts/6ed155d3/%E9%93%AD%E7%89%8C%E8%AF%B4%E6%98%8E.png"></p><h5 id="型号说明："><a href="#型号说明：" class="headerlink" title="型号说明："></a>型号说明：</h5><p><img src="/posts/6ed155d3/%E5%9E%8B%E5%8F%B7%E8%AF%B4%E6%98%8E.png"></p><h5 id="序号说明："><a href="#序号说明：" class="headerlink" title="序号说明："></a>序号说明：</h5><p><img src="/posts/6ed155d3/%E5%BA%8F%E5%8F%B7%E8%AF%B4%E6%98%8E.png"></p><h5 id="框架："><a href="#框架：" class="headerlink" title="框架："></a>框架：</h5><p><img src="/posts/6ed155d3/%E6%A1%86.png"></p><h5 id="面版按钮说明："><a href="#面版按钮说明：" class="headerlink" title="面版按钮说明："></a>面版按钮说明：</h5><p><img src="/posts/6ed155d3/%E9%9D%A2%E6%9D%BF%E6%8C%89%E9%92%AE%E8%AF%B4%E6%98%8E.png"></p><p>1：状态显示区<br>分别可显示驱动器的运转状态运转、停止、寸动、正转、反转等</p><p>2：主显示区<br>可显示频率、电流、电压、转向、使用者定义单位、异常等</p><p>3：频率设定旋钮<br>可设定此旋钮作为主频率输入</p><p>4：数值变更键<br>设定值及参数变更使用</p><h5 id="参数设定操作方式："><a href="#参数设定操作方式：" class="headerlink" title="参数设定操作方式："></a>参数设定操作方式：</h5><p>选择自己要看的画面：</p><p><img src="/posts/6ed155d3/%E7%94%BB%E9%9D%A2%E9%80%89%E6%8B%A9.png"></p><p>参数设定/修改：</p><p><img src="/posts/6ed155d3/%E5%8F%82%E6%95%B0%E8%AE%BE%E5%AE%9A.png"></p><h5 id="配线："><a href="#配线：" class="headerlink" title="配线："></a>配线：</h5><p><strong>NPN模式：</strong></p><p><img src="/posts/6ed155d3/npn%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BA%BF.png"></p><p><strong>PNP模式：</strong></p><p><img src="/posts/6ed155d3/pnp%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BA%BF.png"></p><h5 id="plc电机正反转和变速怎么实现"><a href="#plc电机正反转和变速怎么实现" class="headerlink" title="plc电机正反转和变速怎么实现"></a>plc电机正反转和变速怎么实现</h5><p><img src="/posts/6ed155d3/%E6%AD%A3%E5%8F%8D%E8%BD%AC%E5%8F%98%E9%80%9F%E8%AE%BE%E7%BD%AE%E6%96%B9%E5%BC%8F.png"></p><p>确定正反转地址，通过plc上连接的正转触点的地址来控制变频器电机的正反转，全局频率通过F来调整，如果要实现变速就要加speed1，也是在plc上找到触点添加，具体的速度控制要通过设置参数5.00-&gt; 之后修改频率，就可以调整速度</p><h3 id="伺服驱动器："><a href="#伺服驱动器：" class="headerlink" title="伺服驱动器："></a>伺服驱动器：</h3><h4 id="报警："><a href="#报警：" class="headerlink" title="报警："></a>报警：</h4><p>​    汇川伺服驱动器报警E731.0怎么解除报警？</p><p>​    设置H0D-20=1可清除故障</p><h4 id="伺服驱动器回原点的方法："><a href="#伺服驱动器回原点的方法：" class="headerlink" title="伺服驱动器回原点的方法："></a>伺服驱动器回原点的方法：</h4><p>​    1.通过回原点指令</p><p>​    2.控制电机的话可以直接转动电机转盘</p><h4 id="伺服能记住位置的原因："><a href="#伺服能记住位置的原因：" class="headerlink" title="伺服能记住位置的原因："></a>伺服能记住位置的原因：</h4><p>编码器电池</p><h3 id="步进驱动器："><a href="#步进驱动器：" class="headerlink" title="步进驱动器："></a>步进驱动器：</h3><h4 id="基础信息介绍："><a href="#基础信息介绍：" class="headerlink" title="基础信息介绍："></a>基础信息介绍：</h4><p>步进电机型号</p><p><img src="/posts/6ed155d3/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E5%9E%8B%E5%8F%B7%E5%92%8C%E9%A2%9D%E5%AE%9A%E7%94%B5%E6%B5%81.jpg"></p><p>步进驱动器细分设置参考表：</p><p><img src="/posts/6ed155d3/%E6%AD%A5%E8%BF%9B%E9%A9%B1%E5%8A%A8%E5%99%A8%E7%BB%86%E5%88%86%E6%8B%A8%E7%89%87%E6%8E%A7%E5%88%B6%E5%8F%82%E8%80%83%E8%A1%A8.jpg"></p><p><strong>原理</strong>：通过plc发出脉冲控制步进电机驱动轴运动</p><p><strong>1.8度：</strong></p><p>当驱动器工作在不细分的整步状态时， 控制系统每发一个步进脉冲，电机转动1.8</p><p><strong>1.5A:</strong></p><p>步进电机的额定电流</p><p>无细分，PLC发出200脉冲电机转一圈； 10细分下,PLC 发出2000脉冲电机转一圈；</p><p>无细分：360°（1圈）=1.8°*200 （脉冲）</p><p>10细分：360° （1圈） =0.18°<em>2000（脉冲：10</em>200）</p><p><strong>细分的作用</strong>：步进电机细分数越高，电机运转越平稳；步进电机细分数越小，电机运转时振动越大。因为细分数高时，电流曲线光滑，所以电机输出力矩也就波动小连续、电机运行就 平稳；电机细分数小，电机电流脉动就大，其输出力矩脉动就大，因而造成电机较大的振动， 该振动并产生噪音乃至其它部件的谐振噪音。</p><p>建议在运动控制器输出的脉冲频率允许的情况下，尽可能将步进电机驱动器的细分数设大些， 以提高运动平台的运动平稳性。</p><p><strong>动态电流</strong>：一般根据电动机实际工作需要设定（一般参考电动机额定电流）。</p><p><strong>静态电流</strong>：一般选择半流：步进电机在脉冲停止以后，会有锁定力矩，一般电流越大，锁定力矩越大。</p><p>表11-1 DIP开关功能</p><table><thead><tr><th>开关序号</th><th>ON功能</th><th>OFF功能</th><th>特别说明</th></tr></thead><tbody><tr><td>DIP1-DIP4</td><td>细分设置用</td><td>细分设置用</td><td></td></tr><tr><td>DIP5</td><td>静态电流半流（水平负载）</td><td>静态电流全流（提升类负载）</td><td></td></tr><tr><td>DIP6-DIP8</td><td>输出电流设置用</td><td>输出电流设置用</td><td>根据负载</td></tr></tbody></table><p>表11-2 细分设置表 表11-3 驱动器输出电流设置</p><table><thead><tr><th></th><th>DIP1为ON</th><th>DIP1为OFF</th><th></th><th></th></tr></thead><tbody><tr><td>DIP2</td><td>DIP3</td><td>DIP4</td><td>细分</td><td>细分</td></tr><tr><td>ON</td><td>ON</td><td>ON</td><td>N/A</td><td>2</td></tr><tr><td>OFF</td><td>ON</td><td>ON</td><td>4</td><td>4</td></tr><tr><td>ON</td><td>OFF</td><td>ON</td><td>8</td><td>5</td></tr><tr><td>OFF</td><td>OFF</td><td>ON</td><td>16</td><td>10</td></tr><tr><td>ON</td><td>ON</td><td>OFF</td><td>32</td><td>25</td></tr><tr><td>OFF</td><td>ON</td><td>OFF</td><td>64</td><td>50</td></tr><tr><td>ON</td><td>OFF</td><td>OFF</td><td>128</td><td>100</td></tr><tr><td>OFF</td><td>OFF</td><td>OFF</td><td>256</td><td>200</td></tr></tbody></table><table><thead><tr><th>DIP6</th><th>DIP7</th><th>DIP8</th><th>输出电流</th></tr></thead><tbody><tr><td>ON</td><td>ON</td><td>ON</td><td>1.2A</td></tr><tr><td>ON</td><td>ON</td><td>OFF</td><td>1.5A</td></tr><tr><td>ON</td><td>OFF</td><td>ON</td><td>1.8A</td></tr><tr><td>ON</td><td>OFF</td><td>OFF</td><td>2.0A</td></tr><tr><td>OFF</td><td>ON</td><td>ON</td><td>2.5A</td></tr><tr><td>OFF</td><td>ON</td><td>OFF</td><td>2.8A</td></tr><tr><td>OFF</td><td>OFF</td><td>ON</td><td>3.0A</td></tr><tr><td>OFF</td><td>OFF</td><td>OFF</td><td>3.5A</td></tr></tbody></table><p>举例∶选择10细分，输出电流2.5A，静态半流。DIP1~~-DIP8的状态是</p><p>表11-4 10细分DIP设置</p><table><thead><tr><th>DIP1</th><th>DIP2</th><th>DIP3</th><th>DIP4</th><th>DIP5</th><th>DIP6</th><th>DIP7</th><th>DIP8</th></tr></thead><tbody><tr><td>OFF</td><td>OFF</td><td>OFF</td><td>ON</td><td>ON</td><td>OFF</td><td>ON</td><td>ON</td></tr></tbody></table><h3 id="接触器："><a href="#接触器：" class="headerlink" title="接触器："></a>接触器：</h3><p>作用：</p><p>​    1.<strong>启动和停止电动机</strong></p><p>​    2.<strong>反转电动机方向</strong></p><p>​    3.<strong>电动机保护：防止过载，短路，地震对电动机的影响</strong></p><p>​    4.<strong>通过辅助触点进行信号传输</strong></p><p>电气符号：KM</p><p>电气图形：<img src="/posts/6ed155d3/%E6%8E%A5%E8%A7%A6%E5%99%A8.png" alt="img"></p><p>原理：</p><p>​    接触器是由一个触点系统和一个激励系统组成的。触点系统包括主触点和辅助触点，而激励系统则通过线圈来产生磁场，从而控制触点的开闭状态。</p><p>当线圈通电时，产生的磁场吸引主触点闭合，使电路闭合。这允许电流通过接触器，并驱动被控制设备，比如电动机。当线圈失去电流时，磁场消失，主触点弹簧力将触点分离，电路打开，电流停止流动。</p><p>除了主触点外，接触器还包括辅助触点。辅助触点可以用于反馈信号或控制其他<a href="https://www.eefocus.com/baike/1654314.html">电气元件</a>的操作。例如，当接触器关闭时，辅助触点可以发送信号给控制系统，表示设备已经启动。</p><p>接触器的工作原理是基于电磁吸合的原理，通过控制线圈电流的开闭状态来实现触点的闭合和断开。这种设计使得接触器能够承受较大的电流负载，同时保持可靠性和耐久性。</p><p>分类：</p><p>​    交流接触器（电压AC）</p><p>​    直流接触器（电压DC）</p><h3 id="控制器："><a href="#控制器：" class="headerlink" title="控制器："></a>控制器：</h3><h4 id="光源控制器"><a href="#光源控制器" class="headerlink" title="光源控制器"></a>光源控制器</h4><h3 id="三色灯"><a href="#三色灯" class="headerlink" title="三色灯"></a>三色灯</h3><p>三色灯的顺序是黄绿红和蜂鸣器</p><h3 id="网线"><a href="#网线" class="headerlink" title="网线"></a>网线</h3><p>568B线序标准：橙白 橙 绿白 蓝 蓝白 绿 棕白 棕</p><h3 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h3><p><strong>马达断路器</strong></p><p>过载，过电流，欠压时，进行主电路断路</p><p>通过旋钮来开启和关闭电动机</p><h3 id="远程io"><a href="#远程io" class="headerlink" title="远程io"></a>远程io</h3><p>华杰HJ5203 16DI 16DO</p><p>零点io</p><h2 id="主电路"><a href="#主电路" class="headerlink" title="主电路"></a>主电路</h2><p>主电路流程：</p><p>空开QF–&gt;熔断FU–&gt;交流接触器KM–&gt;热继电器FR–&gt;电机</p><p>正反转：通过交换电路中的两根电源线</p><p>电气原理图：</p><p><img src="/posts/6ed155d3/%E6%AD%A3%E5%8F%8D%E8%BD%AC.png" alt="img"></p><h3 id="三相五线制"><a href="#三相五线制" class="headerlink" title="三相五线制"></a>三相五线制</h3><p>家用电: L（火线）N（零线） PE（地线） 的形式来供电</p><p>工业用电一般采用三相五线制:  L L L N PE</p><p>国家标准中三相五线制标准导线颜色为：A线黄色，B线绿色，C线红色，N线蓝色，PE线黄绿双色。</p><p>三个相线（A、B、C线）、零线（N线）以及地线（PE线）。</p><p>两根火线之间的电压是线电压是380V</p><p>火线和零线之间的电压是相电压</p><h2 id="控制电路："><a href="#控制电路：" class="headerlink" title="控制电路："></a>控制电路：</h2><p>通过控制电路控制主电路触点闭合，电路运行</p><p>设计控制电路要考虑电气元件损坏可能会引发问题</p><p>电动机正转降压启动：</p><p><img src="/posts/6ed155d3/%E7%94%B5%E5%8A%A8%E6%9C%BA%E6%AD%A3%E8%BD%AC%E9%99%8D%E5%8E%8B%E5%90%AF%E5%8A%A8.png" alt="img"></p><h2 id="压网线"><a href="#压网线" class="headerlink" title="压网线"></a>压网线</h2><p>网线顺序  橙白/橙/绿白/蓝/蓝白/绿/棕白/棕</p><p>然后插进水晶头，通过网线测试盒（终端测试盒）</p><h2 id="低压配电系统：TN、TT、IT"><a href="#低压配电系统：TN、TT、IT" class="headerlink" title="低压配电系统：TN、TT、IT"></a>低压配电系统：TN、TT、IT</h2><h3 id="一、IT、TT、TN字母含义"><a href="#一、IT、TT、TN字母含义" class="headerlink" title="一、IT、TT、TN字母含义"></a>一、IT、TT、TN字母含义</h3><p>（1）第一个字母表示电源端与地的关系：  T-电源端有一点直接接地，I-电源端所有带电部分不接地或有一点通过阻抗接地。</p><p>（2）第二个字母表示电气装置的外露可导电部分与地的关系：T-电气装置的外露可导电部分直接接地，此接地点在电气上独立于电源端的接地点；N-电气装置的外露可导电部分与电源端接地点有直接电气连接。</p><h3 id="二、IT系统："><a href="#二、IT系统：" class="headerlink" title="二、IT系统："></a>二、IT系统：</h3><p>IT系统就是电源中性点不接地，用电设备外露可导电部分直接接地的系统。IT系统可以有中性线，但IEC强烈建议不设置中性线。因为如果设置中性线，在IT系统中N线任何一点发生接地故障，该系统将不再是IT系统。 </p><p><img src="/posts/6ed155d3/IT%E7%B3%BB%E7%BB%9F.png" alt="img"></p><p>（1）电源变压器不引出中性点或中性点经高阻抗接地；为避免与其他系统混淆，IEC强烈建议不引出中性点。</p><p>（2）用电设备外壳就地接地,短距离供电漏电时外壳电压低，较安全；干线不允许安装漏电保护断电装置，可安装漏电报警装置；本系统电路的绝缘性能要求高，应安装绝缘监测装置。</p><p>（3）因无中性线引出，本系统只提供380伏民用电，220伏电器需经变压或单独引入专用电源。</p><p>（4）因供电连续性较好，本系统适用于短距离的电力炼钢、高等级手术室、矿井通风等场所，但不适用于需长距离供电及操作者可接触的设备距离较近的民用、建筑场所。</p><p>注：</p><p>​    中性点：中性点又称“零点” 。是指三相或多相交流系统中星形接线的公共点。按运行需要它有接地或不接地等工作方式一般用N表示</p><h3 id="三、TT系统"><a href="#三、TT系统" class="headerlink" title="三、TT系统"></a>三、TT系统</h3><p>TT系统就是电源中性点直接接地，用电设备外露可导电部分也直接接地的系统。通常将电源中性点的接地叫做工作接地，而设备外露可导电部分的接地叫做保护接地。</p><p>TT系统中，这两个接地必须是相互独立的。设备接地可以是每一设备都有各自独立的接地装置，也可以若干设备共用一个接地装置。 </p><p><img src="/posts/6ed155d3/TT%E7%B3%BB%E7%BB%9F.png" alt="img"></p><p>（1）电源变压器中性点及设备外壳均接地，有中性线引出，可提供220及380两种电压电源；</p><p>（2）相线漏电时电压较低，对操作者相对比较安全，但电流较小，不易使熔断器熔断，接地不良时可能造成高压带电。主电路可安装漏电保护断电装置以增强防护能力。</p><p>（3）有一定的防雷击过电压泄放的能力；耗用接地用的钢材较多，浪费资源；以前的建筑工地常用此系统，现在的新标准主要针对这类落后应用进行改造。</p><p>（4）因设备就地接地，单台设备漏电故障不会沿保护线波及整个系统的设备，所以本系统主要应用于对电压敏感的精密电子或数据处理设备；也适用于无专用变压器的外接低压电源的用户。 </p><h3 id="四、TT系统的主要优点"><a href="#四、TT系统的主要优点" class="headerlink" title="四、TT系统的主要优点"></a>四、TT系统的主要优点</h3><p>（1）能抑制高压线与低压线搭连或配变高低压绕组间绝缘击穿时低压电网出现的过电压。</p><p>（2）对低压电网的雷击过电压有一定的泄漏能力。</p><p>（3）与低压电器外壳不接地相比，在电器发生碰壳事故时，可降低外壳的对地电压，因而可减轻人身触电危害程度。</p><p>（4）由于单相接地时接地电流比较大，可使保护装置（漏电保护器）可靠动作，及时切除故障。</p><h3 id="五、TT系统的主要缺点"><a href="#五、TT系统的主要缺点" class="headerlink" title="五、TT系统的主要缺点"></a>五、TT系统的主要缺点</h3><p>（1）低、高压线路雷击时，配变可能发生正、逆变换过电压。</p><p>（2）低压电器外壳接地的保护效果不及IT系统。</p><p>（3）当电气设备的金属外壳带电（相线碰壳或设备绝缘损坏而漏电）时，由于有接地保护，可以大大减少触电的危险性。但是，低压断路器（自动开关）不一定能跳闸，造成漏电设备的外壳对地电压高于安全电压，属于危险电压。</p><p>（4）当漏电电流比较小时，即使有熔断器也不一定能熔断，所以还需要漏电保护器作保护，因此TT系统难以推广。</p><p>（5）TT系统接地装置耗用钢材多，而且难以回收、费工时、费料。</p><h3 id="六、TT系统的应用"><a href="#六、TT系统的应用" class="headerlink" title="六、TT系统的应用"></a>六、TT系统的应用</h3><p>TT系统由于接地装置就在设备附近，因此PE线断线的几率小，且容易被发现。</p><p>TT系统设备在正常运行时外壳不带电，故障时外壳高电位不会沿PE线传递至全系统。因此，TT系统适用于对电压敏感的数据处理设备及精密电子设备进行供电，在存在爆炸与火灾隐患等危险性场所应用有优势。</p><p>TT系统能大幅降低漏电设备上的故障电压，但一般不能降低到安全范围内。因此，采用TT系统必须装设漏电保护装置或过电流保护装置，并优先采用前者。</p><p>TT系统主要用于低压用户，即用于未装备配电变压器，从外面引进低压电源的小型用户。</p><h3 id="七、TN系统"><a href="#七、TN系统" class="headerlink" title="七、TN系统"></a>七、TN系统</h3><p>TN系统通常是一个中性点接地的三相电网系统。其特点是电气设备的外露可导电部分直接与系统接地点相连，当发生碰壳短路时，短路电流即经金属导线构成闭合回路。形成金属性单相短路，从而产生足够大的短路电流，使保护装置能可靠动作，将故障切除。</p><p>如果将工作零线N重复接地，碰壳短路时，一部分电流就可能分流于重复接地点，会使保护装置不能可靠动作或拒动，使故障扩大化。</p><p>（1）电源变压器中性点接地，设备外壳通过PE线（专用保护线）与中性点联结，根据联结位置又分为TN-C、TN-S、TN-C-S三种形式；</p><p>（2）TN-C：设备外壳直接接工作保护零线（PEN），三相负载平衡时，PEN线无电流电压，但如果不平衡，则该线对地有电压，外壳带电较危险；</p><p>（TN-C系统）</p><p>（3）TN-C-S系统：PEN线在区域总配电箱处永久分为工作零线N和专用保护线PE，设备外壳接PE线，此时PE线不得断开，N线可接入漏电保护器提高安全性；主要应用于分散居民用电； </p><p><img src="/posts/6ed155d3/TN-C-S%E7%B3%BB%E7%BB%9F.png" alt="img"></p><p>（4）TN-S系统：PEN线在电源变压器处永久分为工作零线N和专用保护线PE,PE线不得断开，主线路可安装漏电保护器提高安全性能；此系统节约材料，布设简单，供电安全性高，是国家强制要求建筑工地必须采用的供电形式。 </p><p><img src="/posts/6ed155d3/TN-S%E7%B3%BB%E7%BB%9F.png" alt="img"></p><p>（5）实际上，TN-C-S系统是在TN-C系统上变通的作法。当三相电力变压器工作接地情况良好，三相负载比较平衡时，TN-C-S系统在施工用电实践中效果还是不错的。但是，在三相负载不平衡，建筑施工工地有专用的电力变压器时，必须采用TN-S方式供电系统。 </p><h2 id="电气图纸："><a href="#电气图纸：" class="headerlink" title="电气图纸："></a>电气图纸：</h2><h3 id="控制电路原理图："><a href="#控制电路原理图：" class="headerlink" title="控制电路原理图："></a>控制电路原理图：</h3><h4 id="故障灯模拟："><a href="#故障灯模拟：" class="headerlink" title="故障灯模拟："></a>故障灯模拟：</h4><p>用红绿两种指示灯模拟设备运行故障状态通电时，绿灯常亮，即设备正常运行状态按下启动按钮，绿灯灭红灯亮，即设备由正常变为故障状态，按下停止复位。(停止按钮、启动按钮、中间继电器、红、绿灯)</p><p><img src="/posts/6ed155d3/%E6%95%85%E9%9A%9C%E7%81%AF%E6%A8%A1%E6%8B%9F.png" alt="img"></p><h4 id="互锁："><a href="#互锁：" class="headerlink" title="互锁："></a>互锁：</h4><p>按下SB1绿灯长亮，按下SB2红灯长亮:绿灯亮时，红灯灭(即按下SB1时绿灯亮，再按下SB2无任何反应);<br>红灯亮时，绿灯灭(即按下SB2时红灯亮，再按下SB1无任何反应);<br>按下SB3电路断电</p><p><img src="/posts/6ed155d3/%E4%BA%92%E9%94%81.png" alt="img"></p><h4 id="顺启逆停："><a href="#顺启逆停：" class="headerlink" title="顺启逆停："></a>顺启逆停：</h4><p>按下 SB1 第一个灯常亮(绿灯)，按下 SB3 第二个灯常亮(红灯)，按下 SB4 第二个灯灭，按下 SB2 第一个灯灭注:只能先按下 SB1使绿灯亮;在按下SB1之前，先按 SB3 红灯没有任何反应;只能先按下 SB4 使红灯灭;在按下 SB4 之前,先按 SB2是没有任何反应。</p><p><img src="/posts/6ed155d3/%E9%A1%BA%E5%90%AF%E9%80%86%E5%81%9C.png" alt="img"></p><h4 id="红绿灯模拟："><a href="#红绿灯模拟：" class="headerlink" title="红绿灯模拟："></a>红绿灯模拟：</h4><p>按下 SB1启动按钮，红灯亮;三秒后，红灯熄灭，黄灯亮;再三秒后，黄灯灭，绿灯亮;再三秒后，绿灯灭，红灯亮……依此循环不断，按下 SB2 停止按钮，电路断电，复位。</p><p><img src="/posts/6ed155d3/%E7%BA%A2%E7%BB%BF%E7%81%AF%E6%A8%A1%E6%8B%9F.png" alt="img"></p><h4 id="一键启停："><a href="#一键启停：" class="headerlink" title="一键启停："></a>一键启停：</h4><p>一个启动按钮，控制一盏灯亮和灭<br>第一次按下按钮灯亮，第二次按下按钮灯灭</p><p><img src="/posts/6ed155d3/%E4%B8%80%E9%94%AE%E5%90%AF%E5%81%9C.png" alt="img"></p><h4 id="星三角电机正转降压启动："><a href="#星三角电机正转降压启动：" class="headerlink" title="星三角电机正转降压启动："></a>星三角电机正转降压启动：</h4><p><img src="/posts/6ed155d3/%E6%98%9F%E4%B8%89%E8%A7%92%E7%94%B5%E6%9C%BA%E6%AD%A3%E8%BD%AC%E9%99%8D%E5%8E%8B%E5%90%AF%E5%8A%A8.png" alt="img"></p><h4 id="星三角电机正反转降压启动："><a href="#星三角电机正反转降压启动：" class="headerlink" title="星三角电机正反转降压启动："></a>星三角电机正反转降压启动：</h4><p><img src="/posts/6ed155d3/%E6%98%9F%E4%B8%89%E8%A7%92%E7%94%B5%E6%9C%BA%E6%AD%A3%E5%8F%8D%E8%BD%AC%E9%99%8D%E5%8E%8B%E5%90%AF%E5%8A%A8.png" alt="img"></p><h4 id="星三角电机正反转降压启动主电路-控制电路："><a href="#星三角电机正反转降压启动主电路-控制电路：" class="headerlink" title="星三角电机正反转降压启动主电路+控制电路："></a>星三角电机正反转降压启动主电路+控制电路：</h4><p><img src="/posts/6ed155d3/%E6%98%9F%E4%B8%89%E8%A7%92%E7%94%B5%E6%9C%BA%E6%AD%A3%E5%8F%8D%E8%BD%AC%E9%99%8D%E5%8E%8B%E5%90%AF%E5%8A%A8%E4%B8%BB%E7%94%B5%E8%B7%AF+%E6%8E%A7%E5%88%B6%E7%94%B5%E8%B7%AF.png" alt="img"></p><h3 id="点位图："><a href="#点位图：" class="headerlink" title="点位图："></a>点位图：</h3><p><img src="/posts/6ed155d3/%E7%82%B9%E4%BD%8D%E5%9B%BE.png" alt="img"></p><h3 id="布局安装图："><a href="#布局安装图：" class="headerlink" title="布局安装图："></a>布局安装图：</h3><p><img src="/posts/6ed155d3/%E5%B8%83%E5%B1%80%E5%AE%89%E8%A3%85%E5%9B%BE.png" alt="img"></p><h2 id="EPLAN电气画图软件相关问题："><a href="#EPLAN电气画图软件相关问题：" class="headerlink" title="EPLAN电气画图软件相关问题："></a>EPLAN电气画图软件相关问题：</h2><h3 id="常用快捷键："><a href="#常用快捷键：" class="headerlink" title="常用快捷键："></a>常用快捷键：</h3><table><thead><tr><th>功能</th><th>快捷键</th></tr></thead><tbody><tr><td>画直线</td><td>CTRL+F2</td></tr><tr><td>添加文本</td><td>大写T</td></tr><tr><td>插入电气图形</td><td>insert</td></tr><tr><td>¶</td><td>CTRL+ENTER</td></tr></tbody></table><h3 id="常见问题："><a href="#常见问题：" class="headerlink" title="常见问题："></a>常见问题：</h3><h4 id="文本显示类："><a href="#文本显示类：" class="headerlink" title="文本显示类："></a>文本显示类：</h4><h5 id="电气图形旁边显示-文字-怎么去掉？"><a href="#电气图形旁边显示-文字-怎么去掉？" class="headerlink" title="电气图形旁边显示/文字..怎么去掉？"></a>电气图形旁边显示/文字..怎么去掉？</h5><p>方案： 双击对应的电气图形 显示-元件-关联参考-层-改成EPLAN320, 图形.隐藏 文字就去掉了</p><h5 id="继电器这种元器件下面一堆杂乱的的关联描述怎么去掉？"><a href="#继电器这种元器件下面一堆杂乱的的关联描述怎么去掉？" class="headerlink" title="继电器这种元器件下面一堆杂乱的的关联描述怎么去掉？"></a>继电器这种元器件下面一堆杂乱的的关联描述怎么去掉？</h5><p>方案： 双击对应的电气图形 显示-触点映象-关联参考-点左边的✘</p><p><img src="/posts/6ed155d3/%E8%A7%A6%E7%82%B9%E6%98%A0%E8%B1%A1.png" alt="img"></p><p>然后 显示-元件-关联参考-层-改成EPLAN320, 图形.隐藏 就可以完全去除了</p><h2 id="万用表的使用"><a href="#万用表的使用" class="headerlink" title="万用表的使用"></a>万用表的使用</h2><p>万用表示例</p><p><img src="/posts/6ed155d3/%E4%B8%87%E7%94%A8%E8%A1%A8.jpg" alt="img"></p><h3 id="功能接线柱"><a href="#功能接线柱" class="headerlink" title="功能接线柱"></a>功能接线柱</h3><p><strong>20A</strong></p><p>测量电流 直流 交流</p><p><strong>mA/uA</strong></p><p>可以测量毫安（电流） 微安（电流） 毫法 （测量电容）</p><p><strong>COM</strong></p><p>公共接线柱接黑线</p><p><strong>V/Ω/二极管/蜂鸣档</strong></p><p>测量电压 直流 交流，测量 欧姆（电阻） 二极管 蜂鸣档（测量线路是否通电）</p><p><strong>AUTO POWER OFF</strong></p><p>一直闪烁有可能是万用表的电池没电了</p><p><strong>HOLD</strong></p><p>临时锁住当前数值</p><p>测量不同的数据要根据情况更换不同的接线柱</p><h2 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h2><p>电气设计狄老师：<a href="https://www.bilibili.com/read/cv5528364/">https://www.bilibili.com/read/cv5528364/</a> </p><p>工业互联网：<a href="https://blog.csdn.net/weixin_45586124/article/details/139971537">https://blog.csdn.net/weixin_45586124/article/details/139971537</a></p>]]></content>
      
      
      <categories>
          
          <category> 电气基本原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电气基本原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机底层原理</title>
      <link href="/posts/3bdc281c.html"/>
      <url>/posts/3bdc281c.html</url>
      
        <content type="html"><![CDATA[<p>计算机底层原理</p><span id="more"></span><hr><h2 id="计算机底层原理"><a href="#计算机底层原理" class="headerlink" title="计算机底层原理"></a>计算机底层原理</h2><h3 id="cpu是如何制作的？"><a href="#cpu是如何制作的？" class="headerlink" title="cpu是如何制作的？"></a>cpu是如何制作的？</h3><p>一堆沙子 +一堆铜 + 一堆胶水 + 特定金属添加+ 特殊工艺</p><p>沙子脱氧 -&gt; 石英 -&gt;二氧化硅-&gt; 提纯 -&gt; 硅-&gt; 切割 -&gt; 晶圆-&gt; 涂抹光刻胶 -&gt; 光刻 -&gt; 蚀刻 &gt; 清除光刻胶 -&gt; 电镀 -&gt; 抛光 -&gt; 铜层 -&gt; 测试 -&gt; 切片 -&gt;封装</p><p><strong>cpu的核心是晶体管</strong></p><p>计算机的核心是找到一种方式可以代表数字，有进行运算的方式</p><p>发展史： 机械摇把式计算机 -&gt; 真空管计算机（不稳定，笨重） -&gt; 晶体管计算机</p><p>晶体管通一次电可以进行一次单次的计算</p><p>硅-&gt; 加入特殊元素-&gt; P半导体 N半导体 -&gt; PN结 -&gt; 二极管 -&gt; 场效应晶体管 -&gt; 逻辑开关</p><p>与门 或门 非门 或非门 已非门 异或非门 -&gt; 基础逻辑电路加法器 累加器 锁存器<br>实现手动计算(通电一次，运行一次位运算)<br>加入内存 实现自动运算 (每次读取内存指令（高电低电）)</p><h3 id="计算机的组成："><a href="#计算机的组成：" class="headerlink" title="计算机的组成："></a>计算机的组成：</h3><p><img src="/posts/3bdc281c/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%9B%BE.png" alt="img"></p><p>cpu 内部组成：</p><p>cpu通过总线读取内存中的数据</p><p>内存中存取的一条一条的指令</p><p><strong>程序计数器（指令计数器pc）</strong>：用于存放指令的地址，指向当前需要取出的指令，当CPU从内存中取出一个指令以后，EIP/IP就自动增加，指向下一个指令的地址。这样看来上下文切换实际就是寄存器的切换。</p><p>cpu要做计算的时候，通过pc中指令的地址从内存中拿到对应的数据，读到<strong>寄存器(Registers)<strong>中，然后通过cpu的</strong>运算单元（ALU）</strong>运算，之后再写到内存中去</p><h3 id="存储的层次结构"><a href="#存储的层次结构" class="headerlink" title="存储的层次结构"></a>存储的层次结构</h3><p><img src="/posts/3bdc281c/%E5%AD%98%E5%82%A8%E7%9A%84%E5%B1%82%E6%AD%A4%E7%BB%93%E6%9E%84.png" alt="img"></p><p>主存的中取数据的速度大概是寄存器的100分之一</p><p><img src="/posts/3bdc281c/%E9%80%9F%E5%BA%A6%E5%AF%B9%E6%AF%94.png" alt="img"></p><p>多级缓存的结构</p><p><img src="/posts/3bdc281c/%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E7%BB%93%E6%9E%84.png" alt="img"></p><p>为了取数据更快，内存会将数据存储在L3,L2,L1中，然后cpu去取数据的时候，先从L1中查找数据,找不到数据的情况下，会从L2,L3中依次查找数据，最后再在内存中去查找数据</p><p>每个核中有L1,L2 ,多个核共享三级缓存L3，多块cpu共享内存</p><h4 id="线程"><a href="#线程" class="headerlink" title="线程:"></a>线程:</h4><p>线程中的指令放程序计数器中,线程中的数据放到寄存器中</p><p>线程的切换: 多线程执行的时候,要将线程的数据存到内存中,线程执行一半中止了,其它线程执行完之后,要从内存中拿到之前线程执行的数据恢复到程序计数器和寄存器中继续执行线程</p><h4 id="超线程"><a href="#超线程" class="headerlink" title="超线程:"></a>超线程:</h4><p>一个ALU对应多个PC/寄存器</p><p>四核八线程就是  四个ALU(计算单元)对应两组寄存器和PC</p><h4 id="cpu读取数据"><a href="#cpu读取数据" class="headerlink" title="cpu读取数据"></a>cpu读取数据</h4><p>cpu读取数据的时候是很多个数据一起读取的,数据是0还是1其实就是线有没有通电,总线是很多根线</p><p>找数据是从L1-&gt;L2-&gt;L3-&gt;内存 </p><p>cpu从内存中读取数据的时候是一块一块的读取的(假如只需要数据a,它会读取含a的一块数据,不是只读取a),一块数据叫一个缓存行(cache line,64个字节),读取到数据之后缓存到L3-&gt;L2-&gt;L1下次需要数据直接从L1中取数据</p><p><strong>为什么只读取64字节数据?</strong></p><p>缓存行缓存行越大，局部性空间效率越高，但读取时间慢缓存行越小，局部性空间效率越低，但读取时间快取一个折中值，目前多用:64字节</p><p>为了避免相邻的数据在不同cpu中反复修改,可以让这俩数据不在同一个缓存行,比如数据设置成long类型,前面或者后面加七个long 类型数据,一个long类型是8字节</p><p><strong>缓存一致性协议:</strong> </p><p>MESI Cache 一致性协议 四种状态</p><p>Modified 被修改</p><p>Exclusive 独享</p><p>Shared 分享</p><p>Lnvalid 失效</p><p>使用缓存一致性协议保证cpu中的数据一致</p><p>在一个核中缓存行修改了,修改完的数据会强制写道内存中,相同的缓存行在另一个核中就会失效(使用缓存锁实现),必须从内存中去读取最新的</p><p>缓存一致性协议是<strong>缓存锁</strong>实现之一有些无法被缓存的数据或者跨越多个缓存行的数据依然必须使用<strong>总线锁</strong></p><h3 id="bug的由来"><a href="#bug的由来" class="headerlink" title="bug的由来"></a>bug的由来</h3><p>原始的纸带算计需要给纸带上打眼进行计算，小飞虫把眼堵住了，然后程序一直有问题，英语的小飞虫叫bug</p><p>0101010 太繁琐，之后就出现 助记符 （起别名）</p><p>给0101010起一个别名，这种语言叫做<strong>汇编语言</strong>（就是机器语言）</p><p>高级语言 -&gt; 编译器（将高级语言翻译成计算机可以识别的语言） -&gt; 机器语言</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>端口被占用的解决方式</title>
      <link href="/posts/4356f0fa.html"/>
      <url>/posts/4356f0fa.html</url>
      
        <content type="html"><![CDATA[<p>端口被占用的解决方式</p><span id="more"></span><hr><p>查看所有的端口占用情况cmd </p><p>输入命令：</p><pre><code>netstat -ano</code></pre><p>查看指定端口的占用情况</p><pre><code>netstat -aon|findstr &quot;8080&quot;</code></pre><p>查看PID对应的进程</p><pre><code>tasklist|findstr &quot;9524&quot;</code></pre><p>结束该进程</p><pre><code>taskkill /f /t /im java.exe</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电脑安装VMware</title>
      <link href="/posts/a55fa9fa.html"/>
      <url>/posts/a55fa9fa.html</url>
      
        <content type="html"><![CDATA[<p>电脑安装VMware</p><span id="more"></span><hr><p>双击下载的安装包，点击”下一步“</p><p><img src="/posts/a55fa9fa/clip_image002.jpg" alt="图片"></p><p>接受许可协议条款，点击“下一步”</p><p><img src="/posts/a55fa9fa/clip_image004.jpg" alt="图片"></p><p>更改安装位置，点击“下一步”</p><p><img src="/posts/a55fa9fa/clip_image006.jpg" alt="图片"></p><p>用户体验设置，建议全部取消勾选，然后点击“下一步”</p><p><img src="/posts/a55fa9fa/clip_image008.jpg" alt="图片"></p><p>快捷方式，根据个人喜好选择，点击“下一步”</p><p><img src="/posts/a55fa9fa/clip_image010.jpg" alt="图片"></p><p>点击“安装”</p><p><img src="/posts/a55fa9fa/clip_image012.jpg" alt="图片"><img src="/posts/a55fa9fa/clip_image014.jpg" alt="图片"></p><p>点击“许可证”<img src="/posts/a55fa9fa/clip_image016.jpg" alt="图片"></p><p>输入许可证密钥，点击“输入”</p><p><img src="/posts/a55fa9fa/clip_image018.jpg" alt="图片"></p><p>选择其中之一</p><pre><code>l  ZF3R0-FHED2-M80TY-8QYGC-NPKYFl  YF390-0HF8P-M81RQ-2DXQE-M2UT6l  ZF71R-DMX85-08DQY-8YMNC-PPHV8</code></pre><p>点击“完成”</p><p><img src="/posts/a55fa9fa/clip_image020.jpg" alt="图片"></p><p>完成转到：<a href="https://shimo.im/docs/B1Aw1wBXN7cEPbqm">02 - VMware安装liunx</a> </p>]]></content>
      
      
      <categories>
          
          <category> VMware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liunx基础安装命令</title>
      <link href="/posts/2b8db47c.html"/>
      <url>/posts/2b8db47c.html</url>
      
        <content type="html"><![CDATA[<p>liunx基础安装命令</p><span id="more"></span><hr><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><pre class=" language-xml"><code class="language-xml">[root@localhost ~]# systemctl disable firewalld</code></pre><h2 id="安装ll"><a href="#安装ll" class="headerlink" title="安装ll"></a>安装ll</h2><p>按照顺序输入</p><pre class=" language-plain"><code class="language-plain"># 编写[root@localhost ~]# vi ~/.bashrc</code></pre><p><img src="/posts/2b8db47c/clip_image002.jpg" alt="图片"></p><pre class=" language-plain"><code class="language-plain"># 刷新[root@localhost ~]# source ~/.bashrc</code></pre><h2 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y wget</code></pre><h2 id="安装ifconfig"><a href="#安装ifconfig" class="headerlink" title="安装ifconfig"></a>安装ifconfig</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y net-tools</code></pre><h2 id="安装xinetd"><a href="#安装xinetd" class="headerlink" title="安装xinetd"></a>安装xinetd</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y gcc automake autoconf libtool make</code></pre><h2 id="安装rzrs"><a href="#安装rzrs" class="headerlink" title="安装rzrs"></a>安装rzrs</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y xinetd</code></pre><h2 id="安装unzip"><a href="#安装unzip" class="headerlink" title="安装unzip"></a>安装unzip</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y unzip</code></pre><h2 id="安装service"><a href="#安装service" class="headerlink" title="安装service"></a>安装service</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y initscripts</code></pre><h2 id="安装sudo"><a href="#安装sudo" class="headerlink" title="安装sudo"></a>安装sudo</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y sudo</code></pre><h2 id="安装libaio"><a href="#安装libaio" class="headerlink" title="安装libaio"></a>安装libaio</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y libaio-devel.x86_64</code></pre><h2 id="安装GCC-C"><a href="#安装GCC-C" class="headerlink" title="安装GCC-C++"></a>安装GCC-C++</h2><pre class=" language-powershell"><code class="language-powershell">yum <span class="token operator">-</span>y install gccyum <span class="token operator">-</span>y install gcc<span class="token operator">-</span>c+<span class="token operator">+</span></code></pre><h2 id="安装GCC"><a href="#安装GCC" class="headerlink" title="安装GCC"></a>安装GCC</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y centos-release-scl[root@localhost ~]# yum install -y devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils[root@localhost ~]# scl enable devtoolset-9 bash#如果要长期生效的话，执行如下：[root@localhost ~]# echo "source /opt/rh/devtoolset-9/enable" >>/etc/profile</code></pre><h2 id="安装vim"><a href="#安装vim" class="headerlink" title="安装vim"></a>安装vim</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install -y vim*</code></pre><h2 id="安装rz"><a href="#安装rz" class="headerlink" title="安装rz"></a>安装rz</h2><pre class=" language-plain"><code class="language-plain">[root@localhost ~]# yum install lrzsz -y</code></pre>]]></content>
      
      
      <categories>
          
          <category> liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware安装liunx</title>
      <link href="/posts/4b56a127.html"/>
      <url>/posts/4b56a127.html</url>
      
        <content type="html"><![CDATA[<p>VMware安装liunx</p><span id="more"></span><hr><h2 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h2><p><img src="/posts/4b56a127/clip_image002.gif" alt="图片"></p><h2 id="安装向导"><a href="#安装向导" class="headerlink" title="安装向导"></a>安装向导</h2><h3 id="选择自定义"><a href="#选择自定义" class="headerlink" title="选择自定义"></a>选择自定义</h3><p><img src="/posts/4b56a127/clip_image004.gif" alt="图片"></p><h3 id="选择workstation-16-x"><a href="#选择workstation-16-x" class="headerlink" title="选择workstation 16.x"></a>选择workstation 16.x</h3><p><img src="/posts/4b56a127/clip_image006.gif" alt="图片"></p><h3 id="选择稍后安装操作系统"><a href="#选择稍后安装操作系统" class="headerlink" title="选择稍后安装操作系统"></a>选择稍后安装操作系统</h3><p><img src="/posts/4b56a127/clip_image008.gif" alt="图片"></p><h3 id="选择liunx-centos-7-64位"><a href="#选择liunx-centos-7-64位" class="headerlink" title="选择liunx - centos 7 64位"></a>选择liunx - centos 7 64位</h3><p><img src="/posts/4b56a127/clip_image010.gif" alt="图片"></p><h3 id="选择虚拟机位置和名称"><a href="#选择虚拟机位置和名称" class="headerlink" title="选择虚拟机位置和名称"></a>选择虚拟机位置和名称</h3><p><img src="/posts/4b56a127/clip_image012.gif" alt="图片"><img src="/posts/4b56a127/clip_image014.gif" alt="图片"></p><h3 id="选择虚拟机核心数量"><a href="#选择虚拟机核心数量" class="headerlink" title="选择虚拟机核心数量"></a>选择虚拟机核心数量</h3><p><img src="/posts/4b56a127/clip_image016.jpg" alt="图片"></p><h3 id="选择虚拟机内存"><a href="#选择虚拟机内存" class="headerlink" title="选择虚拟机内存"></a>选择虚拟机内存</h3><p><img src="/posts/4b56a127/clip_image018.gif" alt="图片"></p><h3 id="选择虚拟机网络"><a href="#选择虚拟机网络" class="headerlink" title="选择虚拟机网络"></a>选择虚拟机网络</h3><p><img src="/posts/4b56a127/clip_image020.gif" alt="图片"></p><h3 id="选择I-O控制器类型"><a href="#选择I-O控制器类型" class="headerlink" title="选择I/O控制器类型"></a>选择I/O控制器类型</h3><p><img src="/posts/4b56a127/clip_image022.gif" alt="图片"></p><h3 id="选择虚拟磁盘类型"><a href="#选择虚拟磁盘类型" class="headerlink" title="选择虚拟磁盘类型"></a>选择虚拟磁盘类型</h3><p><img src="/posts/4b56a127/clip_image024.gif" alt="图片"></p><h3 id="选择磁盘"><a href="#选择磁盘" class="headerlink" title="选择磁盘"></a>选择磁盘</h3><p><img src="/posts/4b56a127/clip_image026.gif" alt="图片"></p><h3 id="选择磁盘容量"><a href="#选择磁盘容量" class="headerlink" title="选择磁盘容量"></a>选择磁盘容量</h3><p><img src="/posts/4b56a127/clip_image028.gif" alt="图片"></p><h3 id="指定磁盘文件"><a href="#指定磁盘文件" class="headerlink" title="指定磁盘文件"></a>指定磁盘文件</h3><p><img src="/posts/4b56a127/clip_image030.gif" alt="图片"></p><h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p><img src="/posts/4b56a127/clip_image032.jpg" alt="图片"></p><p><img src="/posts/4b56a127/clip_image034.gif" alt="图片"></p><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><h3 id="编辑虚拟机"><a href="#编辑虚拟机" class="headerlink" title="编辑虚拟机"></a>编辑虚拟机</h3><p><img src="/posts/4b56a127/clip_image036.gif" alt="图片"></p><h3 id="选择liunx镜像"><a href="#选择liunx镜像" class="headerlink" title="选择liunx镜像"></a>选择liunx镜像</h3><p><img src="/posts/4b56a127/clip_image038.gif" alt="图片"></p><h3 id="点击确定"><a href="#点击确定" class="headerlink" title="点击确定"></a>点击确定</h3><p><img src="/posts/4b56a127/clip_image040.gif" alt="图片"></p><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><h3 id="开启虚拟机"><a href="#开启虚拟机" class="headerlink" title="开启虚拟机"></a>开启虚拟机</h3><p><img src="/posts/4b56a127/clip_image042.gif" alt="图片"></p><h3 id="安装-CentOS-7"><a href="#安装-CentOS-7" class="headerlink" title="安装 CentOS 7"></a>安装 CentOS 7</h3><p><img src="/posts/4b56a127/clip_image044.gif" alt="图片"></p><h3 id="等待调取安装程序"><a href="#等待调取安装程序" class="headerlink" title="等待调取安装程序"></a>等待调取安装程序</h3><p><img src="/posts/4b56a127/clip_image046.gif" alt="图片"></p><h3 id="选择中文"><a href="#选择中文" class="headerlink" title="选择中文"></a>选择中文</h3><p><img src="/posts/4b56a127/clip_image048.gif" alt="图片"></p><h3 id="选择最小安装"><a href="#选择最小安装" class="headerlink" title="选择最小安装"></a>选择最小安装</h3><p><img src="/posts/4b56a127/clip_image050.gif" alt="图片"></p><h3 id="选择磁盘-1"><a href="#选择磁盘-1" class="headerlink" title="选择磁盘"></a>选择磁盘</h3><p><img src="/posts/4b56a127/clip_image052.gif" alt="图片"></p><h3 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h3><p><img src="/posts/4b56a127/clip_image054.gif" alt="图片"></p><h4 id="记录网络"><a href="#记录网络" class="headerlink" title="记录网络"></a>记录网络</h4><p><img src="/posts/4b56a127/clip_image056.gif" alt="图片"></p><h4 id="记录到记事本上面"><a href="#记录到记事本上面" class="headerlink" title="记录到记事本上面"></a>记录到记事本上面</h4><p><img src="/posts/4b56a127/clip_image058.gif" alt="图片"></p><h4 id="配置网络-常规"><a href="#配置网络-常规" class="headerlink" title="配置网络 - 常规"></a>配置网络 - 常规</h4><p><img src="/posts/4b56a127/clip_image060.gif" alt="图片"></p><h4 id="配置网络-IPv4-设置"><a href="#配置网络-IPv4-设置" class="headerlink" title="配置网络 - IPv4 设置"></a>配置网络 - IPv4 设置</h4><p><img src="/posts/4b56a127/clip_image062.gif" alt="图片"></p><h4 id="配置网络-配置IP"><a href="#配置网络-配置IP" class="headerlink" title="配置网络 - 配置IP"></a>配置网络 - 配置IP</h4><p><img src="/posts/4b56a127/clip_image064.gif" alt="图片"></p><h4 id="网络配置-保存"><a href="#网络配置-保存" class="headerlink" title="网络配置 - 保存"></a>网络配置 - 保存</h4><p><img src="/posts/4b56a127/clip_image066.gif" alt="图片"></p><h4 id="网络配置-检验"><a href="#网络配置-检验" class="headerlink" title="网络配置 - 检验"></a>网络配置 - 检验</h4><p><img src="/posts/4b56a127/clip_image068.gif" alt="图片"></p><h4 id="网络设置-完成"><a href="#网络设置-完成" class="headerlink" title="网络设置 - 完成"></a>网络设置 - 完成</h4><p><img src="/posts/4b56a127/clip_image070.gif" alt="图片"></p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p><img src="/posts/4b56a127/clip_image072.gif" alt="图片"></p><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p><img src="/posts/4b56a127/clip_image074.gif" alt="图片"></p><h3 id="完成保存密码"><a href="#完成保存密码" class="headerlink" title="完成保存密码"></a>完成保存密码</h3><p><img src="/posts/4b56a127/clip_image076.gif" alt="图片"></p><h3 id="等待安装完成"><a href="#等待安装完成" class="headerlink" title="等待安装完成"></a>等待安装完成</h3><p><img src="/posts/4b56a127/clip_image078.gif" alt="图片"></p><h3 id="完成重启"><a href="#完成重启" class="headerlink" title="完成重启"></a>完成重启</h3><p><img src="/posts/4b56a127/clip_image080.gif" alt="图片"></p><h2 id="启动liunx"><a href="#启动liunx" class="headerlink" title="启动liunx"></a>启动liunx</h2><p><img src="/posts/4b56a127/clip_image082.gif" alt="图片"></p><h2 id="Liunx启动成功"><a href="#Liunx启动成功" class="headerlink" title="Liunx启动成功"></a>Liunx启动成功</h2><p><img src="/posts/4b56a127/clip_image084.gif" alt="图片"></p><h2 id="验证安装结果"><a href="#验证安装结果" class="headerlink" title="验证安装结果"></a>验证安装结果</h2><h3 id="登录系统"><a href="#登录系统" class="headerlink" title="登录系统"></a>登录系统</h3><p><img src="/posts/4b56a127/clip_image084.gif" alt="图片"></p><h4 id="查看IP"><a href="#查看IP" class="headerlink" title="查看IP"></a>查看IP</h4><p><img src="/posts/4b56a127/clip_image087.gif" alt="图片"></p><h4 id="查看本机IP"><a href="#查看本机IP" class="headerlink" title="查看本机IP"></a>查看本机IP</h4><h5 id="打开cmd"><a href="#打开cmd" class="headerlink" title="打开cmd"></a>打开cmd</h5><p><img src="/posts/4b56a127/clip_image089.gif" alt="图片"></p><h5 id="查看本机IP地址"><a href="#查看本机IP地址" class="headerlink" title="查看本机IP地址"></a>查看本机IP地址</h5><p><img src="/posts/4b56a127/clip_image091.gif" alt="图片"></p><h3 id="验证网络"><a href="#验证网络" class="headerlink" title="验证网络"></a>验证网络</h3><h4 id="虚拟机-ping-本机"><a href="#虚拟机-ping-本机" class="headerlink" title="虚拟机 ping 本机"></a>虚拟机 ping 本机</h4><p><img src="/posts/4b56a127/clip_image093.gif" alt="图片"></p><h4 id="本机-ping-虚拟机"><a href="#本机-ping-虚拟机" class="headerlink" title="本机 ping 虚拟机"></a>本机 ping 虚拟机</h4><p><img src="/posts/4b56a127/clip_image095.gif" alt="图片"></p><h2 id="使用xshell连接虚拟机"><a href="#使用xshell连接虚拟机" class="headerlink" title="使用xshell连接虚拟机"></a>使用xshell连接虚拟机</h2><h3 id="新建连接"><a href="#新建连接" class="headerlink" title="新建连接"></a>新建连接</h3><p><img src="/posts/4b56a127/clip_image097.gif" alt="图片"></p><h3 id="连接liunx系统"><a href="#连接liunx系统" class="headerlink" title="连接liunx系统"></a>连接liunx系统</h3><p><img src="/posts/4b56a127/clip_image099.gif" alt="图片"></p><h3 id="输入用户名"><a href="#输入用户名" class="headerlink" title="输入用户名"></a>输入用户名</h3><p><img src="/posts/4b56a127/clip_image101.gif" alt="图片"></p><h3 id="输入密码并记住密码"><a href="#输入密码并记住密码" class="headerlink" title="输入密码并记住密码"></a>输入密码并记住密码</h3><p><img src="/posts/4b56a127/clip_image103.gif" alt="图片"></p><h3 id="登录成功"><a href="#登录成功" class="headerlink" title="登录成功"></a>登录成功</h3><p><img src="/posts/4b56a127/clip_image105.gif" alt="图片"></p><p>完成转到：<a href="https://shimo.im/docs/svGngDG4K0sq398w">liunx基础安装命令</a> 逐步执行</p>]]></content>
      
      
      <categories>
          
          <category> liunx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liunx安装docker</title>
      <link href="/posts/2259f19c.html"/>
      <url>/posts/2259f19c.html</url>
      
        <content type="html"><![CDATA[<p>Liunx安装docker</p><span id="more"></span><hr><h2 id="配置yum国内镜像加速"><a href="#配置yum国内镜像加速" class="headerlink" title="配置yum国内镜像加速"></a>配置yum国内镜像加速</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 1、备份</span><span class="token function">mv</span> <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>CentOS<span class="token operator">-</span>Base<span class="token punctuation">.</span>repo <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>CentOS<span class="token operator">-</span>Base<span class="token punctuation">.</span>repo<span class="token punctuation">.</span>backup<span class="token comment" spellcheck="true"># 2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/</span>wget <span class="token operator">-</span>O <span class="token operator">/</span>etc<span class="token operator">/</span>yum<span class="token punctuation">.</span>repos<span class="token punctuation">.</span>d<span class="token operator">/</span>CentOS<span class="token operator">-</span>Base<span class="token punctuation">.</span>repo http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>repo<span class="token operator">/</span>Centos<span class="token operator">-</span>7<span class="token punctuation">.</span>repo<span class="token comment" spellcheck="true"># 3、生成缓存</span>yum makecache</code></pre><h2 id="安装docker运行环境"><a href="#安装docker运行环境" class="headerlink" title="安装docker运行环境"></a>安装docker运行环境</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 由于 Docker 是基于 C 和 C++ 开发的，所以需要先安装相关环境。</span>yum <span class="token operator">-</span>y install gccyum <span class="token operator">-</span>y install gcc<span class="token operator">-</span>c+<span class="token operator">+</span></code></pre><h2 id="卸载docker"><a href="#卸载docker" class="headerlink" title="卸载docker"></a>卸载docker</h2><p>如果之前安装过docker先卸载之前的docker，如果没安装过请忽略这一步</p><pre class=" language-powershell"><code class="language-powershell">yum <span class="token operator">-</span>y remove docker docker<span class="token operator">-</span>common docker<span class="token operator">-</span>selinux docker<span class="token operator">-</span>engine</code></pre><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>根据docker官方的建议，需要先安装一些环境</p><pre class=" language-powershell"><code class="language-powershell">yum install <span class="token operator">-</span>y yum<span class="token operator">-</span>utils device<span class="token operator">-</span>mapper<span class="token operator">-</span>persistent<span class="token operator">-</span><span class="token keyword">data</span> lvm2</code></pre><h2 id="设置镜像仓库"><a href="#设置镜像仓库" class="headerlink" title="设置镜像仓库"></a>设置镜像仓库</h2><pre class=" language-powershell"><code class="language-powershell">yum<span class="token operator">-</span>config<span class="token operator">-</span>manager <span class="token operator">--</span>add<span class="token operator">-</span>repo http:<span class="token operator">/</span><span class="token operator">/</span>mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token operator">/</span>linux<span class="token operator">/</span>centos<span class="token operator">/</span>docker<span class="token operator">-</span>ce<span class="token punctuation">.</span>repo</code></pre><h2 id="更新yum软件包索引"><a href="#更新yum软件包索引" class="headerlink" title="更新yum软件包索引"></a>更新yum软件包索引</h2><pre class=" language-powershell"><code class="language-powershell">yum makecache fast</code></pre><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 这里的 docker-ce 社区版，docker-ee 企业版</span>yum <span class="token operator">-</span>y install docker<span class="token operator">-</span>ce docker<span class="token operator">-</span>ce<span class="token operator">-</span><span class="token function">cli</span> containerd<span class="token punctuation">.</span>io</code></pre><h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 查看docker状态</span>systemctl status docker<span class="token comment" spellcheck="true"># 启动docker</span>systemctl <span class="token function">start</span> docker<span class="token comment" spellcheck="true"># 停止docker</span>systemctl stop docker<span class="token comment" spellcheck="true"># 查看docker版本信息</span>docker version<span class="token comment" spellcheck="true"># 设置docker容器开机自启</span>systemctl enable docker</code></pre><h2 id="创建docker的工作目录"><a href="#创建docker的工作目录" class="headerlink" title="创建docker的工作目录"></a>创建docker的工作目录</h2><pre class=" language-xml"><code class="language-xml"># 打开目录[root@localhost ~]# cd /usr/local/# docker的工作空间[root@localhost local]# mkdir docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装ES</title>
      <link href="/posts/921863cb.html"/>
      <url>/posts/921863cb.html</url>
      
        <content type="html"><![CDATA[<p>docker安装ES</p><span id="more"></span><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 打开目录</span><span class="token namespace">[root@MuYu docker]</span><span class="token comment" spellcheck="true"># cd /usr/local/docker/</span><span class="token comment" spellcheck="true"># 创建 es 目录</span><span class="token namespace">[root@MuYu docker]</span><span class="token comment" spellcheck="true"># mkdir es</span><span class="token comment" spellcheck="true"># 打开 es 目录</span><span class="token namespace">[root@MuYu docker]</span><span class="token comment" spellcheck="true"># cd es/</span></code></pre><h2 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 创建 数据 挂载目录</span><span class="token namespace">[root@MuYu es]</span><span class="token comment" spellcheck="true"># mkdir data</span><span class="token comment" spellcheck="true"># 创建 配置 挂载目录</span><span class="token namespace">[root@MuYu es]</span><span class="token comment" spellcheck="true"># mkdir config</span><span class="token comment" spellcheck="true"># 创建 插件 挂载目录</span><span class="token namespace">[root@MuYu es]</span><span class="token comment" spellcheck="true"># mkdir plugins</span><span class="token comment" spellcheck="true"># 权限赋值</span><span class="token namespace">[root@MuYu es]</span><span class="token comment" spellcheck="true"># chmod -R 777 /usr/local/docker/es/</span></code></pre><h3 id="编辑配置"><a href="#编辑配置" class="headerlink" title="编辑配置"></a>编辑配置</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 打开 config 目录</span><span class="token namespace">[root@MuYu es]</span><span class="token comment" spellcheck="true"># cd config/</span></code></pre><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 编写配置文件</span><span class="token namespace">[root@MuYu config]</span><span class="token comment" spellcheck="true"># vim elasticsearch.yml</span></code></pre><h3 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 可访问IP</span><span class="token key atrule">http.host</span><span class="token punctuation">:</span> 0.0.0.0<span class="token comment" spellcheck="true"># 跨域</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 打开目录</span><span class="token namespace">[root@MuYu es]</span><span class="token comment" spellcheck="true"># cd /usr/local/docker/es</span><span class="token comment" spellcheck="true"># 编辑脚本</span><span class="token namespace">[root@MuYu es]</span><span class="token comment" spellcheck="true"># vim startEs.sh</span></code></pre><h3 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h3><pre class=" language-yaml"><code class="language-yaml">docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name es<span class="token punctuation">-</span>7.17.0 \ <span class="token punctuation">-</span><span class="token punctuation">-</span>restart=always \ <span class="token punctuation">-</span><span class="token punctuation">-</span>privileged=true \ <span class="token punctuation">-</span>p 9200<span class="token punctuation">:</span>9200  <span class="token punctuation">-</span>p 9300<span class="token punctuation">:</span>9300 \ <span class="token punctuation">-</span>e "discovery.type=single<span class="token punctuation">-</span>node" \ <span class="token punctuation">-</span>e ES_JAVA_OPTS="<span class="token punctuation">-</span>Xms84m <span class="token punctuation">-</span>Xmx256m" \ <span class="token punctuation">-</span>v /usr/local/docker/es/config/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml \ <span class="token punctuation">-</span>v /usr/local/docker/es/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data \ <span class="token punctuation">-</span>v /usr/local/docker/es/plugins<span class="token punctuation">:</span>/usr/share/elasticsearch/plugins \ <span class="token punctuation">-</span>d elasticsearch<span class="token punctuation">:</span>7.17.0</code></pre><h3 id="脚本赋权"><a href="#脚本赋权" class="headerlink" title="脚本赋权"></a>脚本赋权</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@MuYu es]</span><span class="token comment" spellcheck="true"># chmod -R 700 startEs.sh</span></code></pre><h2 id="启动脚本-1"><a href="#启动脚本-1" class="headerlink" title="启动脚本"></a>启动脚本</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 执行脚本</span><span class="token namespace">[root@MuYu es]</span><span class="token comment" spellcheck="true"># ./startEs.sh</span></code></pre><h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p><img src="/posts/921863cb/clip_image002.gif" alt="图片"></p><p>网址请求ip：9200 获得如下信息</p><p><img src="/posts/921863cb/clip_image004.gif" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> ES </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装kibana</title>
      <link href="/posts/9945e44a.html"/>
      <url>/posts/9945e44a.html</url>
      
        <content type="html"><![CDATA[<p>docker安装kibana</p><span id="more"></span><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 打开目录</span><span class="token namespace">[root@MuYu docker]</span><span class="token comment" spellcheck="true"># cd /usr/local/docker/</span><span class="token comment" spellcheck="true"># 创建 kibana 目录</span><span class="token namespace">[root@MuYu docker]</span><span class="token comment" spellcheck="true"># mkdir kibana/</span><span class="token comment" spellcheck="true"># 进入 kibana 目录</span><span class="token namespace">[root@MuYu docker]</span><span class="token comment" spellcheck="true"># cd kibana/</span></code></pre><h2 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 创建 config 挂载目录</span><span class="token punctuation">[</span>root@MuYu kibana<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir config</span></code></pre><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 进入 config 目录</span><span class="token punctuation">[</span>root@MuYu kibana<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd config/</span><span class="token comment" spellcheck="true"># 编写配置文件 或者直接 上传下面这个 配置文件</span><span class="token punctuation">[</span>root@MuYu config<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim kibana.yml</span></code></pre><p><a href="https://uploader.shimo.im/f/vmnKvzuXEAFTazBC.yml?fileGuid=loqeMYlyWrfrBWqn">kibana.yml</a></p><p>赋权限：</p><pre class=" language-yaml"><code class="language-yaml">chmod <span class="token punctuation">-</span>R 777 kibana.ymldocker logs <span class="token punctuation">-</span>f <span class="token punctuation">-</span>t <span class="token punctuation">-</span><span class="token punctuation">-</span>tail <span class="token punctuation">-</span>f 容器id</code></pre><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 主机地址，可以是ip,主机名</span><span class="token key atrule">server.host</span><span class="token punctuation">:</span> 0.0.0.0<span class="token comment" spellcheck="true"># 提供服务的端口，监听端口</span><span class="token key atrule">server.port</span><span class="token punctuation">:</span> <span class="token number">5601</span><span class="token comment" spellcheck="true"># 该 kibana 服务的名称，默认 your-hostname</span><span class="token key atrule">server.name</span><span class="token punctuation">:</span> <span class="token string">"MuYu-kibana"</span><span class="token key atrule">server.shutdownTimeout</span><span class="token punctuation">:</span> <span class="token string">"5s"</span><span class="token comment" spellcheck="true">#####----------elasticsearch相关----------#####</span><span class="token comment" spellcheck="true"># kibana访问es服务器的URL,就可以有多个，以逗号","隔开</span><span class="token key atrule">elasticsearch.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token string">"http://你的IP地址:9200"</span> <span class="token punctuation">]</span><span class="token key atrule">monitoring.ui.container.elasticsearch.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment" spellcheck="true">####----------日志相关----------#####</span><span class="token comment" spellcheck="true"># kibana日志文件存储路径，默认stdout</span><span class="token key atrule">logging.dest</span><span class="token punctuation">:</span> stdout<span class="token comment" spellcheck="true"># 此值为true时，禁止所有日志记录输出</span><span class="token comment" spellcheck="true"># 默认false</span><span class="token key atrule">logging.silent</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment" spellcheck="true"># 此值为true时，禁止除错误消息之外的所有日志记录输出</span><span class="token comment" spellcheck="true"># 默认false</span><span class="token key atrule">logging.quiet</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment" spellcheck="true"># 此值为true时，记录所有事件，包括系统使用信息和所有请求</span><span class="token comment" spellcheck="true"># 默认false</span><span class="token key atrule">logging.verbose</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment" spellcheck="true">#####----------其他----------#####</span><span class="token comment" spellcheck="true"># 系统和进程取样间隔，单位ms，最小值100ms</span><span class="token comment" spellcheck="true"># 默认5000ms</span><span class="token key atrule">ops.interval</span><span class="token punctuation">:</span> <span class="token number">5000</span><span class="token comment" spellcheck="true"># kibana web语言</span><span class="token comment" spellcheck="true"># 默认en</span><span class="token key atrule">i18n.locale</span><span class="token punctuation">:</span> <span class="token string">"zh-CN"</span></code></pre><h2 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@MuYu config]</span><span class="token comment" spellcheck="true"># cd ../  </span><span class="token namespace">[root@MuYu kibana]</span><span class="token comment" spellcheck="true"># vim startKibana.sh</span></code></pre><h3 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h3><pre class=" language-shell"><code class="language-shell">docker run -d \--name kibana-7.17.0 \--privileged=true \--restart=always \-p 5601:5601 \-e TZ="Asia/Shanghai" \-v /usr/local/docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml \kibana:7.17.0</code></pre><h3 id="脚本赋权"><a href="#脚本赋权" class="headerlink" title="脚本赋权"></a>脚本赋权</h3><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@MuYu kibana]</span><span class="token comment" spellcheck="true"># chmod -R 700 startKibana.sh </span></code></pre><h2 id="启动脚本-1"><a href="#启动脚本-1" class="headerlink" title="启动脚本"></a>启动脚本</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@MuYu kibana]</span><span class="token comment" spellcheck="true"># ./startKibana.sh</span></code></pre><h2 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h2><p><img src="/posts/9945e44a/clip_image002.gif" alt="图片"></p><p><img src="/posts/9945e44a/clip_image004.gif" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> kibana </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装redis</title>
      <link href="/posts/cbab506c.html"/>
      <url>/posts/cbab506c.html</url>
      
        <content type="html"><![CDATA[<p>docker安装redis</p><span id="more"></span><hr><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><pre class=" language-shell"><code class="language-shell">docker pull redis:6.2.6</code></pre><h2 id="docker配置redis"><a href="#docker配置redis" class="headerlink" title="docker配置redis"></a>docker配置redis</h2><p>使用前下载redis配置文件：<a href="https://uploader.shimo.im/f/GWTjtzHwGe3j3HD0.conf?fileGuid=rqhjpZwZC7Q4TzUJ">redis.conf</a></p><h2 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h2><pre class=" language-shell"><code class="language-shell"># 打开目录[root@MuYu /]# cd /usr/local/# 在其目录下创建 docker/redis[root@MuYu local]# mkdir -p docker/redis# 进入 docker/redis目录[root@MuYu local]# cd docker/redis/# 创建 redis的config和redis的data[root@MuYu redis]# mkdir config[root@MuYu redis]# mkdir data# 上传配置文件到 config目录下面[root@MuYu redis]# cd config/# 使用rz上传文件[root@MuYu config]# rz[root@MuYu config]# lltotal 92-rw-r--r-- 1 root root 93724 Oct  4  2021 redis.conf</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><h4 id="数据存储目录"><a href="#数据存储目录" class="headerlink" title="数据存储目录"></a>数据存储目录</h4><pre class=" language-shell"><code class="language-shell"># 修改配置文件dir ./                ->   dir /data</code></pre><p><img src="/posts/cbab506c/clip_image002.jpg" alt="图片"></p><h4 id="IP访问"><a href="#IP访问" class="headerlink" title="IP访问"></a>IP访问</h4><pre class=" language-shell"><code class="language-shell">bind 127.0.0.1 -::1   ->   bind 0.0.0.0</code></pre><p><img src="/posts/cbab506c/clip_image004.jpg" alt="图片"></p><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><pre class=" language-shell"><code class="language-shell"># 退出目录[root@MuYu config]# cd ..# 编辑sh脚本[root@MuYu redis]# vim startRedis.sh</code></pre><h3 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h3><pre class=" language-shell"><code class="language-shell">docker run  --privileged=true -p 6379:6379 --name redis --restart=always \ -v /usr/local/docker/redis/config/redis.conf:/etc/redis/redis.conf \ -v /usr/local/docker/redis/data:/data \ -d redis:6.2.6 redis-server /etc/redis/redis.conf</code></pre><p><img src="/posts/cbab506c/clip_image006.jpg" alt="图片"></p><pre class=" language-shell"><code class="language-shell"># 脚本设置可执行权限[root@MuYu redis]# chmod -R 777 startRedis.sh</code></pre><h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><pre class=" language-shell"><code class="language-shell"># 运行脚本[root@MuYu redis]# ./startRedis.sh 46bc734d227e3a8a1dada5588a2683c1a433fa021488a07cbad510c5410edee3# 查看docker当中运行的redis[root@MuYu redis]# docker psCONTAINER ID   IMAGE         COMMAND                  CREATED         STATUS         PORTS                                       NAMES46bc734d227e   redis:6.2.6   "docker-entrypoint.s…"   3 seconds ago   Up 2 seconds   0.0.0.0:6379->6379/tcp, :::6379->6379/tcp   redis</code></pre><h2 id="测试redis"><a href="#测试redis" class="headerlink" title="测试redis"></a>测试redis</h2><p><img src="/posts/cbab506c/clip_image008.gif" alt="图片"></p><h2 id="一键重置redis脚本"><a href="#一键重置redis脚本" class="headerlink" title="一键重置redis脚本"></a>一键重置redis脚本</h2><pre class=" language-shell"><code class="language-shell"># 创建sh脚本[root@MuYu redis]# vim resetRedis.sh# 编写sh脚本docker rm -f redis./startRedis.sh# 赋权[root@MuYu redis]# chmod -R 777 resetRedis.sh# 执行[root@MuYu redis]# ./resetRedis.sh redisbbb4e496f5b9b98fd61ce21fa4133c401e2a069f326894594adfd472632e13e3</code></pre>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装nacos</title>
      <link href="/posts/b2cc0cbb.html"/>
      <url>/posts/b2cc0cbb.html</url>
      
        <content type="html"><![CDATA[<p>docker安装nacos</p><span id="more"></span><hr><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><pre class=" language-json"><code class="language-json"># 打开目录 <span class="token punctuation">[</span>root@MuYu ~<span class="token punctuation">]</span># cd /usr/local/docker/# 创建nacos文件夹<span class="token punctuation">[</span>root@MuYu docker<span class="token punctuation">]</span># mkdir nacos# 打开目录<span class="token punctuation">[</span>root@MuYu docker<span class="token punctuation">]</span># cd nacos/# 创建文件夹 config<span class="token punctuation">[</span>root@MuYu docker<span class="token punctuation">]</span># mkdir config# 打开文件夹<span class="token punctuation">[</span>root@MuYu docker<span class="token punctuation">]</span># cd config/</code></pre><h3 id="上传配置文件"><a href="#上传配置文件" class="headerlink" title="上传配置文件"></a>上传配置文件</h3><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>root@MuYu docker<span class="token punctuation">]</span># </code></pre><p><a href="https://uploader.shimo.im/f/RWKJhIXk8JB444Hi.properties?fileGuid=lL9WvLiIYusV3jIJ">application.properties</a></p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@MuYu config]</span><span class="token comment" spellcheck="true"># vim application.properties</span></code></pre><p><img src="/posts/b2cc0cbb/clip_image002.jpg" alt="图片"></p><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 连接类型</span>spring<span class="token punctuation">.</span>datasource<span class="token punctuation">.</span>platform=mysqldb<span class="token punctuation">.</span>num=1<span class="token comment" spellcheck="true"># 连接地址</span>db<span class="token punctuation">.</span>url<span class="token punctuation">.</span>0=jdbc:mysql:<span class="token operator">/</span><span class="token operator">/</span>IP:端口<span class="token operator">/</span>数据库名称?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;serverTimezone=UTC<span class="token comment" spellcheck="true"># 数据库用户名</span>db<span class="token punctuation">.</span>user=root<span class="token comment" spellcheck="true"># 数据库密码</span>db<span class="token punctuation">.</span>password=Dongzl828<span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><p>在nacos需要连接的数据库当中，创建数据库 nacos_config 字符集类型为 utf8mb4</p><p><img src="/posts/b2cc0cbb/clip_image004.gif" alt="图片"></p><h2 id="SQL脚本"><a href="#SQL脚本" class="headerlink" title="SQL脚本"></a>SQL脚本</h2><p><a href="https://uploader.shimo.im/f/GAM432RosXNTiQcB.sql?fileGuid=ZzkLM4NQv4CyoeAQ">nacos-mysql.sql</a></p><h2 id="导入SQL脚本"><a href="#导入SQL脚本" class="headerlink" title="导入SQL脚本"></a>导入SQL脚本</h2><p><img src="/posts/b2cc0cbb/clip_image006.gif" alt="图片"></p><h2 id="导入完成"><a href="#导入完成" class="headerlink" title="导入完成"></a>导入完成</h2><p><img src="/posts/b2cc0cbb/clip_image008.gif" alt="图片"></p><h2 id="下载nacos镜像"><a href="#下载nacos镜像" class="headerlink" title="下载nacos镜像"></a>下载nacos镜像</h2><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>root@MuYu nacos<span class="token punctuation">]</span># docker pull nacos/nacos-server<span class="token operator">:</span>v2<span class="token number">.0</span>.<span class="token number">4</span></code></pre><h2 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h2><pre class=" language-json"><code class="language-json"># 根目录<span class="token punctuation">[</span>root@MuYu config<span class="token punctuation">]</span># cd ../# 编写脚本<span class="token punctuation">[</span>root@MuYu nacos<span class="token punctuation">]</span># vim startNacos.sh</code></pre><h2 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h2><pre class=" language-json"><code class="language-json">docker run -d \--privileged=<span class="token boolean">true</span> \--restart=always \--name nacos<span class="token number">-8848</span> \--network host \-e MODE=standalone \-e JVM_XMS=256m \-e JVM_XMX=256m \-e JVM_XMN=256m \-p <span class="token number">8848</span><span class="token operator">:</span><span class="token number">8848</span> \-p <span class="token number">9848</span><span class="token operator">:</span><span class="token number">9848</span> \-v /usr/local/docker/nacos/config/application.properties<span class="token operator">:</span>/home/nacos/conf/application.properties \nacos/nacos-server<span class="token operator">:</span>v2<span class="token number">.0</span>.<span class="token number">4</span></code></pre><h2 id="nacos-nacos-server-v2-0-4启动脚本"><a href="#nacos-nacos-server-v2-0-4启动脚本" class="headerlink" title="nacos/nacos-server:v2.0.4启动脚本"></a>nacos/nacos-server:v2.0.4启动脚本</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 权限</span><span class="token namespace">[root@MuYu nacos]</span><span class="token comment" spellcheck="true"># chmod -R 777 startNacos.sh</span><span class="token comment" spellcheck="true"># 启动</span><span class="token namespace">[root@MuYu nacos]</span><span class="token comment" spellcheck="true"># ./startNacos.sh</span></code></pre><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p><img src="/posts/b2cc0cbb/clip_image010.gif" alt="图片"></p><p>查看容器日志命令：</p><p>docker logs -f -t –tail -f 容器名|id</p>]]></content>
      
      
      <categories>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装portainer</title>
      <link href="/posts/c1fb5e41.html"/>
      <url>/posts/c1fb5e41.html</url>
      
        <content type="html"><![CDATA[<p>docker安装portainer</p><span id="more"></span><hr><h2 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h2><pre class=" language-shell"><code class="language-shell"># 进入目录[root@MuYu docker]# cd /usr/local/docker# 创建文件夹[root@MuYu docker]# mkdir -p portainer/data</code></pre><h2 id="汉化包"><a href="#汉化包" class="headerlink" title="汉化包"></a>汉化包</h2><pre class=" language-shell"><code class="language-shell"># 打开目录portainer[root@localhost docker]# cd portainer/# 下载汉化包(汉化包已失效,重新找汉化包)[root@MuYu portainer]# wget https://labx.me/dl/4nat/public.zip--2022-05-01 23:09:00--  https://labx.me/dl/4nat/public.zipResolving labx.me (labx.me)... 43.134.207.90Connecting to labx.me (labx.me)|43.134.207.90|:443... connected.HTTP request sent, awaiting response... 200 OKLength: 1932694 (1.8M) [application/zip]Saving to: ‘public.zip’100%[===============================================================================================================================================>] 1,932,694   1.72MB/s   in 1.1s   2022-05-01 23:09:03 (1.72 MB/s) - ‘public.zip’ saved [1932694/1932694]# 解压汉化包[root@MuYu portainer]# unzip public.zip</code></pre><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><pre class=" language-shell"><code class="language-shell">[root@MuYu portainer]# docker pull portainer/portainerUsing default tag: latestlatest: Pulling from portainer/portainer94cfa856b2b1: Pull complete 49d59ee0881a: Pull complete a2300fd28637: Pull complete Digest: sha256:fb45b43738646048a0a0cc74fcee2865b69efde857e710126084ee5de9be0f3fStatus: Downloaded newer image for portainer/portainer:latestdocker.io/portainer/portainer:latest</code></pre><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><pre class=" language-shell"><code class="language-shell"># 编写脚本[root@MuYu portainer]# vim startPortainer.sh# 编写脚本文件docker run -d \ --restart=always \ --name portainer \ -p 9000:9000 \ -v /var/run/docker.sock:/var/run/docker.sock \ -v /usr/local/docker/portainer/data:/data \ -v /usr/local/docker/portainer/public:/public \ portainer/portainer:latest# 赋值权限[root@MuYu portainer]# chmod -R 777 startPortainer.sh# 执行脚本[root@MuYu portainer]# ./startPortainer.sh 312623fe0b0192c645250f11e3603fd5f73f91393b22db3988a44fb93fb4dc89</code></pre><h2 id="可视化页面"><a href="#可视化页面" class="headerlink" title="可视化页面"></a>可视化页面</h2><h3 id="启动页面"><a href="#启动页面" class="headerlink" title="启动页面"></a>启动页面</h3><p><img src="/posts/c1fb5e41/clip_image002.gif" alt="图片"></p><h3 id="选择本地"><a href="#选择本地" class="headerlink" title="选择本地"></a>选择本地</h3><p><img src="/posts/c1fb5e41/clip_image004.gif" alt="图片"></p><h3 id="管理页面"><a href="#管理页面" class="headerlink" title="管理页面"></a>管理页面</h3><p><img src="/posts/c1fb5e41/clip_image006.gif" alt="图片"></p><h3 id="容器页面"><a href="#容器页面" class="headerlink" title="容器页面"></a>容器页面</h3><p><img src="/posts/c1fb5e41/clip_image008.gif" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> portainer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> portainer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装rabbitmq</title>
      <link href="/posts/8bf81981.html"/>
      <url>/posts/8bf81981.html</url>
      
        <content type="html"><![CDATA[<p>docker安装rabbitmq</p><span id="more"></span><hr><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 打开docker目录</span><span class="token punctuation">[</span>root@MuYu ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd /usr/local/docker/</span><span class="token comment" spellcheck="true"># 创建rabbitmq文件夹</span><span class="token punctuation">[</span>root@MuYu docker<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir rabbitmq</span><span class="token comment" spellcheck="true"># 打开rabbitmq文件夹</span><span class="token punctuation">[</span>root@MuYu docker<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd rabbitmq/</span></code></pre><h1 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 创建挂载目录</span><span class="token punctuation">[</span>root@MuYu rabbitmq<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir data</span></code></pre><h1 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h1><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 编写脚本</span><span class="token punctuation">[</span>root@MuYu rabbitmq<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vim startRabbitMq.sh</span></code></pre><h2 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h2><pre class=" language-shell"><code class="language-shell">docker run -d \-v /usr/local/docker/rabbitmq/data:/var/lib/rabbitmq \-p 5672:5672 -p 15672:15672 \--name rabbitmq \--privileged=true \--restart=always \--hostname host rabbitmq:3.9.13-management</code></pre><h2 id="脚本赋权"><a href="#脚本赋权" class="headerlink" title="脚本赋权"></a>脚本赋权</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>root@MuYu rabbitmq<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># chmod -R 700 startRabbitMq.sh</span></code></pre><h1 id="启动脚本-1"><a href="#启动脚本-1" class="headerlink" title="启动脚本"></a>启动脚本</h1><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@MuYu rabbitmq]</span><span class="token comment" spellcheck="true"># ./startRabbitMq.sh</span>Unable to find image <span class="token string">'rabbitmq:3.9.13-management'</span> locally3<span class="token punctuation">.</span>9<span class="token punctuation">.</span>13: Pulling <span class="token keyword">from</span> library<span class="token operator">/</span>rabbitmq4d32b49e2995: Pull complete 2108a18330ce: Pull complete 5c6af9d52173: Pull complete 0f88690b6c7c: Pull complete 9531e199a7d9: Pull complete efaba55aede6: Pull complete 41502a4f43bc: Pull complete 11b60d9df2ff: Pull complete ac0763dc13e5: Pull complete Digest: sha256:f5c8c7fd99e4c88527276df319556fdcb56e4d289614c5fefda5ee8d17c5ea89Status: Downloaded newer image <span class="token keyword">for</span> rabbitmq:3<span class="token punctuation">.</span>9<span class="token punctuation">.</span>13<span class="token operator">-</span>managementee7636e3d0baa7df4d5490c99616fef006bceedb08c46d7a2fea5650a6f01429</code></pre><p><img src="/posts/8bf81981/clip_image002.gif" alt="图片"></p><p>查看结果</p><p><img src="/posts/8bf81981/clip_image004.jpg" alt="图片"></p><p>用户名：guest 密码：guest</p><p><img src="/posts/8bf81981/clip_image006.gif" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装MongoDB</title>
      <link href="/posts/afdec5ed.html"/>
      <url>/posts/afdec5ed.html</url>
      
        <content type="html"><![CDATA[<p>docker安装MongoDB</p><span id="more"></span><hr><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 打开目录</span><span class="token namespace">[root@MuYu docker]</span><span class="token comment" spellcheck="true"># cd /usr/local/docker/</span><span class="token comment" spellcheck="true"># 创建 mongodb 文件夹</span><span class="token namespace">[root@MuYu docker]</span><span class="token comment" spellcheck="true"># mkdir mongodb</span><span class="token comment" spellcheck="true"># 打开 mongodb 文件夹</span><span class="token namespace">[root@MuYu docker]</span><span class="token comment" spellcheck="true"># cd mongodb/</span></code></pre><h1 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h1><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 数据挂在目录</span><span class="token namespace">[root@MuYu mongodb]</span><span class="token comment" spellcheck="true"># mkdir data</span></code></pre><h1 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h1><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 编写脚本</span><span class="token namespace">[root@MuYu mongodb]</span><span class="token comment" spellcheck="true"># vim startMongodb.sh</span></code></pre><h2 id="脚本内容"><a href="#脚本内容" class="headerlink" title="脚本内容"></a>脚本内容</h2><pre class=" language-shell"><code class="language-shell">docker run -d \--name mongodb-4.0.28 \--restart=always \-v /usr/local/docker/mongodb/data:/data/db \-p 27017:27017 mongo:4.0.28</code></pre><h2 id="脚本赋权"><a href="#脚本赋权" class="headerlink" title="脚本赋权"></a>脚本赋权</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@MuYu mongodb]</span><span class="token comment" spellcheck="true"># chmod -R 700 startMongodb.sh</span></code></pre><h1 id="启动脚本-1"><a href="#启动脚本-1" class="headerlink" title="启动脚本"></a>启动脚本</h1><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@MuYu mongodb]</span><span class="token comment" spellcheck="true"># ./startMongodb.sh </span>Unable to find image <span class="token string">'mongo:4.0.28'</span> locally4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>28: Pulling <span class="token keyword">from</span> library<span class="token operator">/</span>mongo58690f9b18fc: Pull complete b51569e7c507: Pull complete da8ef40b9eca: Pull complete fb15d46c38dc: Pull complete 8c5b4403b3cc: Pull complete a336ecd37208: Pull complete 12c733cd45a4: Pull complete 0500d06255ed: Pull complete 94973a063374: Pull complete 6311dd69caf7: Pull complete b40f828abab8: Pull complete 8379d13e9da6: Pull complete 12fa2eef4452: Pull complete Digest: sha256:d22f53e7aa6851a62f28bff4061176ceaa90ca8dfd025067dfb5db84a60eb0ccStatus: Downloaded newer image <span class="token keyword">for</span> mongo:4<span class="token punctuation">.</span>0<span class="token punctuation">.</span>28e557fd76e2b1dcada82ad2f63ed29bcddb5e748d56d5e98e5379f4d8384109ac</code></pre><h1 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h1><p><img src="/posts/afdec5ed/clip_image002.gif" alt="图片"></p><p><img src="/posts/afdec5ed/clip_image004.gif" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装MySQL</title>
      <link href="/posts/72c8f5cf.html"/>
      <url>/posts/72c8f5cf.html</url>
      
        <content type="html"><![CDATA[<p>docker安装MySQL</p><span id="more"></span><hr><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><pre class=" language-json"><code class="language-json"># 打开目录<span class="token punctuation">[</span>root@MuYu ~<span class="token punctuation">]</span># cd /usr/local/docker/# 创建文件夹<span class="token punctuation">[</span>root@MuYu docker<span class="token punctuation">]</span># mkdir mysql# 打开文件夹<span class="token punctuation">[</span>root@MuYu docker<span class="token punctuation">]</span># cd mysql/</code></pre><h1 id="创建挂载目录"><a href="#创建挂载目录" class="headerlink" title="创建挂载目录"></a>创建挂载目录</h1><pre class=" language-json"><code class="language-json"># 创建数据挂在目录<span class="token punctuation">[</span>root@MuYu mysql<span class="token punctuation">]</span># # 创建配置文件目录<span class="token punctuation">[</span>root@MuYu mysql<span class="token punctuation">]</span># mkdir config# 打开config<span class="token punctuation">[</span>root@MuYu mysql<span class="token punctuation">]</span># cd config/# 编写配置文件<span class="token punctuation">[</span>root@MuYu config<span class="token punctuation">]</span># vim my.cnf</code></pre><h1 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h1><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>client<span class="token punctuation">]</span># 端口号port=<span class="token number">3306</span><span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>no-beepdefault-character-set=utf8mb4<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span># 端口号port=<span class="token number">3306</span># 数据目录datadir=/var/lib/mysql# 新模式或表时将使用的默认字符集character-set-server=utf8mb4# 默认存储引擎default-storage-engine=INNODB# 将 SQL 模式设置为严格sql-mode=<span class="token string">"STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION"</span>#  最大连接数max_connections=<span class="token number">1024</span># 表缓存table_open_cache=<span class="token number">2000</span># 表内存tmp_table_size=16M# 线程缓存thread_cache_size=<span class="token number">10</span># myisam设置myisam_max_sort_file_size=100Gmyisam_sort_buffer_size=8Mkey_buffer_size=8Mread_buffer_size=<span class="token number">0</span>read_rnd_buffer_size=<span class="token number">0</span># innodb设置innodb_flush_log_at_trx_commit=<span class="token number">1</span>innodb_log_buffer_size=1Minnodb_buffer_pool_size=8Minnodb_log_file_size=48Minnodb_thread_concurrency=<span class="token number">33</span>innodb_autoextend_increment=<span class="token number">64</span>innodb_buffer_pool_instances=<span class="token number">8</span>innodb_concurrency_tickets=<span class="token number">5000</span>innodb_old_blocks_time=<span class="token number">1000</span>innodb_open_files=<span class="token number">300</span>innodb_stats_on_metadata=<span class="token number">0</span>innodb_file_per_table=<span class="token number">1</span>innodb_checksum_algorithm=<span class="token number">0</span># 其他设置back_log=<span class="token number">80</span>flush_time=<span class="token number">0</span>join_buffer_size=256Kmax_allowed_packet=4Mmax_connect_errors=<span class="token number">100</span>open_files_limit=<span class="token number">4161</span>sort_buffer_size=256Ktable_definition_cache=<span class="token number">1400</span>binlog_row_event_max_size=8Ksync_master_info=<span class="token number">10000</span>sync_relay_log=<span class="token number">10000</span>sync_relay_log_info=<span class="token number">10000</span></code></pre><p>下载镜像</p><pre class=" language-powershell"><code class="language-powershell"><span class="token namespace">[root@MuYu mysql]</span><span class="token comment" spellcheck="true"># docker pull mysql:5.7</span></code></pre><h1 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h1><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 打开目录</span><span class="token namespace">[root@MuYu config]</span><span class="token comment" spellcheck="true"># cd /usr/local/docker/mysql/</span><span class="token comment" spellcheck="true"># 编写脚本</span><span class="token namespace">[root@MuYu mysql]</span><span class="token comment" spellcheck="true"># vim startMysql.sh</span><span class="token comment" spellcheck="true"># 脚本内容</span>docker run <span class="token operator">-</span>d \<span class="token operator">--</span>privileged=true \<span class="token operator">--</span>name mysql57<span class="token operator">-</span>3306 \<span class="token operator">-</span>p 3306:3306 \<span class="token operator">--</span>restart=always \<span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span><span class="token keyword">data</span>:<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>lib<span class="token operator">/</span>mysql \<span class="token operator">-</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>docker<span class="token operator">/</span>mysql<span class="token operator">/</span>config<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf:<span class="token operator">/</span>etc<span class="token operator">/</span>mysql<span class="token operator">/</span>my<span class="token punctuation">.</span>cnf \<span class="token operator">-</span>e MYSQL_ROOT_PASSWORD=Dongzl828<span class="token punctuation">.</span><span class="token punctuation">.</span> mysql:5<span class="token punctuation">.</span>7 \<span class="token comment" spellcheck="true"># 权限赋予</span><span class="token namespace">[root@MuYu mysql]</span><span class="token comment" spellcheck="true"># chmod -R 777 startMysql.sh</span></code></pre><h1 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h1><pre class=" language-json"><code class="language-json"># 执行脚本<span class="token punctuation">[</span>root@MuYu mysql<span class="token punctuation">]</span># ./startMysql.sh</code></pre><h1 id="查看结果"><a href="#查看结果" class="headerlink" title="查看结果"></a>查看结果</h1><p><img src="/posts/72c8f5cf/clip_image002.gif" alt="图片"></p><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true"># 进入容器</span><span class="token namespace">[root@MuYu mysql]</span><span class="token comment" spellcheck="true"># docker exec -it mysql57-3306 /bin/bash</span><span class="token comment" spellcheck="true"># 连接MySQL</span>root@4ff92e46f363:<span class="token operator">/</span><span class="token comment" spellcheck="true"># mysql -uroot -pDongzl828..</span>mysql: <span class="token namespace">[Warning]</span> <span class="token keyword">Using</span> a password on the command line interface can be insecure<span class="token punctuation">.</span>Welcome to the MySQL monitor<span class="token punctuation">.</span>  Commands <span class="token keyword">end</span> with <span class="token punctuation">;</span> or \g<span class="token punctuation">.</span>Your MySQL connection id is 2Server version: 5<span class="token punctuation">.</span>7<span class="token punctuation">.</span>38 MySQL Community Server <span class="token punctuation">(</span>GPL<span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2000<span class="token punctuation">,</span> 2022<span class="token punctuation">,</span> Oracle and<span class="token operator">/</span>or its affiliates<span class="token punctuation">.</span>Oracle is a registered trademark of Oracle Corporation and<span class="token operator">/</span>or itsaffiliates<span class="token punctuation">.</span> Other names may be trademarks of their respectiveowners<span class="token punctuation">.</span><span class="token function">Type</span> <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help<span class="token punctuation">.</span> <span class="token function">Type</span> <span class="token string">'\c'</span> to clear the current input statement<span class="token punctuation">.</span><span class="token comment" spellcheck="true"># 查询数据库</span>mysql> show databases<span class="token punctuation">;</span><span class="token operator">+</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">|</span> Database           <span class="token punctuation">|</span><span class="token operator">+</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span><span class="token operator">+</span><span class="token punctuation">|</span> information_schema <span class="token punctuation">|</span><span class="token punctuation">|</span> mysql              <span class="token punctuation">|</span><span class="token punctuation">|</span> performance_schema <span class="token punctuation">|</span><span class="token punctuation">|</span> sys                <span class="token punctuation">|</span><span class="token operator">+</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">--</span>-<span class="token operator">-</span><span class="token operator">+</span>4 rows in <span class="token function">set</span> <span class="token punctuation">(</span>0<span class="token punctuation">.</span>01 sec<span class="token punctuation">)</span></code></pre><p><img src="/posts/72c8f5cf/clip_image004.gif" alt="图片"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装gitlab</title>
      <link href="/posts/8dbcf254.html"/>
      <url>/posts/8dbcf254.html</url>
      
        <content type="html"><![CDATA[<p>docker安装gitlab</p><span id="more"></span><hr><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><h4 id="1-先建gitlab文件夹"><a href="#1-先建gitlab文件夹" class="headerlink" title="1.先建gitlab文件夹"></a>1.先建gitlab文件夹</h4><pre class=" language-plain"><code class="language-plain">cd /usr/local/dockermkdir gitlab</code></pre><h4 id="2-docker-安装配置阿里云镜像源"><a href="#2-docker-安装配置阿里云镜像源" class="headerlink" title="2.docker 安装配置阿里云镜像源"></a>2.docker 安装配置阿里云镜像源</h4><pre class=" language-plain"><code class="language-plain">1. sudo mkdir -p /etc/docker2. sudo tee /etc/docker/daemon.json <<-'EOF'&#123;  "registry-mirrors": ["https://yxzrazem.mirror.aliyuncs.com"]&#125;EOF3.sudo systemctl daemon-reload4.sudo systemctl restart docker</code></pre><h4 id="3-gitlab-镜像拉取"><a href="#3-gitlab-镜像拉取" class="headerlink" title="3.gitlab 镜像拉取"></a>3.gitlab 镜像拉取</h4><pre class=" language-plain"><code class="language-plain"># gitlab-ce为稳定版本，后面不填写版本则默认pull最新latest版本$ docker pull gitlab/gitlab-ce </code></pre><p>4.提前建好docker文件夹 为了挂载镜像路径</p><pre class=" language-plain"><code class="language-plain">cd /usr/local/docker/gitlabmkdir configmkdir logsmkdir data</code></pre><h4 id="5-编写启动配置文件"><a href="#5-编写启动配置文件" class="headerlink" title="5.编写启动配置文件"></a>5.编写启动配置文件</h4><pre class=" language-plain"><code class="language-plain">vim startGitlab.sh</code></pre><p>配置文件内容</p><pre class=" language-plain"><code class="language-plain">docker run -d \-p 443:443 \-p 9001:80 \-p 9002:22 \--name gitlab \--restart always -v /usr/local/docker/gitlab/config:/etc/gitlab \-v /usr/local/docker/gitlab/logs:/var/log/gitlab \-v /usr/local/docker/gitlab/data:/var/opt/gitlab \gitlab/gitlab-ce</code></pre><h4 id="6-给配置文件赋权"><a href="#6-给配置文件赋权" class="headerlink" title="6.给配置文件赋权"></a>6.给配置文件赋权</h4><pre class=" language-plain"><code class="language-plain">chmod -R 777 startGitlab.sh</code></pre><p>启动gitlab</p><pre class=" language-plain"><code class="language-plain">./startGitlab.sh</code></pre><h4 id="7-修改gitlab-rb-文件"><a href="#7-修改gitlab-rb-文件" class="headerlink" title="7.修改gitlab.rb 文件"></a>7.修改gitlab.rb 文件</h4><pre class=" language-plain"><code class="language-plain">vim /usr/local/docker/gitlab/config/gitlab.rb# 配置http协议所使用的访问地址,不加端口号默认为80external_url 'http://192.168.xxx.xxx'# 配置ssh协议所使用的访问地址和端口gitlab_rails['gitlab_ssh_host'] = '192.168.xxx.xxx'gitlab_rails['gitlab_shell_ssh_port'] = 9002 # 此端口是run时22端口映射的222端口</code></pre><p>8.查看已开启的端口</p><pre class=" language-plain"><code class="language-plain">firewall-cmd --list-ports</code></pre><p>查看防火墙状态</p><pre class=" language-plain"><code class="language-plain">firewall-cmd --state</code></pre><p>开启防火墙:</p><pre class=" language-plain"><code class="language-plain">[root@localhost gitlab]# systemctl start firewalld</code></pre><p>在防火墙中对外开启此端口:开启9001和9002端口</p><pre class=" language-plain"><code class="language-plain">[root@localhost gitlab]# firewall-cmd --zone=public --add-port=9001/tcp --permanent[root@localhost gitlab]# firewall-cmd --reload</code></pre><p>重新启动gitlab加载配置</p><pre class=" language-plain"><code class="language-plain">docker restart gitlab</code></pre><p>此时项目的仓库地址就变了。如果ssh端口地址不是默认的22，就会加上ssh:// 协议头</p><p> 打开浏览器输入ip地址(因为我的gitlab端口不是80，所以浏览器url要输入端口号，如果端口号不是80，则打开为：ip:端口号)</p><pre class=" language-plain"><code class="language-plain">http://192.168.227.xxx:9001/</code></pre><p>登录gitlab修改密码</p><p>初始密码位置</p><pre class=" language-plain"><code class="language-plain">vim /usr/local/docker/gitlab/config/initial_root_password</code></pre><p>接下来就可以创建项目了</p><h4 id="没有卸载干净的情况"><a href="#没有卸载干净的情况" class="headerlink" title="没有卸载干净的情况"></a>没有卸载干净的情况</h4><p>由于汉化版本都低于英文版本，为了不产生不必要的麻烦就要先下载汉化包，查看汉化包的版本号，根据汉化包的版本号来安装指定版本的GitLab。若你安装的版本是最新的比汉化包高太多，那么你汉化时需要忽略数百到上千次的文件。若你是刚装的GitLab，可以考虑重新卸载后安装和汉化包版本一致的版本。下面是如何彻底卸载GitLab。</p><p>1、停止gitlab</p><pre class=" language-plain"><code class="language-plain">docker stop gitlab</code></pre><p>2、卸载gitlab（注意这里写的是gitlab-ce）</p><pre class=" language-plain"><code class="language-plain">rpm -e gitlab-ce</code></pre><p>3、查看gitlab进程</p><pre class=" language-plain"><code class="language-plain">ps aux | grep gitlab</code></pre><p>4、杀掉第一个进程（就是带有好多…的进程） kill -9 进程号</p><p>杀掉后，在ps aux | grep gitlab确认一遍，还有没有gitlab的进程。若还存在，可以把它的主要组件的进程也杀一边。</p><pre class=" language-plain"><code class="language-plain">run: alertmanager: (pid 100019) 13376s; run: log: (pid 82025) 86211srun: gitaly: (pid 100032) 13376s; run: log: (pid 82041) 86211srun: gitlab-monitor: (pid 100047) 13375s; run: log: (pid 82047) 86211srun: gitlab-workhorse: (pid 100054) 13375s; run: log: (pid 82031) 86211srun: logrotate: (pid 121160) 2574s; run: log: (pid 82039) 86211srun: nginx: (pid 100070) 13374s; run: log: (pid 82037) 86211srun: node-exporter: (pid 100077) 13374s; run: log: (pid 82027) 86211srun: postgres-exporter: (pid 100082) 13373s; run: log: (pid 82023) 86211srun: postgresql: (pid 100097) 13372s; run: log: (pid 82035) 86211srun: prometheus: (pid 100100) 13372s; run: log: (pid 82021) 86211srun: redis: (pid 100114) 13372s; run: log: (pid 82033) 86211srun: redis-exporter: (pid 100118) 13371s; run: log: (pid 82043) 86211srun: sidekiq: (pid 100124) 13370s; run: log: (pid 82029) 86211srun: unicorn: (pid 100136) 13369s; run: log: (pid 82045) 86211s</code></pre><p>日志的进程不用管。</p><p>5、删除所有包含gitlab文件</p><pre class=" language-plain"><code class="language-plain">find / -name gitlab | xargs rm -rf</code></pre><p>当然若你没有全杀权限。那么可以可以把这三个目录给干掉也可以：</p><pre class=" language-plain"><code class="language-plain">rm -rf  /opt/gitlabrm -rf  /etc/gitlabrm -rf  /var/log/gitlab</code></pre>]]></content>
      
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机体系结构</title>
      <link href="/posts/cae4c11d.html"/>
      <url>/posts/cae4c11d.html</url>
      
        <content type="html"><![CDATA[<p>计算机体系结构</p><span id="more"></span><hr><p><strong>冯.诺依曼体系结构</strong></p><p>从Linux 服务器开发视角来看计算机，都是符合冯.诺依曼体系结构的。</p><p>冯.诺依曼结构:总线 接口 南桥 北桥</p><p>数学家冯·诺依曼提出了计算机制造的<strong>三个基本原则</strong>（采用二进制、程序存储、顺序执行），以及计算机的<strong>五个组成部分</strong>（运算器、控制器、存储器、输入设备、输出设备），这套理论被称为<strong>冯·诺依曼体系结构</strong>，根据这一原理制造的计算机被称为冯·诺依曼结构计算机。</p><p>灵魂就是将程序<strong>从硬件实现转换为软件实现</strong>（存储程序控制原理）</p><p><strong>计算机的基本工作原理</strong>就是：存储程序控制原理！</p><p><img src="/posts/cae4c11d/%E5%86%AF.%E8%AF%BA%E4%BE%9D%E6%9B%BC%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.jpg" alt="冯.诺依曼体系结构"></p><p><strong>CPU位数怎么确定？</strong></p><p>内部寄存器到运算单元之间总线位数来确定</p><p><strong>如何确定设备位宽？</strong></p><p>根据数据总线</p><p><strong>总线频率 与 CPU自身频率？</strong></p><p>这是2个不同的概念。总线频率一般指FSB频率，相当于CPU向外部存取数据时的数据传输速率</p><p>CPU自身频率则表示CPU运算时电路产生的频率</p><p><strong>计算机总线 对比 OSI模型</strong></p><p>计算机总线是一个只有物理层、网络层和上三成的网络</p><p><strong>主机 如何 寻找设备？</strong></p><p>每个IO设备在启动时都要向内存中映射一个或者多个地址，这个地址有8bit长，又称作IO端口。针对这个地址的数据，统统被北桥芯片重定向到IO总线上实际的设备上。</p><p><strong>计算机详细体系结构</strong></p><p><img src="/posts/cae4c11d/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%A6%E7%BB%86%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="计算机详细体系结构"></p><p><strong>三大总线（并行通信）：</strong></p><p>地址总线：传输地址信号，通过地址信号找到要操作的寄存器、内存单元等</p><p>控制总线：传输控制信号，比如通过地址总线找到内存的某位置了，接下来到底是进行读还是写，就由控制总线发控制信号决定</p><p>数据总线：传输数据信号，比如通过地址找到内存的某个位置了，控制总线发出写的控制信号，希望对其写数据，那么写数据时，数据信号就是在数据总线上传输的</p><p><strong>IO总线</strong></p><p><img src="/posts/cae4c11d/IO%E6%80%BB%E7%BA%BF.png" alt="IO总线"></p><p><strong>什么是接口？</strong></p><p>接口的概念有点抽象，因为它最准确地指的是一个标准（一组数据交换规则/协议）</p><p><strong>IO桥这里指南桥 北桥</strong></p><p>​    <strong>北桥芯片作用</strong></p><p>　　北桥芯片负责与CPU的联系并控制内存AGP数据在北桥内部传输，提供对CPU的类型和主频、系统的前端总线频率、内存的类型和最大容量、AGP插槽、ECC纠错等支持，整合型芯片组的北桥芯片还集成了显示核心。北桥起到的作用非常明显，在电脑中起着主导的作用，所以人们习惯的称为主桥（Host Bridge）。</p><p>​    <strong>北桥芯片特点</strong></p><p>　　北桥芯片就是主板上离CPU最近的芯片，这主要是考虑到北桥芯片与处理器之间的通信最密切，为了提高通信性能而缩短传输距离。因为北桥芯片的数据处理量非常大，发热量也越来越大，所以现在的北桥芯片都覆盖着散热片用来加强北桥芯片的散热，有些主板的北桥芯片还会配合风扇进行散热。</p><p>​    <strong>南桥芯片作用</strong></p><p>　　南桥芯片负责I/O总线之间的通信，如PCI总线、USB、LAN、ATA、SATA、音频控制器、键盘控制器、实时时钟控制器、高级电源管理等，这些技术一般相对来说比较稳定，所以不同芯片组中可能南桥芯片是一样的，不同的只是北桥芯片。所以现在主板芯片组中北桥芯片的数量要远远多于南桥芯片。</p><p><strong>可以不用IO桥吗</strong></p><p>可以，如果没有IO桥，所有的“外设IO接口”都是直接挂接在三大高速总线上的，但是随着发展，挂接的外部设备越来越多，直接挂接在总线上，太多了，管理是一个麻烦，慢慢的才有了IO桥这个管理者。</p><p><strong>IO桥的好处</strong></p><p>设备的IO接口直接挂接在IO桥上，IO桥有效的管理着众多的外设IO接口，IO桥里面会有相应的控制芯片，控制IO桥的工作。</p><p><strong>并不是计算机都需要IO桥</strong></p><p>IO桥是PC机特有的，并不是所有的计算机都有的，比如我们后面讲的ARM的开发板，就没有明显的IO桥这个东西。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机体系结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机体系结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摩斯密码</title>
      <link href="/posts/64502b93.html"/>
      <url>/posts/64502b93.html</url>
      
        <content type="html"><![CDATA[<p>摩斯密码</p><span id="more"></span><hr><table><thead><tr><th>字符</th><th>电码符号</th><th>字符</th><th>电码符号</th><th>字符</th><th>电码符号</th></tr></thead><tbody><tr><td><strong>A</strong></td><td><strong>.-</strong></td><td><strong>N</strong></td><td><strong>-.</strong></td><td><strong>1</strong></td><td><strong>.—-</strong></td></tr><tr><td><strong>B</strong></td><td><strong>-…</strong></td><td><strong>O</strong></td><td><strong>—</strong></td><td><strong>2</strong></td><td><strong>..—</strong></td></tr><tr><td><strong>C</strong></td><td><strong>-.-.</strong></td><td><strong>P</strong></td><td><strong>.–.</strong></td><td><strong>3</strong></td><td><strong>…–</strong></td></tr><tr><td><strong>D</strong></td><td><strong>-..</strong></td><td><strong>Q</strong></td><td><strong>–.-</strong></td><td><strong>4</strong></td><td><strong>….-</strong></td></tr><tr><td><strong>E</strong></td><td><strong>.</strong></td><td><strong>R</strong></td><td><strong>.-.</strong></td><td><strong>5</strong></td><td><strong>…..</strong></td></tr><tr><td><strong>F</strong></td><td><strong>..-.</strong></td><td><strong>S</strong></td><td><strong>…</strong></td><td><strong>6</strong></td><td><strong>-….</strong></td></tr><tr><td><strong>G</strong></td><td><strong>–.</strong></td><td><strong>T</strong></td><td><strong>-</strong></td><td><strong>7</strong></td><td><strong>–…</strong></td></tr><tr><td><strong>H</strong></td><td><strong>….</strong></td><td><strong>U</strong></td><td><strong>..-</strong></td><td><strong>8</strong></td><td><strong>—..</strong></td></tr><tr><td><strong>I</strong></td><td><strong>..</strong></td><td><strong>V</strong></td><td><strong>…-</strong></td><td><strong>9</strong></td><td><strong>—-.</strong></td></tr><tr><td><strong>J</strong></td><td><strong>.—</strong></td><td><strong>W</strong></td><td><strong>.–</strong></td><td><strong>0</strong></td><td><strong>—–</strong></td></tr><tr><td><strong>K</strong></td><td><strong>-.-</strong></td><td><strong>X</strong></td><td><strong>-..-</strong></td><td><strong>?</strong></td><td><strong>..–..</strong></td></tr><tr><td><strong>L</strong></td><td><strong>.-..</strong></td><td><strong>Y</strong></td><td><strong>-.–</strong></td><td><strong>/</strong></td><td><strong>-..-.</strong></td></tr><tr><td><strong>M</strong></td><td><strong>–</strong></td><td><strong>Z</strong></td><td><strong>–..</strong></td><td><strong>()</strong></td><td><strong>-.–.-</strong></td></tr><tr><td></td><td></td><td></td><td></td><td><strong>-</strong></td><td><strong>-….-</strong></td></tr><tr><td></td><td></td><td></td><td></td><td><strong>.</strong></td><td><strong>.-.-.-</strong></td></tr><tr><td><strong>自定义密码</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>1小时</strong></td><td><strong>-</strong></td><td><strong>半小时</strong></td><td><strong>_</strong></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 摩斯密码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摩斯密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git笔记</title>
      <link href="/posts/d9283bc6.html"/>
      <url>/posts/d9283bc6.html</url>
      
        <content type="html"><![CDATA[<p>git笔记</p><span id="more"></span><hr><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p><img src="/posts/d9283bc6/clip_image002.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image004.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image006.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image008.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image010.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image012.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image014.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image016.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image018.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image020.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image022.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image024.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image026.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image028.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image030.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image032.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image034.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image036.gif" alt="图片"></p><p>表示安装成功</p><h4 id="git获取SSH公钥"><a href="#git获取SSH公钥" class="headerlink" title="git获取SSH公钥"></a>git获取SSH公钥</h4><p>运行git Bash<br>输入git  没报错表示安装成功<br>git配置ssh:</p><pre><code>git config --global user.name &quot;用户名&quot;</code></pre><p><img src="/posts/d9283bc6/clip_image038.gif" alt="图片"></p><pre><code>git config --global user.email &quot;邮箱&quot;</code></pre><p><img src="/posts/d9283bc6/clip_image040.gif" alt="图片"></p><pre><code>ssh-keygen -t rsa -C &quot;邮箱&quot;连续3回 回车键cd到 ~/.ssh  ls ,这回会出现 id_dsa或者id_rsa两个文件，.pub文件是我们的公钥，另一个是私钥 </code></pre><h4 id="Idea配置git"><a href="#Idea配置git" class="headerlink" title="Idea配置git"></a>Idea配置git</h4><p><img src="/posts/d9283bc6/clip_image042.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image044.gif" alt="图片"></p><p><img src="/posts/d9283bc6/clip_image046.gif" alt="图片"></p><p>至此 配置成功！</p><h3 id="git命令大全（整理成表格，方便查阅）"><a href="#git命令大全（整理成表格，方便查阅）" class="headerlink" title="git命令大全（整理成表格，方便查阅）"></a>git命令大全（整理成表格，方便查阅）</h3><h4 id="创建仓库命令"><a href="#创建仓库命令" class="headerlink" title="创建仓库命令"></a>创建仓库命令</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git init</td><td>初始化仓库，在当前目录新建一个Git代码库，基本上是创建一个具有objects，refs/head，refs/tags和模板文件的.git目录。</td></tr><tr><td>git clone[url]</td><td>拷贝一份远程仓库，也就是下载一个项目和它的整个代码历史。</td></tr></tbody></table><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git config –list</td><td>显示当前的Git配置</td></tr><tr><td>git config -e [–global]</td><td>编辑Git配置文件。</td></tr><tr><td>git config [–global] user.name “[name]” git config [–global] user.email “[email address]”</td><td>设置提交代码时的用户信息</td></tr></tbody></table><h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加 / 删除文件"></a>增加 / 删除文件</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git add [file1] [file2] …</td><td>添加指定文件到暂存区</td></tr><tr><td>git add [dir]</td><td>添加指定目录到暂存区，包括子目录</td></tr><tr><td>git add .</td><td>添加当前目录的所有文件到暂存区</td></tr><tr><td>git add -p</td><td>添加每个变化前，都会要求确认 对于同一个文件的多处变化，可以实现分次提交</td></tr><tr><td>git rm [file1] [file2] …</td><td>删除工作区文件，并且将这次删除放入暂存区</td></tr><tr><td>git rm –cached [file]</td><td>停止追踪指定文件，但该文件会保留在工作区</td></tr><tr><td>git mv [file-original] [file-renamed]</td><td>改名文件，并且将这个改名放入暂存区</td></tr></tbody></table><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git commit -m [message]</td><td>提交暂存区到仓库区</td></tr><tr><td>git commit [file1] [file2] … -m [message]</td><td>提交暂存区的指定文件到仓库区</td></tr><tr><td>git commit -a</td><td>提交工作区自上次commit之后的变化，直接到仓库区</td></tr><tr><td>git commit -v</td><td>提交时显示所有diff信息</td></tr><tr><td>git commit –amend -m [message]</td><td>使用一次新的commit，替代上一次提交 如果代码没有任何新变化，则用来改写上一次commit的提交信息</td></tr><tr><td>git commit –amend [file1] [file2] …</td><td>重做上一次commit，并包括指定文件的新变化</td></tr></tbody></table><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git branch</td><td>列出所有本地分支</td></tr><tr><td>git branch -r</td><td>列出所有远程分支</td></tr><tr><td>git branch -a</td><td>列出所有本地分支和远程分支</td></tr><tr><td>git branch [branch-name]</td><td>新建一个分支，但依然停留在当前分支</td></tr><tr><td>git checkout -b [branch]</td><td>新建一个分支，并切换到该分支</td></tr><tr><td>git branch [branch] [commit]</td><td>新建一个分支，指向指定commit</td></tr><tr><td>git branch –track [branch] [remote-branch]</td><td>新建一个分支，与指定的远程分支建立追踪关系</td></tr><tr><td>git push -u origin [branch]</td><td>一旦分支已经被创建并有一些提交，可以将该分支推送到远程存储库中。-u 参数告诉 Git 在远程存储库中设置上游（默认）分支。第一次推送分支时，它会自动创建同名远程分支</td></tr><tr><td>git checkout [branch-name]</td><td>切换到指定分支，并更新工作区</td></tr><tr><td>git checkout -</td><td>切换到上一个分支</td></tr><tr><td>git branch –set-upstream [branch] [remote-branch]</td><td>建立追踪关系，在现有分支与指定的远程分支之间</td></tr><tr><td>git merge [branch]</td><td>合并指定分支到当前分支</td></tr><tr><td>git cherry-pick [commit]</td><td>选择一个commit，合并进当前分支</td></tr><tr><td>git branch -d [branch-name]</td><td>删除分支</td></tr><tr><td>git push origin –delete [branch-name] 或 git branch -dr [remote/branch]</td><td>删除远程分支</td></tr></tbody></table><h4 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git tag</td><td>列出所有tag</td></tr><tr><td>git tag [tag]</td><td>新建一个tag在当前commit</td></tr><tr><td>git tag [tag] [commit]</td><td>新建一个tag在指定commit</td></tr><tr><td>git tag -d [tag]</td><td>删除本地tag</td></tr><tr><td>git push origin :refs/tags/[tagName]</td><td>删除远程tag</td></tr><tr><td>git show [tag]</td><td>查看tag信息</td></tr><tr><td>git push [remote] [tag]</td><td>提交指定tag</td></tr><tr><td>git push [remote] –tags</td><td>提交所有tag</td></tr><tr><td>git checkout -b [branch] [tag]</td><td>新建一个分支，指向某个tag</td></tr></tbody></table><h4 id="查看信息和历史"><a href="#查看信息和历史" class="headerlink" title="查看信息和历史"></a>查看信息和历史</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git status</td><td>显示有变更的文件</td></tr><tr><td>git log</td><td>显示当前分支的版本历史</td></tr><tr><td>git log –stat</td><td>显示commit历史，以及每次commit发生变更的文件</td></tr><tr><td>git log -S [keyword]</td><td>搜索提交历史，根据关键词</td></tr><tr><td>git log [tag] HEAD –pretty=format:%s</td><td>显示某个commit之后的所有变动，每个commit占据一行</td></tr><tr><td>git log [tag] HEAD –grep feature</td><td>显示某个commit之后的所有变动，其”提交说明”必须符合搜索条件</td></tr><tr><td>git log –follow [file] 或 git whatchanged [file]</td><td>显示某个文件的版本历史，包括文件改名</td></tr><tr><td>git log -p [file]</td><td>显示指定文件相关的每一次diff</td></tr><tr><td>git log -5 –pretty –oneline</td><td>显示过去5次提交</td></tr><tr><td>git shortlog -sn</td><td>显示所有提交过的用户，按提交次数排序</td></tr><tr><td>git blame [file]</td><td>显示指定文件是什么人在什么时间修改过</td></tr><tr><td>git diff</td><td>显示暂存区和工作区的差异</td></tr><tr><td>git diff –cached [file]</td><td>显示暂存区和上一个commit的差异</td></tr><tr><td>git diff HEAD</td><td>显示工作区与当前分支最新commit之间的差异</td></tr><tr><td>git diff [first-branch]…[second-branch]</td><td>显示两次提交之间的差异</td></tr><tr><td>git diff –shortstat “@{0 day ago}”</td><td>显示今天你写了多少行代码</td></tr><tr><td>git show [commit]</td><td>显示某次提交的元数据和内容变化</td></tr><tr><td>git show –name-only [commit]</td><td>显示某次提交发生变化的文件</td></tr><tr><td>git show [commit]:[filename]</td><td>显示某次提交时，某个文件的内容</td></tr><tr><td>git reflog</td><td>显示当前分支的最近几次提交</td></tr></tbody></table><h4 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git fetch [remote]</td><td>下载远程仓库的所有变动（远程新增或删除分支都能显示）</td></tr><tr><td>git remote -v</td><td>显示所有远程仓库</td></tr><tr><td>git config [–global] user.name “[name]” git config [–global] user.email “[email address]”</td><td>设置提交代码时的用户信息</td></tr><tr><td>git remote show [remote]</td><td>显示某个远程仓库的信息</td></tr><tr><td>git remote add [shortname] [url]</td><td>增加一个新的远程仓库，并命名</td></tr><tr><td>git pull  origin [remote-branch]</td><td>取回远程仓库的变化，并与本地分支合并</td></tr><tr><td>git pull –rebase origin  [remote-branch] [branch]</td><td>使用rebase的方式 , 取回远程仓库的变化，并与指定本地分支合并</td></tr><tr><td>git push [remote] [branch]</td><td>上传本地指定分支到远程仓库</td></tr><tr><td>git push [remote] –force</td><td>强行推送当前分支到远程仓库，即使有冲突</td></tr><tr><td>git push [remote] –all</td><td>推送所有分支到远程仓库</td></tr></tbody></table><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git checkout [file]</td><td>恢复暂存区的指定文件到工作区</td></tr><tr><td>git checkout [commit] [file]</td><td>恢复某个commit的指定文件到暂存区和工作区</td></tr><tr><td>git checkout .</td><td>恢复暂存区的所有文件到工作区</td></tr><tr><td>git reset [file]</td><td>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</td></tr><tr><td>git reset –hard</td><td>重置暂存区与工作区，与上一次commit保持一致</td></tr><tr><td>git reset [commit]</td><td>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</td></tr><tr><td>git reset –hard [commit]</td><td>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</td></tr><tr><td>git reset –keep [commit]</td><td>重置当前HEAD为指定commit，但保持暂存区和工作区不变</td></tr><tr><td>git revert [commit]</td><td>新建一个commit，用来撤销指定commit 后者的所有变化都将被前者抵消，并且应用到当前分支</td></tr><tr><td>git stash</td><td>暂时将未提交的变化移除，稍后再移入</td></tr><tr><td>git stash pop</td><td>暂时将未提交的变化移除，稍后再移入</td></tr></tbody></table><h4 id="贮藏"><a href="#贮藏" class="headerlink" title="贮藏"></a>贮藏</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git stash save “save message”</td><td>执行存储时，添加备注，方便查找，只有git stash 也要可以的，但查找时不方便识别。</td></tr><tr><td>git stash list</td><td>查看stash了哪些存储</td></tr><tr><td>git stash show</td><td>显示做了哪些改动，默认show第一个存储,如果要显示其他存贮，后面加stash@{$num}，比如第二个 git stash show stash@{1}</td></tr><tr><td>git stash show -p</td><td>显示第一个存储的改动，如果想显示其他存存储，命令：git stash show  stash@{$num}  -p ，比如第二个：git stash show  stash@{1}  -p</td></tr><tr><td>git stash apply</td><td>应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}</td></tr><tr><td>git stash pop</td><td>命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}</td></tr><tr><td>git stash drop stash@{$num}</td><td>丢弃stash@{$num}存储，从列表中删除这个存储</td></tr><tr><td>git stash clear</td><td>删除所有缓存的stash</td></tr></tbody></table><pre><code>有时也可通过这种方法实现避免或解决冲突，当你修改的内容是最新的，但是你需要pull下来的代码是需要被替换的，你pull的时候还是会冲突，可以先把你的修改stash临时保存，pull完代码以后在恢复stash的保存，即可替换pull下来的需要被替换的代码，当然不保存直接对比解决冲突也是可以的</code></pre><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git archive</td><td>生成一个可供发布的压缩包</td></tr><tr><td>git repack</td><td>打包未归档文件</td></tr><tr><td>git count-objects</td><td>计算解包的对象数量</td></tr><tr><td>git help 或 git –help</td><td>Git帮助，查看git相关命令，如果想看某个特定命令的具体细节，可使用git [命令] –help,如 git commit –help 表示查看提交相关命令的帮助</td></tr></tbody></table><h3 id="Git操作流程"><a href="#Git操作流程" class="headerlink" title="Git操作流程"></a>Git操作流程</h3><p>git的操作往往都不是一个命令能解决的，就比如下图所示，单单<strong>代码提交和同步代码</strong>，就涉及到6个命令的组合。</p><p>看完了git命令大全，这节列举了实际操作中的不同场景，为大家一一解答如何组合不同git命令，进行git的操作流程。</p><p><strong>代码提交和同步代码</strong></p><p><img src="/posts/d9283bc6/1.png" alt="1"></p><p><strong>代码撤销和撤销同步</strong></p><p><img src="/posts/d9283bc6/2.png" alt="2"></p><h4 id="1、代码提交和同步代码"><a href="#1、代码提交和同步代码" class="headerlink" title="1、代码提交和同步代码"></a>1、代码提交和同步代码</h4><ul><li>第零步: 工作区与仓库保持一致</li><li>第一步: 文件增删改，变为已修改状态</li><li>第二步: git add ，变为已暂存状态</li></ul><pre class=" language-text"><code class="language-text">$ git status$ git add --all # 当前项目下的所有更改$ git add .  # 当前目录下的所有更改$ git add xx/xx.py xx/xx2.py  # 添加某几个文件</code></pre><ul><li>第三步: git commit，变为已提交状态</li></ul><pre class=" language-text"><code class="language-text">$ git commit -m"<这里写commit的描述>"</code></pre><ul><li>第四步: git push，变为已推送状态</li></ul><pre class=" language-text"><code class="language-text">$ git push -u origin master # 第一次需要关联上$ git push # 之后再推送就不用指明应该推送的远程分支了$ git branch # 可以查看本地仓库的分支$ git branch -a # 可以查看本地仓库和本地远程仓库(远程仓库的本地镜像)的所有分支</code></pre><blockquote><p>在某个分支下，我最常用的操作如下</p></blockquote><pre class=" language-text"><code class="language-text">$ git status$ git add -a$ git status$ git commit -m 'xxx'$ git pull --rebase$ git push origin xxbranch` </code></pre><h4 id="2、代码撤销和撤销同步"><a href="#2、代码撤销和撤销同步" class="headerlink" title="2、代码撤销和撤销同步"></a>2、代码撤销和撤销同步</h4><h5 id="一、已修改，但未暂存"><a href="#一、已修改，但未暂存" class="headerlink" title="一、已修改，但未暂存"></a>一、已修改，但未暂存</h5><pre class=" language-text"><code class="language-text">$ git diff # 列出所有的修改$ git diff xx/xx.py xx/xx2.py # 列出某(几)个文件的修改$ git checkout # 撤销项目下所有的修改$ git checkout . # 撤销当前文件夹下所有的修改$ git checkout xx/xx.py xx/xx2.py # 撤销某几个文件的修改$ git clean -f # untracked状态，撤销新增的文件$ git clean -df # untracked状态，撤销新增的文件和文件夹# Untracked files:#  (use "git add <file>..." to include in what will be committed)## xxx.py</code></pre><h5 id="二、已暂存，未提交"><a href="#二、已暂存，未提交" class="headerlink" title="二、已暂存，未提交"></a>二、已暂存，未提交</h5><blockquote><p>这个时候已经执行过git add，但未执行git commit，但是用git diff已经看不到任何修改。 因为git diff检查的是工作区与暂存区之间的差异。</p></blockquote><pre class=" language-text"><code class="language-text">$ git diff --cached # 这个命令显示暂存区和本地仓库的差异$ git reset # 暂存区的修改恢复到工作区$ git reset --soft # 与git reset等价，回到已修改状态，修改的内容仍然在工作区中$ git reset --hard # 回到未修改状态，清空暂存区和工作区</code></pre><blockquote><p>git reset –hard 操作等价于 git reset 和 git checkout 2步操作</p></blockquote><h5 id="三、已提交，未推送"><a href="#三、已提交，未推送" class="headerlink" title="三、已提交，未推送"></a>三、已提交，未推送</h5><blockquote><p>执行完commit之后，会在仓库中生成一个版本号(hash值)，标志这次提交。之后任何时候，都可以借助这个hash值回退到这次提交。</p></blockquote><pre class=" language-text"><code class="language-text">$ git diff <branch-name1> <branch-name2> # 比较2个分支之间的差异$ git diff master origin/master # 查看本地仓库与本地远程仓库的差异$ git reset --hard origin/master # 回退与本地远程仓库一致$ git reset --hard HEAD^ # 回退到本地仓库上一个版本$ git reset --hard <hash code> # 回退到任意版本$ git reset --soft/git reset # 回退且回到已修改状态，修改仍保留在工作区中。 </code></pre><h5 id="四、已推送到远程"><a href="#四、已推送到远程" class="headerlink" title="四、已推送到远程"></a>四、已推送到远程</h5><pre class=" language-text"><code class="language-text">$ git push -f orgin master # 强制覆盖远程分支$ git push -f # 如果之前已经用 -u 关联过，则可省略分支名</code></pre><blockquote><p>慎用，一般情况下，本地分支比远程要新，所以可以直接推送到远程，但有时推送到远程后发现有问题，进行了版本回退，旧版本或者分叉版本推送到远程，需要添加 -f参数，表示强制覆盖。</p></blockquote><h4 id="️3、其它常见操作"><a href="#️3、其它常见操作" class="headerlink" title="️3、其它常见操作"></a>️3、其它常见操作</h4><h5 id="一、关联远程仓库"><a href="#一、关联远程仓库" class="headerlink" title="一、关联远程仓库"></a>一、关联远程仓库</h5><ul><li>如果还没有Git仓库，你需要</li></ul><pre class=" language-text"><code class="language-text">$ git init</code></pre><ul><li>如果你想关联远程仓库</li></ul><pre class=" language-text"><code class="language-text">$ git remote add <name> <git-repo-url># 例如 git remote add origin https://github.com/xxxxxx # 是远程仓库的名称，通常为 origin </code></pre><ul><li>如果你想关联多个远程仓库</li></ul><pre class=" language-text"><code class="language-text">$ git remote add <name> <another-git-repo-url># 例如 git remote add coding https://coding.net/xxxxxx </code></pre><ul><li>忘了关联了哪些仓库或者地址</li></ul><pre class=" language-text"><code class="language-text">$ git remote -v# origin https://github.com/gzdaijie/koa-react-server-render-blog.git (fetch)# origin https://github.com/gzdaijie/koa-react-server-render-blog.git (push) </code></pre><ul><li>如果远程有仓库，你需要clone到本地</li></ul><pre class=" language-text"><code class="language-text">$ git clone <git-repo-url># 关联的远程仓库将被命名为origin，这是默认的。</code></pre><ul><li>如果你想把别人仓库的地址改为自己的</li></ul><pre class=" language-text"><code class="language-text">$ git remote set-url origin <your-git-url></code></pre><h5 id="二、-切换分支"><a href="#二、-切换分支" class="headerlink" title="二、 切换分支"></a>二、 切换分支</h5><blockquote><p>新建仓库后，默认生成了master分支</p></blockquote><ul><li>如果你想新建分支并切换</li></ul><pre class=" language-text"><code class="language-text">$ git checkout -b <new-branch-name># 例如 git checkout -b dev# 如果仅新建，不切换，则去掉参数 -b</code></pre><ul><li>看看当前有哪些分支</li></ul><pre class=" language-text"><code class="language-text">$ git branch# * dev#   master # 标*号的代表当前所在的分支</code></pre><ul><li>看看当前本地&amp;远程有哪些分支</li></ul><pre class=" language-text"><code class="language-text">$ git branch -a# * dev#   master#   remotes/origin/master</code></pre><ul><li>切换到现有的分支</li></ul><pre class=" language-text"><code class="language-text">$ git checkout master</code></pre><ul><li>你想把dev分支合并到master分支</li></ul><pre class=" language-text"><code class="language-text">$ git merge <branch-name># 例如 git merge dev</code></pre><ul><li>你想把本地master分支推送到远程去</li></ul><pre class=" language-text"><code class="language-text">$ git push origin master# 你可以使用git push -u origin master将本地分支与远程分支关联，之后仅需要使用git push即可。</code></pre><ul><li>远程分支被别人更新了，你需要更新代码</li></ul><pre class=" language-text"><code class="language-text">$ git pull origin <branch-name># 之前如果push时使用过-u，那么就可以省略为git pull</code></pre><ul><li>本地有修改，不能先git pull</li></ul><pre class=" language-text"><code class="language-text">$ git stash # 工作区修改暂存$ git pull  # 更新分支$ git stash pop # 暂存修改恢复到工作区  </code></pre><h5 id="三、-撤销操作"><a href="#三、-撤销操作" class="headerlink" title="三、 撤销操作"></a>三、 撤销操作</h5><ul><li>恢复暂存区文件到工作区</li></ul><pre class=" language-text"><code class="language-text">$ git checkout <file-name> </code></pre><ul><li>恢复暂存区的所有文件到工作区</li></ul><pre class=" language-text"><code class="language-text">$ git checkout .</code></pre><ul><li>重置暂存区的某文件，与上一次commit保持一致，但工作区不变</li></ul><pre class=" language-text"><code class="language-text">$ git reset <file-name></code></pre><ul><li>重置暂存区与工作区，与上一次commit保持一致</li></ul><pre class=" language-text"><code class="language-text">$ git reset --hard <file-name># 如果是回退版本(commit)，那么file，变成commit的hash码就好了。 </code></pre><ul><li>去掉某个commit</li></ul><pre class=" language-text"><code class="language-text">$ git revert <commit-hash># 实质是新建了一个与原来完全相反的commit，抵消了原来commit的效果 </code></pre><ul><li>reset回退错误恢复</li></ul><pre class=" language-text"><code class="language-text">$ git reflog #查看最近操作记录$ git reset --hard HEAD&#123;5&#125; #恢复到前五笔操作$ git pull origin backend-log #再次拉取代码</code></pre><h5 id="四、版本回退与前进"><a href="#四、版本回退与前进" class="headerlink" title="四、版本回退与前进"></a>四、版本回退与前进</h5><ul><li>查看历史版本</li></ul><pre class=" language-text"><code class="language-text">$ git log</code></pre><ul><li>你可能觉得这样的log不好看，试试这个</li></ul><pre class=" language-text"><code class="language-text">$ git log --graph --decorate --abbrev-commit --all</code></pre><ul><li>检出到任意版本</li></ul><pre class=" language-text"><code class="language-text">$ git checkout a5d88ea# hash码很长，通常6-7位就够了</code></pre><ul><li>远程仓库的版本很新，但是你还是想用老版本覆盖</li></ul><pre class=" language-text"><code class="language-text">$ git push origin master --force# 或者 git push -f origin master</code></pre><ul><li>觉得commit太多了? 多个commit合并为1个</li></ul><pre class=" language-text"><code class="language-text">$ git rebase -i HEAD~4# 这个命令，将最近4个commit合并为1个，HEAD代表当前版本。将进入VIM界面，你可以修改提交信息。推送到远程分支的commit，不建议这样做，多人合作时，通常不建议修改历史。 </code></pre><ul><li>想回退到某一个版本</li></ul><pre class=" language-text"><code class="language-text">$ git reset --hard <hash># 例如 git reset --hard a3hd73r# --hard代表丢弃工作区的修改，让工作区与版本代码一模一样，与之对应，--soft参数代表保留工作区的修改。</code></pre><ul><li>想回退到上一个版本，有没有简便方法?</li></ul><pre class=" language-text"><code class="language-text">$ git reset --hard HEAD^ </code></pre><ul><li>回退到上上个版本呢?</li></ul><pre class=" language-text"><code class="language-text">$ git reset --hard HEAD^^# HEAD^^可以换作具体版本hash值。</code></pre><ul><li>回退错了，能不能前进呀</li></ul><pre class=" language-text"><code class="language-text">$ git reflog# 这个命令保留了最近执行的操作及所处的版本，每条命令前的hash值，则是对应版本的hash值。使用上述的git checkout 或者 git reset命令 则可以检出或回退到对应版本。</code></pre><ul><li>刚才commit信息写错了，可以修改吗</li></ul><pre class=" language-text"><code class="language-text">$ git commit --amend</code></pre><ul><li>看看当前状态吧</li></ul><pre class=" language-text"><code class="language-text">$ git status </code></pre><h5 id="五、配置属于你的Git"><a href="#五、配置属于你的Git" class="headerlink" title="五、配置属于你的Git"></a>五、配置属于你的Git</h5><ul><li>看看当前的配置</li></ul><pre class=" language-text"><code class="language-text">$ git config --list </code></pre><ul><li>估计你需要配置你的名字</li></ul><pre class=" language-text"><code class="language-text">$ git config --global user.name "<name>#  --global为可选参数，该参数表示配置全局信息` </code></pre><ul><li>希望别人看到你的commit可以联系到你</li></ul><pre class=" language-text"><code class="language-text">$ git config --global user.email "<email address>" </code></pre><ul><li>有些命令很长，能不能简化一下</li></ul><pre class=" language-text"><code class="language-text">$ git config --global alias.logg "log --graph --decorate --abbrev-commit --all"# 之后就可以开心地使用 git log了</code></pre><h3 id="新建了一个git仓库，本地代码上传gitlab"><a href="#新建了一个git仓库，本地代码上传gitlab" class="headerlink" title="新建了一个git仓库，本地代码上传gitlab"></a>新建了一个git仓库，本地代码上传gitlab</h3><pre class=" language-csharp"><code class="language-csharp">$ git init  <span class="token comment" spellcheck="true">//建立一个新的git链接</span>$ git remote <span class="token keyword">add</span> origin https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>gitee<span class="token punctuation">.</span>com<span class="token operator">/</span>xxx<span class="token operator">/</span>XXX<span class="token punctuation">.</span>git  <span class="token comment" spellcheck="true">//https：自己的仓库地址</span>$ git config <span class="token operator">--</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>email <span class="token string">"you@example.com"</span>   <span class="token comment" spellcheck="true">//自己的邮箱</span>$ git config <span class="token operator">--</span><span class="token keyword">global</span> user<span class="token punctuation">.</span>name <span class="token string">"Your Name"</span>  <span class="token comment" spellcheck="true">//用户名</span>$ git <span class="token keyword">add</span> <span class="token punctuation">.</span>  <span class="token comment" spellcheck="true">//. 是添加所有文件到git仓库</span>$ git commit <span class="token operator">-</span>m <span class="token string">"提交的内容名称"</span>$ git pull origin master  <span class="token comment" spellcheck="true">//先拉取下后提交不容易错</span>$ git push <span class="token operator">-</span>u origin master  <span class="token comment" spellcheck="true">//提交到master分支</span></code></pre><h3 id="git-status-出错-interactive-rebase-in-progress；-onto-796e78f"><a href="#git-status-出错-interactive-rebase-in-progress；-onto-796e78f" class="headerlink" title="git status 出错 interactive rebase in progress； onto 796e78f"></a>git status 出错 interactive rebase in progress； onto 796e78f</h3><pre><code>使用 git commit --amend 命令修订当前的提交使用 git rebase --continue 命令继续代码的提交(推荐),执行之后,需要重新提交,解决一下当前的代码冲突之后重新提交直至没有rebase提示,就可以正常提交了</code></pre><h3 id="切换仓库源"><a href="#切换仓库源" class="headerlink" title="切换仓库源"></a>切换仓库源</h3><p><strong>移除之前的git源：</strong></p><pre class=" language-html"><code class="language-html">git remote rm origin</code></pre><p><strong>连接新的git源：</strong></p><pre class=" language-html"><code class="language-html">git remote add origin '仓库地址'</code></pre><h3 id="git冲突解决"><a href="#git冲突解决" class="headerlink" title="git冲突解决"></a>git冲突解决</h3><p>用</p><pre><code>git fetch origin master</code></pre><p>该命令会将远程仓库的代码同步到本地，但是不会合并到任何分支上，而是存放到一个 origin/master分支上；</p><p>之后调用</p><pre><code>git diff origin/master   可以查看远程仓库到底修改了哪些东西 </code></pre><p>git diff 对比两次文件修改了什么。但如何退出呢？按q即可</p><p>最后调用</p><pre><code>git merge origin/master</code></pre><p>将远程仓库的代码与本地主干分支进行合并；执行完这一步后所有本地与远程的代码就合并了，只是存在冲突的地方</p><p>被加上了标记，需要手动去解决冲突；执行完该命令后git中会显示每个冲突所在的文件，</p><p>例如：Conflicts XXXXXX&gt;XXX&gt;XX  之类的</p><p>你就去你项目的文件下，在AndroidStudio打开该文件。手动合并的方法：</p><blockquote><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt;到=======是在当前分支合并之前的文件内容*</p><p>=======到&gt;&gt;&gt;&gt;&gt;&gt;&gt; psr/psr-02是在其它分支下修改的内容</p><p>需要在这个两个版本中选择一个，然后把标记符号也要一起删除</p></blockquote><p>合并完成后执行  </p><pre><code>git add . 命令 </code></pre><p>将你合并的文件添加进去 然后</p><pre><code>git commit -m “你的提交信息”</code></pre><p>提交合并成功后就可以上传到远程仓库啦</p><pre><code>git push -u origin master</code></pre><p>另外在 git commit 这步常常忘记输入提交信息导致进入 编辑提交信息的界面 应该就是下面的git bash vim吧；</p><h3 id="git-commit-最后一次提交的注释信息，如何修改？-如何退出编辑器？"><a href="#git-commit-最后一次提交的注释信息，如何修改？-如何退出编辑器？" class="headerlink" title="git commit 最后一次提交的注释信息，如何修改？ 如何退出编辑器？"></a>git commit 最后一次提交的注释信息，如何修改？ 如何退出编辑器？</h3><p>今天用git commit -m “注释”提交的时候，注释写错了，</p><p>首先 使用 git commit –amend 命令（修改最近一次提交的注释信息），会进入到 vim 编辑器</p><p>然后 你会发现编辑器里你怎么输入都没反应，这是因为vim处在不可编辑状态，</p><pre><code>按下字母键 c（此时进入编辑状态）</code></pre><p>，可以开始修改注释信息了</p><p>修改好后，你会发现怎么都退出不了，然后如下操作：</p><pre><code>按下 Esc (退出编辑状态)； 接着连按两次大写字母Z</code></pre><p>，你会惊喜的发现，终于保存好退出来了！</p><h3 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h3><pre><code>git log :列出历史提交记录  (退出方式 : 英文状态下输入q就可以直接退出了)例:commit 64487e1132ed01fea1c87c315a2f9de2b80c75edAuthor: porcorosso &lt;1332355083@qq.com&gt;Date:   Fri Aug 4 22:04:48 2023 +0800    initcommit 8b495e74edfea974f5eb087530fede425800fa51Author: porcorosso &lt;1332355083@qq.com&gt;Date:   Fri Aug 4 21:39:59 2023 +0800    initcommit f88b2e6cb8996f9b7d3fc4b8a847c20e9bddbe19Author: Administrator &lt;admin@example.com&gt;Date:   Wed Aug 2 23:21:08 2023 +0000    Initial commitgit log --oneline :查看历史记录的简洁的版本例:4b7e397 (HEAD -&gt; master, origin/master) md64487e1 init8b495e7 initf88b2e6 Initial commit</code></pre><h3 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h3><h4 id="本分支变基"><a href="#本分支变基" class="headerlink" title="本分支变基"></a>本分支变基</h4><p>在master分支上添加了5次提交，我们的目标是把最后三个提交合并为一个提交：</p><p>变基命令：<br> <code>git rebase -i [startpoint] [endpoint]</code></p><ul><li> <code>-i</code>: 意思是<code>--interactive</code>，即弹出交互式的界面让用户编辑完成合并操作;</li><li> <code>[startpoint] [endpoint]</code>则指定了一个编辑区间，如果不指定<code>[endpoint]</code>，则该区间的终点默认是当前分支<code>HEAD</code>所指向的<code>commit</code>(注：该区间指定的是一个前开后闭的区间)。</li></ul><p>变基步骤：</p><ul><li>输入命令：</li></ul><pre class=" language-cpp"><code class="language-cpp">git rebase <span class="token operator">-</span>i 073ea5e <span class="token comment" spellcheck="true">//第三次提交ID</span><span class="token comment" spellcheck="true">//上面等同如下命令</span>git rebase <span class="token operator">-</span>i HEAD<span class="token operator">~</span><span class="token number">3</span></code></pre><p>在交互界面使用下面命令对提交进行操作</p><p><img src="/posts/d9283bc6/20230805141202.png" alt="20230805141202"></p><p>比如要合并那三次提交,<br>第一次提交使用pick 后面的都改成 squash ,<br>这样三次提交就可以合并</p><h3 id="命令说明"><a href="#命令说明" class="headerlink" title="命令说明"></a>命令说明</h3><blockquote><p>pick：保留该commit（缩写:p）<br> reword：保留该commit，但我需要修改该commit的注释（缩写:r）<br> edit：保留该commit, 但我要停下来修改该提交(不仅仅修改注释)（缩写:e）<br> squash：将该commit和前一个commit合并（缩写:s）<br> fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息（缩写:f）<br> exec：执行shell命令（缩写:x）<br> drop：我要丢弃该commit（缩写:d）</p></blockquote><h3 id="查看提交信息"><a href="#查看提交信息" class="headerlink" title="查看提交信息"></a>查看提交信息</h3><p>git show commit_id | grep diff | cut -d” “ -f 3</p><p>例如 :<br>a/README.md</p><h3 id="提交规范"><a href="#提交规范" class="headerlink" title="提交规范"></a>提交规范</h3><ul><li>feat: 新功能</li><li>fix: 修复问题</li><li>docs: 修改文档</li><li>style: 修改代码格式，不影响代码逻辑</li><li>refactor: 重构代码，理论上不影响现有功能</li><li>perf: 提升性能</li><li>test: 增加修改测试用例</li><li>chore: 修改工具相关（包括但不限于文档、代码生成等）</li><li>deps: 升级依赖</li></ul><p><strong>例如</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'fix:修复xxxbug'</span></code></pre><hr><p>抛弃本地的 commit，采用远程的 commit。慎用：因为你本地的修改都会失去。</p><pre><code>git rebase --skip</code></pre><p>终止这次 rebase 操作</p><pre><code>git rebase --abort</code></pre><p>手动处理冲突的文件：执行git add .，再 git rebase –continue，反复操作直到解决完所有冲突，并合并到分支上。</p><pre><code>git rebase --continue</code></pre><h3 id="git回退版本"><a href="#git回退版本" class="headerlink" title="git回退版本"></a>git回退版本</h3><h4 id="git-reset-回退"><a href="#git-reset-回退" class="headerlink" title="git reset 回退"></a>git reset 回退</h4><p>缺点: 回退并且窗口关闭后 错误的版本会消失 找不到  ,没有关闭窗口的话还可以通过 git reset –hard 错误的版本号 回退到错误的版本</p><p>1.<strong>使用git log 找到要回退的版本号</strong></p><pre><code>git log commit f88b2e6cb8996f9b7d3fc4b8a847c20e9bddbe19Author: Administrator &lt;admin@example.com&gt;Date:   Wed Aug 2 23:21:08 2023 +0000    Initial commitcommit  后面就是版本号</code></pre><p>2.<strong>使用git reset –hard 版本号 回退到版本</strong></p><p>其”–soft 、–mixed以及–hard是三个恢复等级。<br> 使用–soft就仅仅将头指针恢复，已经add的暂存区以及工作空间的所有东西都不变。<br> 如果使用–mixed，就将头恢复掉，已经add的暂存区也会丢失掉，工作空间的代码什么的是不变的。<br> 如果使用–hard，那么一切就全都恢复了，头变，add的暂存区消失，代码什么的也恢复到以前状态。</p><p>回退代码快捷操作：</p><pre class=" language-git"><code class="language-git">git reset --hard HEAD^ #回退到上一个版本git reset --hard HEAD^^ #回退到上上一个版本git reset --hard HEAD~3 #回退到往上3个版本git reset --hard HEAD~10 #回退到往上10个版本</code></pre><p>3.<strong>git push origin 仓库名 –force 推送代码</strong></p><p>提交后 </p><p><img src="/posts/d9283bc6/12665637-84cd705d964a100c.png" alt="12665637-84cd705d964a100c"></p><h4 id="git-revert-回退"><a href="#git-revert-回退" class="headerlink" title="git revert 回退"></a>git revert 回退</h4><p>优点: 既可以回退代码，又可以保存错误的提交</p><p>git revert的作用通过反做创建一个新的版本，这个版本的内容与我们要回退到的目标版本一样，但是HEAD指针是指向这个新生成的版本，而不是目标版本。</p><p>使用 git revert 命令来实现上述例子的话，我们可以这样做：先 revert D，再 revert C （有多个提交需要回退的话需要由新到旧进行 revert）：</p><pre class=" language-undefined"><code class="language-undefined">git revert 5lk4ergit revert 76sdeb</code></pre><p>这里会生成两个新有提交：D’ 和 C’，如下图示：</p><p><img src="/posts/d9283bc6/12665637-cf079bb4922d85e5.png" alt="12665637-cf079bb4922d85e5"></p><p>这里只有两个提交需要 revert，我们可以一个个回退。但如果有几十个呢？一个个回退肯定效率太低而且容易出错。我们可以使用以下方法进行批量回退：</p><pre><code>git revert OLD_COMMIT_ID^..NEW_COMMIT_ID</code></pre><p>这样操作的话 HEAD 指针是往后移动的，可以直接使用 git push 命令推送到远程仓库里</p><p>举个更难一点的例子。</p><p>假如现在有三个提交，但很不巧的是，那个错误的提交刚好位于中间。如下图示：</p><p><img src="/posts/d9283bc6/12665637-cae2607ac18a7f47.png" alt="12665637-cae2607ac18a7f47"></p><p>这时，直接使用 git reset 命令将 HEAD 指针重置到 A 提交显然是不行的，因为 C 提交是正确的，需要保留的。先把 C 提交 及 B 提交全部回退，再使用 cherry-pick 命令将 C 提交重新再生成一个新的提交 C’’，这样就实现了将 B提交回退的需求。</p><pre><code>git cherry-pick 76sdeb</code></pre><p>完整的过程如下：</p><p><img src="/posts/d9283bc6/12665637-fec52bf232159982.png" alt="12665637-fec52bf232159982"></p><h3 id="Git如何做到同一个分支只上线部分功能-Cherry-Pick"><a href="#Git如何做到同一个分支只上线部分功能-Cherry-Pick" class="headerlink" title="Git如何做到同一个分支只上线部分功能 Cherry-Pick"></a>Git如何做到同一个分支只上线部分功能 Cherry-Pick</h3><p>在开发的时候，我们通常会在同一个开发分支(B)上，同时开发多个功能，但最终可能只需要上线(合并到master分支)部分功能。显然这时直接将B分支合并（pull request）到master分支，是会将所有提交都合并到master，所以这里我们无法直接使用pull requst。直接将B分支推送到master分支是同一个结果。</p><p>这时我们可以使用到cherry-pick命令拉取代码，cherry-pick可以做到commit维度的代码拉取，也就是只拉取某次commit中的所有代码变更。我们想要上线部分功能可以从这个命令入手。</p><pre class=" language-shell"><code class="language-shell">git cherry-pick <commit id></code></pre><blockquote><p>cherry-pick:选出自己喜欢的</p></blockquote><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>当俩分支（B、D）在同一个版本时，此时再在B分支开发功能，第一天B与M分支为同样的版本（即一样的代码），在第2、3、4天都有在B分支上开发新的功能或者做了修改，每次改动都会及时提交（commit）。到了第五天，经理说马上要上线用户查询和用户新增的功能到D分支，进行功能测试。</p><table><thead><tr><th>时间/天</th><th>B分支版本</th><th>D分支版本</th></tr></thead><tbody><tr><td>1</td><td>版本1</td><td>版本1</td></tr><tr><td>2</td><td>版本2 (用户查询:commit1)</td><td>版本1</td></tr><tr><td>3</td><td>版本3 (用户查询:commit1)(登录功能:commit2)</td><td>版本1</td></tr><tr><td>4</td><td>版本4 (用户查询:commit1)(登录功能:commit2)(用户新增:commit3)</td><td>版本1</td></tr><tr><td>5</td><td>版本4 (用户查询:commit1)(登录功能:commit2)(用户新增:commit3)</td><td>版本4 (用户查询:commit1)(用户新增:commit3)</td></tr></tbody></table><p>想要达到第五天的效果，我们可以使用cherry-pick，来选出自己想要的commit，来合并到D分支上。</p><pre class=" language-shell"><code class="language-shell">#需要先切换到D分支后，再执行cherry-pick命令，可以将别的分支的commit选取拉到当前分支。# 切换到 D 分支git checkout Dgit cherry-pick commit1编号git cherry-pick commit3编号</code></pre><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p>在拉取多个提交时应按照先后提交顺序拉取，并将某个功能的所有commit都拉取到以免代码丢失。</p><p>假如，只拉取commit3，但是commit3与commit1是在同一个文件中做修改，这是会有冲突出现。但是只拉取commit1而忘记了commit3，这时不会有冲突，但是后续便丢失了commit3的代码。</p><h4 id="避免代码的冲突与丢失"><a href="#避免代码的冲突与丢失" class="headerlink" title="避免代码的冲突与丢失"></a>避免代码的冲突与丢失</h4><p>为了避免冲突的出现与代码的丢失，我们可以做下面几点来预防：</p><ol><li>创建一个自己独立的分支。避免多人使用同一个分支。</li><li>每次提交都只包含一个功能（能一起上线的功能）。这样可以在cherry-pick时更加方便。</li><li>cherry-pick时可以用idea将某个功能的所有提交，全选出来，一次性都pick出来。或者，按照先后顺序将commit依次pick过来，直接pick多次修改后的commit会存在冲突。</li></ol><h3 id="cherry-pick-详细用法"><a href="#cherry-pick-详细用法" class="headerlink" title="cherry-pick 详细用法"></a>cherry-pick 详细用法</h3><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p><code>git cherry-pick</code>命令的作用，就是将指定的提交（commit）应用于其他分支。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator">></span></code></pre><p>上面命令就会将指定的提交<code>commitHash</code>，应用于当前分支。这会在当前分支产生一个新的提交，当然它们的哈希值会不一样。</p><p>举例来说，代码仓库有<code>master</code>和<code>feature</code>两个分支。</p><pre class=" language-bash"><code class="language-bash">    a - b - c - d   Master         \           e - f - g Feature</code></pre><p>现在将提交<code>f</code>应用到<code>master</code>分支。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 切换到 master 分支</span>$ <span class="token function">git</span> checkout master<span class="token comment" spellcheck="true"># Cherry pick 操作</span>$ <span class="token function">git</span> cherry-pick f</code></pre><p>上面的操作完成以后，代码库就变成了下面的样子。</p><pre class=" language-bash"><code class="language-bash">    a - b - c - d - f   Master         \           e - f - g Feature</code></pre><p>从上面可以看到，<code>master</code>分支的末尾增加了一个提交<code>f</code>。</p><p><code>git cherry-pick</code>命令的参数，不一定是提交的哈希值，分支名也是可以的，表示转移该分支的最新提交。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> cherry-pick feature</code></pre><p>上面代码表示将<code>feature</code>分支的最近一次提交，转移到当前分支。</p><h4 id="转移多个提交"><a href="#转移多个提交" class="headerlink" title="转移多个提交"></a>转移多个提交</h4><p>Cherry pick 支持一次转移多个提交。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>HashA<span class="token operator">></span> <span class="token operator">&lt;</span>HashB<span class="token operator">></span></code></pre><p>上面的命令将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。</p><p>如果想要转移一系列的连续提交，可以使用下面的简便语法。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> cherry-pick A<span class="token punctuation">..</span>B </code></pre><p>上面的命令可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置：提交 A 必须早于提交 B，否则命令将失败，但不会报错。</p><p>注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用下面的语法。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> cherry-pick A^<span class="token punctuation">..</span>B </code></pre><h4 id="配置项"><a href="#配置项" class="headerlink" title="配置项"></a>配置项</h4><p><code>git cherry-pick</code>命令的常用配置项如下。</p><p><strong>（1）-e，–edit</strong></p><p>打开外部编辑器，编辑提交信息。</p><p><strong>（2）-n，–no-commit</strong></p><p>只更新工作区和暂存区，不产生新的提交。</p><p><strong>（3）-x</strong></p><p>在提交信息的末尾追加一行<code>(cherry picked from commit ...)</code>，方便以后查到这个提交是如何产生的。</p><p><strong>（4）-s，–signoff</strong></p><p>在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。</p><p><strong>（5）-m parent-number，–mainline parent-number</strong></p><p>如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。</p><p><code>-m</code>配置项告诉 Git，应该采用哪个分支的变动。它的参数<code>parent-number</code>是一个从<code>1</code>开始的整数，代表原始提交的父分支编号。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> cherry-pick -m 1 <span class="token operator">&lt;</span>commitHash<span class="token operator">></span></code></pre><p>上面命令表示，Cherry pick 采用提交<code>commitHash</code>来自编号1的父分支的变动。</p><p>一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。</p><h4 id="代码冲突"><a href="#代码冲突" class="headerlink" title="代码冲突"></a>代码冲突</h4><p>如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作。</p><p><strong>（1）–continue</strong></p><p>用户解决代码冲突后，第一步将修改的文件重新加入暂存区（<code>git add .</code>），第二步使用下面的命令，让 Cherry pick 过程继续执行。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> cherry-pick --continue</code></pre><p><strong>（2）–abort</strong></p><p>发生代码冲突后，放弃合并，回到操作前的样子。</p><p><strong>（3）–quit</strong></p><p>发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子。</p><h4 id="转移到另一个代码库"><a href="#转移到另一个代码库" class="headerlink" title="转移到另一个代码库"></a>转移到另一个代码库</h4><p>Cherry pick 也支持转移另一个代码库的提交，方法是先将该库加为远程仓库。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> remote add target git://gitUrl</code></pre><p>上面命令添加了一个远程仓库<code>target</code>。</p><p>然后，将远程代码抓取到本地。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> fetch target</code></pre><p>上面命令将远程代码仓库抓取到本地。</p><p>接着，检查一下要从远程仓库转移的提交，获取它的哈希值。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> log target/master</code></pre><p>最后，使用<code>git cherry-pick</code>命令转移提交。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> cherry-pick <span class="token operator">&lt;</span>commitHash<span class="token operator">></span></code></pre><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><pre><code>// 合并分支（多人开发中，经常一人一个分支，各自在自己分支开发，开发完成以后合并到某一个指定分支，没有问题后最后合并到master主分支，我们的流程是各自在自己的develop开发，开发完成以后合并到lastest分支，没有问题后提交合并申请到master分支，由leader审批是否统一合并到master，因为很多新人不太清楚代码的具体用途，所以讲的稍微详细点，明白命令的实现目的能更好的掌握使用，后面会有具体的操作流程）1.本地代码依次git statusgit add .git commit -m &quot;&quot;git pull git push （develop-author分支，即自己的开发分支）以后（把本地代码推送到远程对应分支）2.git checkout lastest （切换到lastest分支）3.git pull origin lastest  （先把远程lastest分支修改内容拉取，多人开发，需要把远程lastest上的代码pull下来）4.git  merge develop-author   （合并自己的分支到lastest）</code></pre><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章:"></a>参考文章:</h3><p>作者：指尖跳动链接：<a href="https://www.jianshu.com/p/dca42de8aed7%E6%9D%A5%E6%BA%90%EF%BC%9A%E7%AE%80%E4%B9%A6%E8%91%97%E4%BD%9C%E6%9D%83%E5%BD%92%E4%BD%9C%E8%80%85%E6%89%80%E6%9C%89%E3%80%82%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E8%81%94%E7%B3%BB%E4%BD%9C%E8%80%85%E8%8E%B7%E5%BE%97%E6%8E%88%E6%9D%83%EF%BC%8C%E9%9D%9E%E5%95%86%E4%B8%9A%E8%BD%AC%E8%BD%BD%E8%AF%B7%E6%B3%A8%E6%98%8E%E5%87%BA%E5%A4%84%E3%80%82">https://www.jianshu.com/p/dca42de8aed7来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</a></p><p>作者（阮一峰）<a href="https://links.jianshu.com/go?to=http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html">http://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html</a></p><p>作者：猫大顾<br>链接：<a href="https://www.jianshu.com/p/31a74fec358e">https://www.jianshu.com/p/31a74fec358e</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>作者: 程序员奇奇  <a href="https://zhuanlan.zhihu.com/p/555637985">https://zhuanlan.zhihu.com/p/555637985</a></p><p>作者: <a href="https://www.jianshu.com/u/94fed1d4e9d3">霖深雾起不见你</a>   <a href="https://www.jianshu.com/p/78246673c545">https://www.jianshu.com/p/78246673c545</a></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware知识记录</title>
      <link href="/posts/5b52618.html"/>
      <url>/posts/5b52618.html</url>
      
        <content type="html"><![CDATA[<p>VMware知识记录</p><span id="more"></span><hr><h3 id="虚拟机ifconfig或ip-addr不显示ip地址"><a href="#虚拟机ifconfig或ip-addr不显示ip地址" class="headerlink" title="虚拟机ifconfig或ip addr不显示ip地址"></a>虚拟机ifconfig或ip addr不显示ip地址</h3><p>报错图片：</p><p>一直查不到ip地址，有重新启动很多次</p><p><img src="/posts/5b52618/20210318222104836.png" alt="20210318222104836"></p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>（1）命令查看配置文件：</p><p>vi /etc/sysconfig/network-scripts/ifcfg-ens33</p><p>ens33 注意看这个修改的文件后缀</p><p>把ONBOOT的状态no改为yes</p><p>然后重启，应该就没问题了。</p><p><img src="/posts/5b52618/20210318222623751.png" alt="20210318222623751"></p><p>（2）:还有一种可能是因为虚拟网卡没有正常连接，解决方法是开启虚拟网卡的服务：打开任务管理器，选择服务标签，为了保险，开启所有的和vmware有关的服务</p><p><img src="/posts/5b52618/20210318223141577.png" alt="20210318223141577"></p><p>检查带VM的服务是否都开启了<br>打开后重启</p><p>（3）:</p><p>第一步：</p><pre><code>命令：systemctl stop NetworkManager</code></pre><p>第二步：</p><pre><code>命令：systemctl disable NetworkManager</code></pre><p>第三步：</p><pre><code>命令：service network start</code></pre><p>先执行这三步，等网卡重新启动。</p><p><img src="/posts/5b52618/20210318225907899.png" alt="20210318225907899"></p><p>再执行：</p><pre><code>命令：ifup ens33</code></pre><p>然后重新启动再去查看ip地址，问题解决</p><p>版权声明：</p><p>本文为CSDN博主「原味Java」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_49466168/article/details/114993569">https://blog.csdn.net/qq_49466168/article/details/114993569</a></p>]]></content>
      
      
      <categories>
          
          <category> VMware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows命令行</title>
      <link href="/posts/edc4c195.html"/>
      <url>/posts/edc4c195.html</url>
      
        <content type="html"><![CDATA[<p>windows命令行</p><span id="more"></span><hr><h2 id="windows命令"><a href="#windows命令" class="headerlink" title="windows命令"></a>windows命令</h2><p>windows 查看文件列表 :  dir</p><p>windows编辑文件命令<code>:  notepad somefile.txt</code></p><h2 id="Windows环境下压缩包合并"><a href="#Windows环境下压缩包合并" class="headerlink" title="Windows环境下压缩包合并"></a>Windows环境下压缩包合并</h2><p>copy /B 1.zip.001 + 1.zip.002 + 1.zip.003 wuming.zip</p><h2 id="Windows环境下硬盘-u盘被谁占用了，查找罪魁祸首"><a href="#Windows环境下硬盘-u盘被谁占用了，查找罪魁祸首" class="headerlink" title="Windows环境下硬盘/u盘被谁占用了，查找罪魁祸首"></a>Windows环境下硬盘/u盘被谁占用了，查找罪魁祸首</h2><p>Win+R打开【运行】–&gt;输入eventvwr.msc回车打开【事件查看器】–&gt;事件查看器(本地)–&gt;Windows日志–&gt;系统–&gt;找到最近的【警告 来源Kernel-PnP】–&gt;双击打开–&gt;你会看到【进程 ID 为 **** 的应用程序已停止删除或弹出设备】，记住这个进程ID。</p><pre><code>cmd 使用  taskkill /pid 进程ID -f 强制结束进程  也可以使用taskkill /pid 进程ID -t 结束进程(使用-t会判断有没有子进程，有子进程就不会结束)  </code></pre>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java运行环境JDK</title>
      <link href="/posts/a90fd208.html"/>
      <url>/posts/a90fd208.html</url>
      
        <content type="html"><![CDATA[<p>java运行环境JDK</p><span id="more"></span><hr><h3 id="jdk更换版本"><a href="#jdk更换版本" class="headerlink" title="jdk更换版本"></a>jdk更换版本</h3><p>直接去修改系统变量JAVA_HOME的话会发现不起作用</p><p>原因是安装JDK1.8版本时，会在C:\ProgramData\Oracle\Java目录中生成一些配置文件，并同时将此目录写到环境变量中的Path中，所以我们应该去把系统变量Path中的C:\ProgramData\Oracle\Java\javapath删除了，这样问题就解决了！ </p><p>JAVA_HOME<br>%JAVA_HOME7%</p><p>CLASSPATH<br>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; </p><p>JAVA_HOME7<br>D:\Program Files\job\Java\jdk1.7.0_67 JAVA_HOME8D:\Program Files\job\java_1.8\jdk </p><p>Path<br>%JAVA_HOME%\bin;<br>%JAVA_HOME%\jre\bin; </p><p>用于切换的版本的配置JAVA_HOME：如需切换到8只需要修改为“%JAVA_HOME8%”即可</p><h3 id="java运行时的编译问题"><a href="#java运行时的编译问题" class="headerlink" title="java运行时的编译问题"></a>java运行时的编译问题</h3><p>java.lang.ClassNotFoundException: com.hundsun.exchange.delivery.constant.util.ServiceExcepiton<br>解决方式：1.maven clean compile 2.找到包在哪个类然后删除target   3.右击包名-&gt;maven-&gt;reload project 4.点小锤子编译 </p><h3 id="打war包"><a href="#打war包" class="headerlink" title="打war包"></a>打war包</h3><p>vn clean install -DskipTests</p>]]></content>
      
      
      <categories>
          
          <category> jdk </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘功能备份</title>
      <link href="/posts/8332e50c.html"/>
      <url>/posts/8332e50c.html</url>
      
        <content type="html"><![CDATA[<p>键盘功能备份</p><span id="more"></span><hr><h2 id="NuPhy键盘"><a href="#NuPhy键盘" class="headerlink" title="NuPhy键盘"></a>NuPhy键盘</h2><h3 id="蓝牙模式连接"><a href="#蓝牙模式连接" class="headerlink" title="蓝牙模式连接"></a>蓝牙模式连接</h3><p>键盘使用蓝牙5.0首先看下自己电脑是win还是Mac的，先调好键盘模式，FN+1长按搜索 左边呼吸灯蓝灯快速闪烁，就可以在电脑上蓝牙查看本键盘名字的+5.0的连接就可以了【如果是air60跟halo65键盘是FN+QWE连接的】蓝牙最多可以支持3台设备自由切换,</p><pre class=" language-markdown"><code class="language-markdown">切换按钮分别是FN+1和FN+2和FN+3</code></pre><h3 id="键盘使用电量查看"><a href="#键盘使用电量查看" class="headerlink" title="键盘使用电量查看"></a>键盘使用电量查看</h3><p>查看电量需要在无线的情况下操作哦，键盘插线及充电中也不行的，调到无线模式</p><pre class=" language-markdown"><code class="language-markdown">按FN+｜看指示灯颜色，halo系列看左上方指示灯，air系列看右侧指示灯的</code></pre><h3 id="功能翻转"><a href="#功能翻转" class="headerlink" title="功能翻转"></a>功能翻转</h3><p>功能翻转就是F区，第一层是多媒体，第二层是F区，可以调换使用</p><pre class=" language-markdown"><code class="language-markdown">halo系列的功能翻转是FN+X+F 长按键盘指示灯闪几下就是完成了air系列的功能翻转是FN +TAB+F 长按键盘指示灯闪几下就是完成了</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Unicode汉字内码对应表</title>
      <link href="/posts/7593ac01.html"/>
      <url>/posts/7593ac01.html</url>
      
        <content type="html"><![CDATA[<p>Unicode汉字内码对应表</p><span id="more"></span><hr><h2 id="1、历史简述"><a href="#1、历史简述" class="headerlink" title="1、历史简述"></a>1、历史简述</h2><p><strong>Unicode</strong>（<strong>万国码</strong>、<strong>国际码</strong>、<strong>统一码</strong>、<strong>单一码</strong>）是计算机科学领域里的一项业界标准。它对世界上大部分的文字系统进行了整理、编码，使得电脑可以用更为简单的方式来呈现和处理文字。</p><p>Unicode发展由非营利机构统一码联盟负责，该机构致力于让Unicode方案替换既有的字符编码方案。因为既有的方案往往空间非常有限，亦不适用于多语环境。</p><p>统一码联盟在1991年首次发布了<strong>The Unicode Standard</strong>。</p><p>在2005年，Unicode的第十万个字元被引入成为标准之一，该字元被用于马拉雅拉姆语。</p><h2 id="2、编码方式"><a href="#2、编码方式" class="headerlink" title="2、编码方式"></a>2、编码方式</h2><p>目前实际应用的统一码版本对应于UCS-2，使用16位的编码空间。也就是每个字符占用2个字节。这样理论上一共最多可以表示2的16次（即65536）个字符。基本满足各种语言的使用。实际上当前版本的统一码并未完全使用这16位编码，而是保留了大量空间以作为特殊使用或将来扩展。</p><p>最新（但未实际广泛使用）的统一码版本定义了16个辅助平面，两者合起来至少需要占据21位的编码空间，比3字节略少。但事实上辅助平面字符仍然占用4字节编码空间，与UCS-4保持一致。未来版本会涵盖UCS-4的所有字符。UCS-4是一个更大的尚未填充完全的31位字符集，加上恒为0的首位，共需占据32位，即4字节。理论上最多能表示2的31次方个字符，完全可以涵盖一切语言所用的符号。</p><h2 id="3、UCS"><a href="#3、UCS" class="headerlink" title="3、UCS"></a>3、UCS</h2><p><strong>通用字符集</strong>（Universal Character Set）是由ISO制定的<strong>ISO 10646</strong>（或称<strong>ISO/IEC 10646</strong>）标准所定义的标准字符集。</p><p>通用字符集包括了其他所有字符集。它保证了与其他字符集的双向兼容，即，如果你将任何文本字符串翻译到UCS格式，然后再翻译回原编码，你不会丢失任何信息。</p><p>UCS包含了已知语言的所有字符。除了拉丁语、希腊语、斯拉夫语、希伯来语、阿拉伯语、亚美尼亚语、格鲁吉亚语，还包括中文、日文、韩文这样的方块文字，UCS还包括大量的图形、印刷、数学、科学符号。</p><p>ISO/IEC 10646定义了一个31位的字符集。</p><p>并不是所有的系统都需要支持像组合字符这样的的先进机制。因此ISO 10646指定了如下三种实现级别：</p><ul><li>级别1：不支持组合字符和谚文字母字符。</li><li>级别2：类似于级别1，但在某些文字中，允许一列固定的组合字符，因为如果没有最起码的几个组合字符，UCS就不能完整地表达这些语言。</li><li>级别3：支持所有的通用字符集字符，如，可以在任意一个字符上加上一个箭头或一个鼻音化符号.</li></ul><p>历史上存在两个独立的尝试创立单一字符集的组织，即：</p><p>1、国际标准化组织（ISO）于1984年创建的ISO/IEC</p><p>2、统一码联盟</p><p>统一码联盟和ISO/IEC都同意保持两者标准的码表兼容，并紧密地共同调整任何未来的扩展。</p><h2 id="4、实现方式"><a href="#4、实现方式" class="headerlink" title="4、实现方式"></a>4、实现方式</h2><p>Unicode的实现方式不同于编码方式。一个字符的Unicode编码是确定的。但是在实际传输过程中，由于不同系统平台的设计不一定一致，以及出于节省空间的目的，对Unicode编码的实现方式有所不同。</p><p>Unicode的实现方式称为<strong>Unicode转换格式</strong>（Unicode Transformation Format，简称为<strong>UTF</strong>）。</p><p>前面说到，Unicode采用2个字节来编码文件，但是如果一个仅包含7位ASCII字符的Unicode文件，每个字符使用2字节就浪费了一般的存储空间，其第一字节的8位始终为0，这是难以忍受。对于这种情况，可以使用UTF-8编码，这是一种变长编码，它将基本7位ASCII字符仍用7位编码表示，占用一个字节（首位补0）。而遇到与其他Unicode字符混合的情况，将按一定算法转换，每个字符使用1-3个字节编码，并利用首位为0或1进行识别。</p><p>问题来了，UTF-8变长编码格式的出现是为了节省存储空间，变长导致了UTF-8的兼容性相应降低。</p><p>类似的，对未来会出现的需要4个字节的辅助平面字符和其他UCS-4扩充字符，2字节编码的UTF-16也需要通过一定的算法进行转换。</p><p>也就是说，UTF-16是为未来准备的变长编码格式。</p><p>还有就是，在Mac和普通PC上，对于字节顺序的理解是不一致的。这时同一字节流可能会被解释为不同内容，如某字符为十六进制编码4E59，按两个字节拆分为4E和59，在Mac上读取时是从低字节开始，那么在Mac OS会认为此4E59编码为594E，找到的字符为“奎”，而在Windows上从高字节开始读取，则编码为U+4E59的字符为“乙”。就是说在Windows下以UTF-16编码保存一个字符“乙”，在Mac OS环境下打开会显示成“奎”。此类情况说明UTF-16的编码顺序若不加以人为定义就可能发生混淆。</p><p>于是在UTF-16编码实现方式中使用了<strong>大端序</strong>（Big-Endian，简写为UTF-16 BE）、<strong>小端序</strong>（Little-Endian，简写为UTF-16 LE）的概念，以及可附加的字节顺序记号解决方案，目前在PC机上的Windows系统和Linux系统对于UTF-16编码默认使用UTF-16 LE。目前在PC机上的Windows系统和Linux系统对于UTF-16编码默认使用UTF-16 LE。</p><p>在Windows XP附带的记事本，“另存为”对话框可以选择的四种编码方式除去非Unicode编码的ANSI（对于英文系统即ASCII编码），中文系统则为GB2312或Big5外，其余三种为“Unicode”（对应UTF-16 LE）、“Unicode big endian”（对应UTF-16 BE）和“UTF-8”。</p><h2 id="5、UTF-8"><a href="#5、UTF-8" class="headerlink" title="5、UTF-8"></a>5、UTF-8</h2><p>UTF-8，是我们最经常看到的编码格式之一。前面已经简单介绍过，这是一种变长编码格式，变长的目的是节省存储空间。</p><p>UTF-8使用一至六个字节为每个字符编码（2003年11月UTF-8被RFC 3629重新规范，只能使用原来Unicode定义的区域，U+0000到U+10FFFF，也就是说最多四个字节）。</p><p>下面介绍其编码规则：</p><p>1、128个US-ASCII字符只需一个字节编码（Unicode范围由U+0000至U+007F）。</p><p>2、带有附加符号的拉丁文、希腊文、西里尔字母、亚美尼亚语、希伯来文、阿拉伯文等则需要两个字节编码（Unicode范围由U+0080至U+07FF）。</p><p>3、其他基本多文种平面（BMP）中的字元（这包含了大部分常用字，如大部分的汉字）使用三个字节编码（Unicode范围由U+0800至U+FFFF）。</p><p>4、其他极少使用的Unicode 辅助平面的字元使用四至六字节编码。（Unicode范围由U+10000至U+1FFFFF使用四字节，Unicode范围由U+200000至U+3FFFFFF使用五字节，Unicode范围由U+4000000至U+7FFFFFFF使用六字节）。</p><p>对上述提及的第四种字元而言，UTF-8使用四至六个字节来编码似乎太耗费资源了。但UTF-8对所有常用的字元都可以用三个字节表示，而且它的另一种选择，UTF-16编码，对前述的第四种字符同样需要四个字节来编码，所以要决定UTF-8或UTF-16哪种编码比较有效率，还要视所使用的字元的分布范围而定。</p><p>下面来看看UTF-8具体怎么编码各种类型的字符：</p><p>1、单字节编码，字节由零开始：0zzzzzzz。（z取值0或1，下同）</p><p>2、两字节编码：（110yyyyy 10zzzzzz）第一个字节由110开始，接着的字节由10开始</p><p>3、三字节编码：（01110xxxx10yyyyyy 10zzzzzz）第一个字节由1110开始，接着的字节由10开始。</p><p>4、四字节编码：（11110www 10xxxxxx 10yyyyyy 10zzzzzz）将由11110开始，接着的字节由10开始</p><p><img src="/posts/7593ac01/648342-917ea7cc8c20242d.webp" alt="img"></p><p>Unicode和UTF-8之间的转换关系表</p><h2 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h2><p><strong>UTF-16</strong>是Unicode字符编码五层次模型的第三层：字符编码表。即把Unicode字符集的抽象码位映射为16位长的整数，用于数据存储或传递。Unicode字符的码位，需要1个或者2个16位长的码元来表示，因此这是一个变长表示。</p><p>Unicode的编码空间从U+0000到+10FFFF，共有1,112,064个码位（code point）可用来映射字符. Unicode的编码空间可以划分为17个平面（plane），每个平面包含216（65,536）个码位。17个平面的码位可表示为从U+xx0000到U+xxFFFF,其中xx表示十六进制值从0016到1016，共计17个平面。第一个平面称为<strong>基本多语言平面</strong>（Basic Multilingual Plane, <strong>BMP</strong>），或称第零平面（Plane 0）。其他平面称为<strong>辅助平面</strong>（Supplementary Planes）。基本多语言平面内，从U+D800到U+DFFF之间的码位区段是永久保留不映射到Unicode字符。UTF-16就利用保留下来的0xD800-0xDFFF区段的码位来对辅助平面的字符的码位进行编码。</p><p>分平面来介绍UTF-16的实现方式：</p><p>1、第一个Unicode平面（码位从U+0000至U+FFFF）包含了最常用的字符。该平面被称为基本多语言平面，缩写为<em>BMP</em>（Basic Multilingual Plane, BMP）。UTF-16与<a href="https://link.jianshu.com/?t=https://zh.wikipedia.org/wiki/UCS-2">UCS-2</a>编码这个范围内的码位为16比特长的单个码元，数值等价于对应的码位. BMP中的这些码位是仅有的可以在UCS-2中表示的码位.</p><p>2、辅助平面（Supplementary Planes）中的码位，在UTF-16中被编码为<strong>一对</strong>16比特长的码元（即32bit,4Bytes），称作<em>代理对</em>(surrogate pair),具体方法是：</p><ul><li>码位减去0x10000,得到的值的范围为20比特长的0..0xFFFFF.</li><li>高位的10比特的值（值的范围为0..0x3FF）被加上0xD800得到第一个码元或称作高位代理。</li><li>低位的10比特的值（值的范围也是0..0x3FF）被加上0xDC00得到第二个码元或称作低位代理（low surrogate），现在值的范围是0xDC00..0xDFFF.</li></ul><p>算法可理解为：辅助平面中的码位从U+10000到U+10FFFF，共计FFFFF个，即220<br> =1,048,576个，需要20位来表示。如果用两个16位长的整数组成的序列来表示，第一个整数（称为前导代理）要容纳上述20位的前10位，第二个整数（称为后尾代理）容纳上述20位的后10位。还要能根据16位整数的值直接判明属于前导整数代理的值的范围（210=1024)，还是后尾整数代理的值的范围（也是210<br> =1024）。因此，需要在基本多语言平面中保留不对应于Unicode字符的2048个码位，就足以容纳前导代理与后尾代理所需要的编码空间。这对于基本多语言平面总计65536个码位来说，仅占3.125%.</p><p>3、Unicode标准规定U+D800..U+DFFF的值不对应于任何字符.</p><p><img src="/posts/7593ac01/648342-49c956e118260784.webp" alt="img"></p><h2 id="Unicode汉字内码对应表"><a href="#Unicode汉字内码对应表" class="headerlink" title="Unicode汉字内码对应表"></a>Unicode汉字内码对应表</h2><p>啊:21834 阿:38463 埃:22467 挨:25384 哎:21710 唉:21769 哀:21696 皑:30353 癌:30284 蔼:34108 矮:30702艾:33406 碍:30861 爱:29233 隘:38552 鞍:38797 氨:27688 安:23433 俺:20474 按:25353 暗:26263 岸:23736胺:33018 案:26696 肮:32942 昂:26114 盎:30414 凹:20985 敖:25942 熬:29100 翱:32753 袄:34948 傲:20658奥:22885 懊:25034 澳:28595 芭:33453 捌:25420 扒:25170 叭:21485 吧:21543 笆:31494 八:20843 疤:30116巴:24052 拔:25300 跋:36299 靶:38774 把:25226 耙:32793 坝:22365 霸:38712 罢:32610 爸:29240 白:30333柏:26575 百:30334 摆:25670 佰:20336 败:36133 拜:25308 稗:31255 斑:26001 班:29677 搬:25644 扳:25203般:33324 颁:39041 板:26495 版:29256 扮:25198 拌:25292 伴:20276 瓣:29923 半:21322 办:21150 绊:32458邦:37030 帮:24110 梆:26758 榜:27036 膀:33152 绑:32465 棒:26834 磅:30917 蚌:34444 镑:38225 傍:20621谤:35876 苞:33502 胞:32990 包:21253 褒:35090 剥:21093 薄:34180 雹:38649 保:20445 堡:22561 饱:39281宝:23453 抱:25265 报:25253 暴:26292 豹:35961 鲍:40077 爆:29190 杯:26479 碑:30865 悲:24754 卑:21329北:21271 辈:36744 背:32972 贝:36125 钡:38049 倍:20493 狈:29384 备:22791 惫:24811 焙:28953 被:34987奔:22868 苯:33519 本:26412 笨:31528 崩:23849 绷:32503 甭:29997 泵:27893 蹦:36454 迸:36856 逼:36924鼻:40763 比:27604 鄙:37145 笔:31508 彼:24444 碧:30887 蓖:34006 蔽:34109 毕:27605 毙:27609 毖:27606币:24065 庇:24199 痹:30201 闭:38381 敝:25949 弊:24330 必:24517 辟:36767 壁:22721 臂:33218 避:36991陛:38491 鞭:38829 边:36793 编:32534 贬:36140 扁:25153 便:20415 变:21464 卞:21342 辨:36776 辩:36777辫:36779 遍:36941 标:26631 彪:24426 膘:33176 表:34920 鳖:40150 憋:24971 别:21035 瘪:30250 彬:24428斌:25996 濒:28626 滨:28392 宾:23486 摈:25672 兵:20853 冰:20912 柄:26564 丙:19993 秉:31177 饼:39292炳:28851 病:30149 并:24182 玻:29627 菠:33760 播:25773 拨:25320 钵:38069 波:27874 博:21338 勃:21187搏:25615 铂:38082 箔:31636 伯:20271 帛:24091 舶:33334 脖:33046 膊:33162 渤:28196 泊:27850 驳:39539捕:25429 卜:21340 哺:21754 补:34917 埠:22496 不:19981 布:24067 步:27493 簿:31807 部:37096 怖:24598擦:25830 猜:29468 裁:35009 材:26448 才:25165 财:36130 睬:30572 踩:36393 采:37319 彩:24425 菜:33756蔡:34081 餐:39184 参:21442 蚕:34453 残:27531 惭:24813 惨:24808 灿:28799 苍:33485 舱:33329 仓:20179沧:27815 藏:34255 操:25805 糙:31961 槽:27133 曹:26361 草:33609 厕:21397 策:31574 侧:20391 册:20876测:27979 层:23618 蹭:36461 插:25554 叉:21449 茬:33580 茶:33590 查:26597 碴:30900 搽:25661 察:23519岔:23700 差:24046 诧:35815 拆:25286 柴:26612 豺:35962 搀:25600 掺:25530 蝉:34633 馋:39307 谗:35863缠:32544 铲:38130 产:20135 阐:38416 颤:39076 昌:26124 猖:29462 场:22330 尝:23581 常:24120 长:38271偿:20607 肠:32928 厂:21378 敞:25950 畅:30021 唱:21809 倡:20513 超:36229 抄:25220 钞:38046 朝:26397嘲:22066 潮:28526 巢:24034 吵:21557 炒:28818 车:36710 扯:25199 撤:25764 掣:25507 彻:24443 澈:28552郴:37108 臣:33251 辰:36784 尘:23576 晨:26216 忱:24561 沉:27785 陈:38472 趁:36225 衬:34924 撑:25745称:31216 城:22478 橙:27225 成:25104 呈:21576 乘:20056 程:31243 惩:24809 澄:28548 诚:35802 承:25215逞:36894 骋:39563 秤:31204 吃:21507 痴:30196 持:25345 匙:21273 池:27744 迟:36831 弛:24347 驰:39536耻:32827 齿:40831 侈:20360 尺:23610 赤:36196 翅:32709 斥:26021 炽:28861 充:20805 冲:20914 虫:34411崇:23815 宠:23456 抽:25277 酬:37228 畴:30068 踌:36364 稠:31264 愁:24833 筹:31609 仇:20167 绸:32504瞅:30597 丑:19985 臭:33261 初:21021 出:20986 橱:27249 厨:21416 躇:36487 锄:38148 雏:38607 滁:28353除:38500 楚:26970 础:30784 储:20648 矗:30679 搐:25616 触:35302 处:22788 揣:25571 川:24029 穿:31359椽:26941 传:20256 船:33337 喘:21912 串:20018 疮:30126 窗:31383 幢:24162 床:24202 闯:38383 创:21019吹:21561 炊:28810 捶:25462 锤:38180 垂:22402 春:26149 椿:26943 醇:37255 唇:21767 淳:28147 纯:32431蠢:34850 戳:25139 绰:32496 疵:30133 茨:33576 磁:30913 雌:38604 辞:36766 慈:24904 瓷:29943 词:35789此:27492 刺:21050 赐:36176 次:27425 聪:32874 葱:33905 囱:22257 匆:21254 从:20174 丛:19995 凑:20945粗:31895 醋:37259 簇:31751 促:20419 蹿:36479 篡:31713 窜:31388 摧:25703 崔:23828 催:20652 脆:33030瘁:30209 粹:31929 淬:28140 翠:32736 村:26449 存:23384 寸:23544 磋:30923 撮:25774 搓:25619 措:25514挫:25387 错:38169 搭:25645 达:36798 答:31572 瘩:30249 打:25171 大:22823 呆:21574 歹:27513 傣:20643戴:25140 带:24102 殆:27526 代:20195 贷:36151 袋:34955 待:24453 逮:36910 怠:24608 耽:32829 担:25285丹:20025 单:21333 郸:37112 掸:25528 胆:32966 旦:26086 氮:27694 但:20294 惮:24814 淡:28129 诞:35806弹:24377 蛋:34507 当:24403 挡:25377 党:20826 荡:33633 档:26723 刀:20992 捣:25443 蹈:36424 倒:20498岛:23707 祷:31095 导:23548 到:21040 稻:31291 悼:24764 道:36947 盗:30423 德:24503 得:24471 的:30340蹬:36460 灯:28783 登:30331 等:31561 瞪:30634 凳:20979 邓:37011 堤:22564 低:20302 滴:28404 迪:36842敌:25932 笛:31515 狄:29380 涤:28068 翟:32735 嫡:23265 抵:25269 底:24213 地:22320 蒂:33922 第:31532帝:24093 弟:24351 递:36882 缔:32532 颠:39072 掂:25474 滇:28359 碘:30872 点:28857 典:20856 靛:38747垫:22443 电:30005 佃:20291 甸:30008 店:24215 惦:24806 奠:22880 淀:28096 殿:27583 碉:30857 叼:21500雕:38613 凋:20939 刁:20993 掉:25481 吊:21514 钓:38035 调:35843 跌:36300 爹:29241 碟:30879 蝶:34678迭:36845 谍:35853 叠:21472 丁:19969 盯:30447 叮:21486 钉:38025 顶:39030 鼎:40718 锭:38189 定:23450订:35746 丢:20002 东:19996 冬:20908 董:33891 懂:25026 动:21160 栋:26635 侗:20375 恫:24683 冻:20923洞:27934 兜:20828 抖:25238 斗:26007 陡:38497 豆:35910 逗:36887 痘:30168 都:37117 督:30563 毒:27602犊:29322 独:29420 读:35835 堵:22581 睹:30585 赌:36172 杜:26460 镀:38208 肚:32922 度:24230 渡:28193妒:22930 端:31471 短:30701 锻:38203 段:27573 断:26029 缎:32526 堆:22534 兑:20817 队:38431 对:23545墩:22697 吨:21544 蹲:36466 敦:25958 顿:39039 囤:22244 钝:38045 盾:30462 遁:36929 掇:25479 哆:21702多:22810 夺:22842 垛:22427 躲:36530 朵:26421 跺:36346 舵:33333 剁:21057 惰:24816 堕:22549 蛾:34558峨:23784 鹅:40517 俄:20420 额:39069 讹:35769 娥:23077 恶:24694 厄:21380 扼:25212 遏:36943 鄂:37122饿:39295 恩:24681 而:32780 儿:20799 耳:32819 尔:23572 饵:39285 洱:27953 二:20108 贰:36144 发:21457罚:32602 筏:31567 伐:20240 乏:20047 阀:38400 法:27861 珐:29648 藩:34281 帆:24070 番:30058 翻:32763樊:27146 矾:30718 钒:38034 繁:32321 凡:20961 烦:28902 反:21453 返:36820 范:33539 贩:36137 犯:29359饭:39277 泛:27867 坊:22346 芳:33459 方:26041 肪:32938 房:25151 防:38450 妨:22952 仿:20223 访:35775纺:32442 放:25918 菲:33778 非:38750 啡:21857 飞:39134 肥:32933 匪:21290 诽:35837 吠:21536 肺:32954废:24223 沸:27832 费:36153 芬:33452 酚:37210 吩:21545 氛:27675 分:20998 纷:32439 坟:22367 焚:28954汾:27774 粉:31881 奋:22859 份:20221 忿:24575 愤:24868 粪:31914 丰:20016 封:23553 枫:26539 蜂:34562峰:23792 锋:38155 风:39118 疯:30127 烽:28925 逢:36898 冯:20911 缝:32541 讽:35773 奉:22857 凤:20964佛:20315 否:21542 夫:22827 敷:25975 肤:32932 孵:23413 扶:25206 拂:25282 辐:36752 幅:24133 氟:27679符:31526 伏:20239 俘:20440 服:26381 浮:28014 涪:28074 福:31119 袱:34993 弗:24343 甫:29995 抚:25242辅:36741 俯:20463 釜:37340 斧:26023 脯:33071 腑:33105 府:24220 腐:33104 赴:36212 副:21103 覆:35206赋:36171 复:22797 傅:20613 付:20184 阜:38428 父:29238 腹:33145 负:36127 富:23500 讣:35747 附:38468妇:22919 缚:32538 咐:21648 噶:22134 嘎:22030 该:35813 改:25913 概:27010 钙:38041 盖:30422 溉:28297干:24178 甘:29976 杆:26438 柑:26577 竿:31487 肝:32925 赶:36214 感:24863 秆:31174 敢:25954 赣:36195冈:20872 刚:21018 钢:38050 缸:32568 肛:32923 纲:32434 岗:23703 港:28207 杠:26464 篙:31705 皋:30347高:39640 膏:33167 羔:32660 糕:31957 搞:25630 镐:38224 稿:31295 告:21578 哥:21733 歌:27468 搁:25601戈:25096 鸽:40509 胳:33011 疙:30105 割:21106 革:38761 葛:33883 格:26684 蛤:34532 阁:38401 隔:38548铬:38124 个:20010 各:21508 给:32473 根:26681 跟:36319 耕:32789 更:26356 庚:24218 羹:32697 埂:22466耿:32831 梗:26775 工:24037 攻:25915 功:21151 恭:24685 龚:40858 供:20379 躬:36524 公:20844 宫:23467弓:24339 巩:24041 汞:27742 拱:25329 贡:36129 共:20849 钩:38057 勾:21246 沟:27807 苟:33503 狗:29399垢:22434 构:26500 购:36141 够:22815 辜:36764 菇:33735 咕:21653 箍:31629 估:20272 沽:27837 孤:23396姑:22993 鼓:40723 古:21476 蛊:34506 骨:39592 谷:35895 股:32929 故:25925 顾:39038 固:22266 雇:38599刮:21038 瓜:29916 剐:21072 寡:23521 挂:25346 褂:35074 乖:20054 拐:25296 怪:24618 棺:26874 关:20851官:23448 冠:20896 观:35266 管:31649 馆:39302 罐:32592 惯:24815 灌:28748 贯:36143 光:20809 广:24191逛:36891 瑰:29808 规:35268 圭:22317 硅:30789 归:24402 龟:40863 闺:38394 轨:36712 鬼:39740 诡:35809癸:30328 桂:26690 柜:26588 跪:36330 贵:36149 刽:21053 辊:36746 滚:28378 棍:26829 锅:38149 郭:37101国:22269 果:26524 裹:35065 过:36807 哈:21704 骸:39608 孩:23401 海:28023 氦:27686 亥:20133 害:23475骇:39559 酣:37219 憨:25000 邯:37039 韩:38889 含:21547 涵:28085 寒:23506 函:20989 喊:21898 罕:32597翰:32752 撼:25788 捍:25421 旱:26097 憾:25022 悍:24717 焊:28938 汗:27735 汉:27721 夯:22831 杭:26477航:33322 壕:22741 嚎:22158 豪:35946 毫:27627 郝:37085 好:22909 耗:32791 号:21495 浩:28009 呵:21621喝:21917 荷:33655 菏:33743 核:26680 禾:31166 和:21644 何:20309 合:21512 盒:30418 貉:35977 阂:38402河:27827 涸:28088 赫:36203 褐:35088 鹤:40548 贺:36154 嘿:22079 黑:40657 痕:30165 很:24456 狠:29408恨:24680 哼:21756 亨:20136 横:27178 衡:34913 恒:24658 轰:36720 哄:21700 烘:28888 虹:34425 鸿:40511洪:27946 宏:23439 弘:24344 红:32418 喉:21897 侯:20399 猴:29492 吼:21564 厚:21402 候:20505 后:21518呼:21628 乎:20046 忽:24573 瑚:29786 壶:22774 葫:33899 胡:32993 蝴:34676 狐:29392 糊:31946 湖:28246弧:24359 虎:34382 唬:21804 护:25252 互:20114 沪:27818 户:25143 花:33457 哗:21719 华:21326 猾:29502滑:28369 画:30011 划:21010 化:21270 话:35805 槐:27088 徊:24458 怀:24576 淮:28142 坏:22351 欢:27426环:29615 桓:26707 还:36824 缓:32531 换:25442 患:24739 唤:21796 痪:30186 豢:35938 焕:28949 涣:28067宦:23462 幻:24187 荒:33618 慌:24908 黄:40644 磺:30970 蝗:34647 簧:31783 皇:30343 凰:20976 惶:24822煌:29004 晃:26179 幌:24140 恍:24653 谎:35854 灰:28784 挥:25381 辉:36745 徽:24509 恢:24674 蛔:34516回:22238 毁:27585 悔:24724 慧:24935 卉:21321 惠:24800 晦:26214 贿:36159 秽:31229 会:20250 烩:28905汇:27719 讳:35763 诲:35826 绘:32472 荤:33636 昏:26127 婚:23130 魂:39746 浑:27985 混:28151 豁:35905活:27963 伙:20249 火:28779 获:33719 或:25110 惑:24785 霍:38669 货:36135 祸:31096 击:20987 圾:22334基:22522 机:26426 畸:30072 稽:31293 积:31215 箕:31637 肌:32908 饥:39269 迹:36857 激:28608 讥:35749鸡:40481 姬:23020 绩:32489 缉:32521 吉:21513 极:26497 棘:26840 辑:36753 籍:31821 集:38598 及:21450急:24613 疾:30142 汲:27762 即:21363 嫉:23241 级:32423 挤:25380 几:20960 脊:33034 己:24049 蓟:34015技:25216 冀:20864 季:23395 伎:20238 祭:31085 剂:21058 悸:24760 济:27982 寄:23492 寂:23490 计:35745记:35760 既:26082 忌:24524 际:38469 妓:22931 继:32487 纪:32426 嘉:22025 枷:26551 夹:22841 佳:20339家:23478 加:21152 荚:33626 颊:39050 贾:36158 甲:30002 钾:38078 假:20551 稼:31292 价:20215 架:26550驾:39550 嫁:23233 歼:27516 监:30417 坚:22362 尖:23574 笺:31546 间:38388 煎:29006 兼:20860 肩:32937艰:33392 奸:22904 缄:32516 茧:33575 检:26816 柬:26604 碱:30897 硷:30839 拣:25315 捡:25441 简:31616俭:20461 剪:21098 减:20943 荐:33616 槛:27099 鉴:37492 践:36341 贱:36145 见:35265 键:38190 箭:31661件:20214 健:20581 舰:33328 剑:21073 饯:39279 渐:28176 溅:28293 涧:28071 建:24314 僵:20725 姜:23004将:23558 浆:27974 江:27743 疆:30086 蒋:33931 桨:26728 奖:22870 讲:35762 匠:21280 酱:37233 降:38477蕉:34121 椒:26898 礁:30977 焦:28966 胶:33014 交:20132 郊:37066 浇:27975 骄:39556 娇:23047 嚼:22204搅:25605 铰:38128 矫:30699 侥:20389 脚:33050 狡:29409 角:35282 饺:39290 缴:32564 绞:32478 剿:21119教:25945 酵:37237 轿:36735 较:36739 叫:21483 窖:31382 揭:25581 接:25509 皆:30342 秸:31224 街:34903阶:38454 截:25130 劫:21163 节:33410 桔:26708 杰:26480 捷:25463 睫:30571 竭:31469 洁:27905 结:32467解:35299 姐:22992 戒:25106 藉:34249 芥:33445 界:30028 借:20511 介:20171 疥:30117 诫:35819 届:23626巾:24062 筋:31563 斤:26020 金:37329 今:20170 津:27941 襟:35167 紧:32039 锦:38182 仅:20165 谨:35880进:36827 靳:38771 晋:26187 禁:31105 近:36817 烬:28908 浸:28024 尽:23613 劲:21170 荆:33606 兢:20834茎:33550 睛:30555 晶:26230 鲸:40120 京:20140 惊:24778 精:31934 粳:31923 经:32463 井:20117 警:35686景:26223 颈:39048 静:38745 境:22659 敬:25964 镜:38236 径:24452 痉:30153 靖:38742 竟:31455 竞:31454净:20928 炯:28847 窘:31384 揪:25578 究:31350 纠:32416 玖:29590 韭:38893 久:20037 灸:28792 九:20061酒:37202 厩:21417 救:25937 旧:26087 臼:33276 舅:33285 咎:21646 就:23601 疚:30106 鞠:38816 拘:25304狙:29401 疽:30141 居:23621 驹:39545 菊:33738 局:23616 咀:21632 矩:30697 举:20030 沮:27822 聚:32858拒:25298 据:25454 巨:24040 具:20855 距:36317 踞:36382 锯:38191 俱:20465 句:21477 惧:24807 炬:28844剧:21095 捐:25424 鹃:40515 娟:23071 倦:20518 眷:30519 卷:21367 绢:32482 撅:25733 攫:25899 抉:25225掘:25496 倔:20500 爵:29237 觉:35273 决:20915 诀:35776 绝:32477 均:22343 菌:33740 钧:38055 军:20891君:21531 峻:23803 俊:20426 竣:31459 浚:27994 郡:37089 骏:39567 喀:21888 咖:21654 卡:21345 咯:21679开:24320 揩:25577 楷:26999 凯:20975 慨:24936 刊:21002 堪:22570 勘:21208 坎:22350 砍:30733 看:30475康:24247 慷:24951 糠:31968 扛:25179 抗:25239 亢:20130 炕:28821 考:32771 拷:25335 烤:28900 靠:38752坷:22391 苛:33499 柯:26607 棵:26869 磕:30933 颗:39063 科:31185 壳:22771 咳:21683 可:21487 渴:28212克:20811 刻:21051 客:23458 课:35838 肯:32943 啃:21827 垦:22438 恳:24691 坑:22353 吭:21549 空:31354恐:24656 孔:23380 控:25511 抠:25248 口:21475 扣:25187 寇:23495 枯:26543 哭:21741 窟:31391 苦:33510酷:37239 库:24211 裤:35044 夸:22840 垮:22446 挎:25358 跨:36328 胯:33007 块:22359 筷:31607 侩:20393快:24555 宽:23485 款:27454 匡:21281 筐:31568 狂:29378 框:26694 矿:30719 眶:30518 旷:26103 况:20917亏:20111 盔:30420 岿:23743 窥:31397 葵:33909 奎:22862 魁:39745 傀:20608 馈:39304 愧:24871 溃:28291坤:22372 昆:26118 捆:25414 困:22256 括:25324 扩:25193 廓:24275 阔:38420 垃:22403 拉:25289 喇:21895蜡:34593 腊:33098 辣:36771 啦:21862 莱:33713 来:26469 赖:36182 蓝:34013 婪:23146 栏:26639 拦:25318篮:31726 阑:38417 兰:20848 澜:28572 谰:35888 揽:25597 览:35272 懒:25042 缆:32518 烂:28866 滥:28389琅:29701 榔:27028 狼:29436 廊:24266 郎:37070 朗:26391 浪:28010 捞:25438 劳:21171 牢:29282 老:32769佬:20332 姥:23013 酪:37226 烙:28889 涝:28061 勒:21202 乐:20048 雷:38647 镭:38253 蕾:34174 磊:30922累:32047 儡:20769 垒:22418 擂:25794 肋:32907 类:31867 泪:27882 棱:26865 楞:26974 冷:20919 厘:21400梨:26792 犁:29313 黎:40654 篱:31729 狸:29432 离:31163 漓:28435 理:29702 李:26446 里:37324 鲤:40100礼:31036 莉:33673 荔:33620 吏:21519 栗:26647 丽:20029 厉:21385 励:21169 砾:30782 历:21382 利:21033傈:20616 例:20363 俐:20432 痢:30178 立:31435 粒:31890 沥:27813 隶:38582 力:21147 璃:29827 哩:21737俩:20457 联:32852 莲:33714 连:36830 镰:38256 廉:24265 怜:24604 涟:28063 帘:24088 敛:25947 脸:33080链:38142 恋:24651 炼:28860 练:32451 粮:31918 凉:20937 梁:26753 粱:31921 良:33391 两:20004 辆:36742量:37327 晾:26238 亮:20142 谅:35845 撩:25769 聊:32842 僚:20698 疗:30103 燎:29134 寥:23525 辽:36797潦:28518 了:20102 撂:25730 镣:38243 廖:24278 料:26009 列:21015 裂:35010 烈:28872 劣:21155 猎:29454琳:29747 林:26519 磷:30967 霖:38678 临:20020 邻:37051 鳞:40158 淋:28107 凛:20955 赁:36161 吝:21533拎:25294 玲:29618 菱:33777 零:38646 龄:40836 铃:38083 伶:20278 羚:32666 凌:20940 灵:28789 陵:38517岭:23725 领:39046 另:21478 令:20196 溜:28316 琉:29705 榴:27060 硫:30827 馏:39311 留:30041 刘:21016瘤:30244 流:27969 柳:26611 六:20845 龙:40857 聋:32843 咙:21657 笼:31548 窿:31423 隆:38534 垄:22404拢:25314 陇:38471 楼:27004 娄:23044 搂:25602 篓:31699 漏:28431 陋:38475 芦:33446 卢:21346 颅:39045庐:24208 炉:28809 掳:25523 卤:21348 虏:34383 鲁:40065 麓:40595 碌:30860 露:38706 路:36335 赂:36162鹿:40575 潞:28510 禄:31108 录:24405 陆:38470 戮:25134 驴:39540 吕:21525 铝:38109 侣:20387 旅:26053履:23653 屡:23649 缕:32533 虑:34385 氯:27695 律:24459 率:29575 滤:28388 绿:32511 峦:23782 挛:25371孪:23402 滦:28390 卵:21365 乱:20081 掠:25504 略:30053 抡:25249 轮:36718 伦:20262 仑:20177 沦:27814纶:32438 论:35770 萝:33821 螺:34746 罗:32599 逻:36923 锣:38179 箩:31657 骡:39585 裸:35064 落:33853洛:27931 骆:39558 络:32476 妈:22920 麻:40635 玛:29595 码:30721 蚂:34434 马:39532 骂:39554 嘛:22043吗:21527 埋:22475 买:20080 麦:40614 卖:21334 迈:36808 脉:33033 瞒:30610 馒:39314 蛮:34542 满:28385蔓:34067 曼:26364 慢:24930 漫:28459 谩:35881 芒:33426 茫:33579 盲:30450 氓:27667 忙:24537 莽:33725猫:29483 茅:33541 锚:38170 毛:27611 矛:30683 铆:38086 卯:21359 茂:33538 冒:20882 帽:24125 貌:35980贸:36152 么:20040 玫:29611 枚:26522 梅:26757 酶:37238 霉:38665 煤:29028 没:27809 眉:30473 媒:23186镁:38209 每:27599 美:32654 昧:26151 寐:23504 妹:22969 媚:23194 门:38376 闷:38391 们:20204 萌:33804蒙:33945 檬:27308 盟:30431 锰:38192 猛:29467 梦:26790 孟:23391 眯:30511 醚:37274 靡:38753 糜:31964迷:36855 谜:35868 弥:24357 米:31859 秘:31192 觅:35269 泌:27852 蜜:34588 密:23494 幂:24130 棉:26825眠:30496 绵:32501 冕:20885 免:20813 勉:21193 娩:23081 缅:32517 面:38754 苗:33495 描:25551 瞄:30596藐:34256 秒:31186 渺:28218 庙:24217 妙:22937 蔑:34065 灭:28781 民:27665 抿:25279 皿:30399 敏:25935悯:24751 闽:38397 明:26126 螟:34719 鸣:40483 铭:38125 名:21517 命:21629 谬:35884 摸:25720 摹:25721蘑:34321 模:27169 膜:33180 磨:30952 摩:25705 魔:39764 抹:25273 末:26411 莫:33707 墨:22696 默:40664沫:27819 漠:28448 寞:23518 陌:38476 谋:35851 牟:29279 某:26576 拇:25287 牡:29281 亩:20137 姆:22982母:27597 墓:22675 暮:26286 幕:24149 募:21215 慕:24917 木:26408 目:30446 睦:30566 牧:29287 穆:31302拿:25343 哪:21738 呐:21584 钠:38048 那:37027 娜:23068 纳:32435 氖:27670 乃:20035 奶:22902 耐:32784奈:22856 南:21335 男:30007 难:38590 囊:22218 挠:25376 脑:33041 恼:24700 闹:38393 淖:28118 呢:21602馁:39297 内:20869 嫩:23273 能:33021 妮:22958 霓:38675 倪:20522 泥:27877 尼:23612 拟:25311 你:20320匿:21311 腻:33147 逆:36870 溺:28346 蔫:34091 拈:25288 年:24180 碾:30910 撵:25781 捻:25467 念:24565娘:23064 酿:37247 鸟:40479 尿:23615 捏:25423 聂:32834 孽:23421 啮:21870 镊:38218 镍:38221 涅:28037您:24744 柠:26592 狞:29406 凝:20957 宁:23425 拧:25319 泞:27870 牛:29275 扭:25197 钮:38062 纽:32445脓:33043 浓:27987 农:20892 弄:24324 奴:22900 努:21162 怒:24594 女:22899 暖:26262 虐:34384 疟:30111挪:25386 懦:25062 糯:31983 诺:35834 哦:21734 欧:27431 鸥:40485 殴:27572 藕:34261 呕:21589 偶:20598沤:27812 啪:21866 趴:36276 爬:29228 帕:24085 怕:24597 琶:29750 拍:25293 排:25490 牌:29260 徘:24472湃:28227 派:27966 攀:25856 潘:28504 盘:30424 磐:30928 盼:30460 畔:30036 判:21028 叛:21467 乓:20051庞:24222 旁:26049 耪:32810 胖:32982 抛:25243 咆:21638 刨:21032 炮:28846 袍:34957 跑:36305 泡:27873呸:21624 胚:32986 培:22521 裴:35060 赔:36180 陪:38506 配:37197 佩:20329 沛:27803 喷:21943 盆:30406砰:30768 抨:25256 烹:28921 澎:28558 彭:24429 蓬:34028 棚:26842 硼:30844 篷:31735 膨:33192 朋:26379鹏:40527 捧:25447 碰:30896 坯:22383 砒:30738 霹:38713 批:25209 披:25259 劈:21128 琵:29749 毗:27607啤:21860 脾:33086 疲:30130 皮:30382 匹:21305 痞:30174 僻:20731 屁:23617 譬:35692 篇:31687 偏:20559片:29255 骗:39575 飘:39128 漂:28418 瓢:29922 票:31080 撇:25735 瞥:30629 拼:25340 频:39057 贫:36139品:21697 聘:32856 乒:20050 坪:22378 苹:33529 萍:33805 平:24179 凭:20973 瓶:29942 评:35780 屏:23631坡:22369 泼:27900 颇:39047 婆:23110 破:30772 魄:39748 迫:36843 粕:31893 剖:21078 扑:25169 铺:38138仆:20166 莆:33670 葡:33889 菩:33769 蒲:33970 埔:22484 朴:26420 圃:22275 普:26222 浦:28006 谱:35889曝:26333 瀑:28689 期:26399 欺:27450 栖:26646 戚:25114 妻:22971 七:19971 凄:20932 漆:28422 柒:26578沏:27791 其:20854 棋:26827 奇:22855 歧:27495 畦:30054 崎:23822 脐:33040 齐:40784 旗:26071 祈:31048祁:31041 骑:39569 起:36215 岂:23682 乞:20062 企:20225 启:21551 契:22865 砌:30732 器:22120 气:27668迄:36804 弃:24323 汽:27773 泣:27875 讫:35755 掐:25488 恰:24688 洽:27965 牵:29301 扦:25190 钎:38030铅:38085 千:21315 迁:36801 签:31614 仟:20191 谦:35878 乾:20094 黔:40660 钱:38065 钳:38067 前:21069潜:28508 遣:36963 浅:27973 谴:35892 堑:22545 嵌:23884 欠:27424 歉:27465 枪:26538 呛:21595 腔:33108羌:32652 墙:22681 蔷:34103 强:24378 抢:25250 橇:27207 锹:38201 敲:25970 悄:24708 桥:26725 瞧:30631乔:20052 侨:20392 巧:24039 鞘:38808 撬:25772 翘:32728 峭:23789 俏:20431 窍:31373 切:20999 茄:33540且:19988 怯:24623 窃:31363 钦:38054 侵:20405 亲:20146 秦:31206 琴:29748 勤:21220 芹:33465 擒:25810禽:31165 寝:23517 沁:27777 青:38738 轻:36731 氢:27682 倾:20542 卿:21375 清:28165 擎:25806 晴:26228氰:27696 情:24773 顷:39031 请:35831 庆:24198 琼:29756 穷:31351 秋:31179 丘:19992 邱:37041 球:29699求:27714 囚:22234 酋:37195 泅:27845 趋:36235 区:21306 蛆:34502 曲:26354 躯:36527 屈:23624 驱:39537渠:28192 取:21462 娶:23094 龋:40843 趣:36259 去:21435 圈:22280 颧:39079 权:26435 醛:37275 泉:27849全:20840 痊:30154 拳:25331 犬:29356 券:21048 劝:21149 缺:32570 炔:28820 瘸:30264 却:21364 鹊:40522榷:27063 确:30830 雀:38592 裙:35033 群:32676 然:28982 燃:29123 冉:20873 染:26579 瓤:29924 壤:22756攘:25880 嚷:22199 让:35753 饶:39286 扰:25200 绕:32469 惹:24825 热:28909 壬:22764 仁:20161 人:20154忍:24525 韧:38887 任:20219 认:35748 刃:20995 妊:22922 纫:32427 扔:25172 仍:20173 日:26085 戎:25102茸:33592 蓉:33993 荣:33635 融:34701 熔:29076 溶:28342 容:23481 绒:32466 冗:20887 揉:25545 柔:26580肉:32905 茹:33593 蠕:34837 儒:20754 孺:23418 如:22914 辱:36785 乳:20083 汝:27741 入:20837 褥:35109软:36719 阮:38446 蕊:34122 瑞:29790 锐:38160 闰:38384 润:28070 若:33509 弱:24369 撒:25746 洒:27922萨:33832 腮:33134 鳃:40131 塞:22622 赛:36187 三:19977 叁:21441 伞:20254 散:25955 桑:26705 嗓:21971丧:20007 搔:25620 骚:39578 扫:25195 嫂:23234 瑟:29791 色:33394 涩:28073 森:26862 僧:20711 莎:33678砂:30722 杀:26432 刹:21049 沙:27801 纱:32433 傻:20667 啥:21861 煞:29022 筛:31579 晒:26194 珊:29642苫:33515 杉:26441 山:23665 删:21024 煽:29053 衫:34923 闪:38378 陕:38485 擅:25797 赡:36193 膳:33203善:21892 汕:27733 扇:25159 缮:32558 墒:22674 伤:20260 商:21830 赏:36175 晌:26188 上:19978 尚:23578裳:35059 梢:26786 捎:25422 稍:31245 烧:28903 芍:33421 勺:21242 韶:38902 少:23569 哨:21736 邵:37045绍:32461 奢:22882 赊:36170 蛇:34503 舌:33292 舍:33293 赦:36198 摄:25668 射:23556 慑:24913 涉:28041社:31038 设:35774 砷:30775 申:30003 呻:21627 伸:20280 身:36523 深:28145 娠:23072 绅:32453 神:31070沈:27784 审:23457 婶:23158 甚:29978 肾:32958 慎:24910 渗:28183 声:22768 生:29983 甥:29989 牲:29298升:21319 绳:32499 省:30465 盛:30427 剩:21097 胜:32988 圣:22307 师:24072 失:22833 狮:29422 施:26045湿:28287 诗:35799 尸:23608 虱:34417 十:21313 石:30707 拾:25342 时:26102 什:20160 食:39135 蚀:34432实:23454 识:35782 史:21490 矢:30690 使:20351 屎:23630 驶:39542 始:22987 式:24335 示:31034 士:22763世:19990 柿:26623 事:20107 拭:25325 誓:35475 逝:36893 势:21183 是:26159 嗜:21980 噬:22124 适:36866仕:20181 侍:20365 释:37322 饰:39280 氏:27663 市:24066 恃:24643 室:23460 视:35270 试:35797 收:25910手:25163 首:39318 守:23432 寿:23551 授:25480 售:21806 受:21463 瘦:30246 兽:20861 蔬:34092 枢:26530梳:26803 殊:27530 抒:25234 输:36755 叔:21460 舒:33298 淑:28113 疏:30095 书:20070 赎:36174 孰:23408熟:29087 薯:34223 暑:26257 曙:26329 署:32626 蜀:34560 黍:40653 鼠:40736 属:23646 术:26415 述:36848树:26641 束:26463 戍:25101 竖:31446 墅:22661 庶:24246 数:25968 漱:28465 恕:24661 刷:21047 耍:32781摔:25684 衰:34928 甩:29993 帅:24069 栓:26643 拴:25332 霜:38684 双:21452 爽:29245 谁:35841 水:27700睡:30561 税:31246 吮:21550 瞬:30636 顺:39034 舜:33308 说:35828 硕:30805 朔:26388 烁:28865 斯:26031撕:25749 嘶:22070 思:24605 私:31169 司:21496 丝:19997 死:27515 肆:32902 寺:23546 嗣:21987 四:22235伺:20282 似:20284 饲:39282 巳:24051 松:26494 耸:32824 怂:24578 颂:39042 送:36865 宋:23435 讼:35772诵:35829 搜:25628 艘:33368 擞:25822 嗽:22013 苏:33487 酥:37221 俗:20439 素:32032 速:36895 粟:31903僳:20723 塑:22609 溯:28335 宿:23487 诉:35785 肃:32899 酸:37240 蒜:33948 算:31639 虽:34429 隋:38539随:38543 绥:32485 髓:39635 碎:30862 岁:23681 穗:31319 遂:36930 隧:38567 祟:31071 孙:23385 损:25439笋:31499 蓑:34001 梭:26797 唆:21766 缩:32553 琐:29712 索:32034 锁:38145 所:25152 塌:22604 他:20182它:23427 她:22905 塔:22612 獭:29549 挞:25374 蹋:36427 踏:36367 胎:32974 苔:33492 抬:25260 台:21488泰:27888 酞:37214 太:22826 态:24577 汰:27760 坍:22349 摊:25674 贪:36138 瘫:30251 滩:28393 坛:22363檀:27264 痰:30192 潭:28525 谭:35885 谈:35848 坦:22374 毯:27631 袒:34962 碳:30899 探:25506 叹:21497炭:28845 汤:27748 塘:22616 搪:25642 堂:22530 棠:26848 膛:33179 唐:21776 糖:31958 倘:20504 躺:36538淌:28108 趟:36255 烫:28907 掏:25487 涛:28059 滔:28372 绦:32486 萄:33796 桃:26691 逃:36867 淘:28120陶:38518 讨:35752 套:22871 特:29305 藤:34276 腾:33150 疼:30140 誊:35466 梯:26799 剔:21076 踢:36386锑:38161 提:25552 题:39064 蹄:36420 啼:21884 体:20307 替:26367 嚏:22159 惕:24789 涕:28053 剃:21059屉:23625 天:22825 添:28155 填:22635 田:30000 甜:29980 恬:24684 舔:33300 腆:33094 挑:25361 条:26465迢:36834 眺:30522 跳:36339 贴:36148 铁:38081 帖:24086 厅:21381 听:21548 烃:28867 汀:27712 廷:24311停:20572 亭:20141 庭:24237 挺:25402 艇:33351 通:36890 桐:26704 酮:37230 瞳:30643 同:21516 铜:38108彤:24420 童:31461 桶:26742 捅:25413 筒:31570 统:32479 痛:30171 偷:20599 投:25237 头:22836 透:36879凸:20984 秃:31171 突:31361 图:22270 徒:24466 途:36884 涂:28034 屠:23648 土:22303 吐:21520 兔:20820湍:28237 团:22242 推:25512 颓:39059 腿:33151 蜕:34581 褪:35114 退:36864 吞:21534 屯:23663 臀:33216拖:25302 托:25176 脱:33073 鸵:40501 陀:38464 驮:39534 驼:39548 椭:26925 妥:22949 拓:25299 唾:21822挖:25366 哇:21703 蛙:34521 洼:27964 娃:23043 瓦:29926 袜:34972 歪:27498 外:22806 豌:35916 弯:24367湾:28286 玩:29609 顽:39037 丸:20024 烷:28919 完:23436 碗:30871 挽:25405 晚:26202 皖:30358 惋:24779宛:23451 婉:23113 万:19975 腕:33109 汪:27754 王:29579 亡:20129 枉:26505 网:32593 往:24448 旺:26106望:26395 忘:24536 妄:22916 威:23041 巍:24013 微:24494 危:21361 韦:38886 违:36829 桅:26693 围:22260唯:21807 惟:24799 为:20026 潍:28493 维:32500 苇:33479 萎:33806 委:22996 伟:20255 伪:20266 尾:23614纬:32428 未:26410 蔚:34074 味:21619 畏:30031 胃:32963 喂:21890 魏:39759 位:20301 渭:28205 谓:35859尉:23561 慰:24944 卫:21355 瘟:30239 温:28201 蚊:34442 文:25991 闻:38395 纹:32441 吻:21563 稳:31283紊:32010 问:38382 嗡:21985 翁:32705 瓮:29934 挝:25373 蜗:34583 涡:28065 窝:31389 我:25105 斡:26017卧:21351 握:25569 沃:27779 巫:24043 呜:21596 钨:38056 乌:20044 污:27745 诬:35820 屋:23627 无:26080芜:33436 梧:26791 吾:21566 吴:21556 毋:27595 武:27494 五:20116 捂:25410 午:21320 舞:33310 伍:20237侮:20398 坞:22366 戊:25098 雾:38654 晤:26212 物:29289 勿:21247 务:21153 悟:24735 误:35823 昔:26132熙:29081 析:26512 西:35199 硒:30802 矽:30717 晰:26224 嘻:22075 吸:21560 锡:38177 牺:29306 稀:31232息:24687 希:24076 悉:24713 膝:33181 夕:22805 惜:24796 熄:29060 烯:28911 溪:28330 汐:27728 犀:29312檄:27268 袭:34989 席:24109 习:20064 媳:23219 喜:21916 铣:38115 洗:27927 系:31995 隙:38553 戏:25103细:32454 瞎:30606 虾:34430 匣:21283 霞:38686 辖:36758 暇:26247 峡:23777 侠:20384 狭:29421 下:19979厦:21414 夏:22799 吓:21523 掀:25472 锨:38184 先:20808 仙:20185 鲜:40092 纤:32420 咸:21688 贤:36132衔:34900 舷:33335 闲:38386 涎:28046 弦:24358 嫌:23244 显:26174 险:38505 现:29616 献:29486 县:21439腺:33146 馅:39301 羡:32673 宪:23466 陷:38519 限:38480 线:32447 相:30456 厢:21410 镶:38262 香:39321箱:31665 襄:35140 湘:28248 乡:20065 翔:32724 祥:31077 详:35814 想:24819 响:21709 享:20139 项:39033巷:24055 橡:27233 像:20687 向:21521 象:35937 萧:33831 硝:30813 霄:38660 削:21066 哮:21742 嚣:22179销:38144 消:28040 宵:23477 淆:28102 晓:26195 小:23567 孝:23389 校:26657 肖:32918 啸:21880 笑:31505效:25928 楔:26964 些:20123 歇:27463 蝎:34638 鞋:38795 协:21327 挟:25375 携:25658 邪:37034 斜:26012胁:32961 谐:35856 写:20889 械:26800 卸:21368 蟹:34809 懈:25032 泄:27844 泻:27899 谢:35874 屑:23633薪:34218 芯:33455 锌:38156 欣:27427 辛:36763 新:26032 忻:24571 心:24515 信:20449 衅:34885 星:26143腥:33125 猩:29481 惺:24826 兴:20852 刑:21009 型:22411 形:24418 邢:37026 行:34892 醒:37266 幸:24184杏:26447 性:24615 姓:22995 兄:20804 凶:20982 胸:33016 匈:21256 汹:27769 雄:38596 熊:29066 休:20241修:20462 羞:32670 朽:26429 嗅:21957 锈:38152 秀:31168 袖:34966 绣:32483 墟:22687 戌:25100 需:38656虚:34394 嘘:22040 须:39035 徐:24464 许:35768 蓄:33988 酗:37207 叙:21465 旭:26093 序:24207 畜:30044恤:24676 絮:32110 婿:23167 绪:32490 续:32493 轩:36713 喧:21927 宣:23459 悬:24748 旋:26059 玄:29572选:36873 癣:30307 眩:30505 绚:32474 靴:38772 薛:34203 学:23398 穴:31348 雪:38634 血:34880 勋:21195熏:29071 循:24490 旬:26092 询:35810 寻:23547 驯:39535 巡:24033 殉:27529 汛:27739 训:35757 讯:35759逊:36874 迅:36805 压:21387 押:25276 鸦:40486 鸭:40493 呀:21568 丫:20011 芽:33469 牙:29273 蚜:34460崖:23830 衙:34905 涯:28079 雅:38597 哑:21713 亚:20122 讶:35766 焉:28937 咽:21693 阉:38409 烟:28895淹:28153 盐:30416 严:20005 研:30740 蜒:34578 岩:23721 延:24310 言:35328 颜:39068 阎:38414 炎:28814沿:27839 奄:22852 掩:25513 眼:30524 衍:34893 演:28436 艳:33395 堰:22576 燕:29141 厌:21388 砚:30746雁:38593 唁:21761 彦:24422 焰:28976 宴:23476 谚:35866 验:39564 殃:27523 央:22830 鸯:40495 秧:31207杨:26472 扬:25196 佯:20335 疡:30113 羊:32650 洋:27915 阳:38451 氧:27687 仰:20208 痒:30162 养:20859样:26679 漾:28478 邀:36992 腰:33136 妖:22934 瑶:29814 摇:25671 尧:23591 遥:36965 窑:31377 谣:35875姚:23002 咬:21676 舀:33280 药:33647 要:35201 耀:32768 椰:26928 噎:22094 耶:32822 爷:29239 野:37326冶:20918 也:20063 页:39029 掖:25494 业:19994 叶:21494 曳:26355 腋:33099 夜:22812 液:28082 一:19968壹:22777 医:21307 揖:25558 铱:38129 依:20381 伊:20234 衣:34915 颐:39056 夷:22839 遗:36951 移:31227仪:20202 胰:33008 疑:30097 沂:27778 宜:23452 姨:23016 彝:24413 椅:26885 蚁:34433 倚:20506 已:24050乙:20057 矣:30691 以:20197 艺:33402 抑:25233 易:26131 邑:37009 屹:23673 亿:20159 役:24441 臆:33222逸:36920 肄:32900 疫:30123 亦:20134 裔:35028 意:24847 毅:27589 忆:24518 义:20041 益:30410 溢:28322诣:35811 议:35758 谊:35850 译:35793 异:24322 翼:32764 翌:32716 绎:32462 茵:33589 荫:33643 因:22240殷:27575 音:38899 阴:38452 姻:23035 吟:21535 银:38134 淫:28139 寅:23493 饮:39278 尹:23609 引:24341隐:38544 印:21360 英:33521 樱:27185 婴:23156 鹰:40560 应:24212 缨:32552 莹:33721 萤:33828 营:33829荧:33639 蝇:34631 迎:36814 赢:36194 盈:30408 影:24433 颖:39062 硬:30828 映:26144 哟:21727 拥:25317佣:20323 臃:33219 痈:30152 庸:24248 雍:38605 踊:36362 蛹:34553 咏:21647 泳:27891 涌:28044 永:27704恿:24703 勇:21191 用:29992 幽:24189 优:20248 悠:24736 忧:24551 尤:23588 由:30001 邮:37038 铀:38080犹:29369 油:27833 游:28216 酉:37193 有:26377 友:21451 右:21491 佑:20305 釉:37321 诱:35825 又:21448幼:24188 迂:36802 淤:28132 于:20110 盂:30402 榆:27014 虞:34398 愚:24858 舆:33286 余:20313 俞:20446逾:36926 鱼:40060 愉:24841 渝:28189 渔:28180 隅:38533 予:20104 娱:23089 雨:38632 与:19982 屿:23679禹:31161 宇:23431 语:35821 羽:32701 玉:29577 域:22495 芋:33419 郁:37057 吁:21505 遇:36935 喻:21947峪:23786 御:24481 愈:24840 欲:27442 狱:29425 育:32946 誉:35465 浴:28020 寓:23507 裕:35029 预:39044豫:35947 驭:39533 鸳:40499 渊:28170 冤:20900 元:20803 垣:22435 袁:34945 原:21407 援:25588 辕:36757园:22253 员:21592 圆:22278 猿:29503 源:28304 缘:32536 远:36828 苑:33489 愿:24895 怨:24616 院:38498曰:26352 约:32422 越:36234 跃:36291 钥:38053 岳:23731 粤:31908 月:26376 悦:24742 阅:38405 耘:32792云:20113 郧:37095 匀:21248 陨:38504 允:20801 运:36816 蕴:34164 酝:37213 晕:26197 韵:38901 孕:23381匝:21277 砸:30776 杂:26434 栽:26685 哉:21705 灾:28798 宰:23472 载:36733 再:20877 在:22312 咱:21681攒:25874 暂:26242 赞:36190 赃:36163 脏:33039 葬:33900 遭:36973 糟:31967 凿:20991 藻:34299 枣:26531早:26089 澡:28577 蚤:34468 躁:36481 噪:22122 造:36896 皂:30338 灶:28790 燥:29157 责:36131 择:25321则:21017 泽:27901 贼:36156 怎:24590 增:22686 憎:24974 曾:26366 赠:36192 扎:25166 喳:21939 渣:28195札:26413 轧:36711 铡:38113 闸:38392 眨:30504 栅:26629 榨:27048 咋:21643 乍:20045 炸:28856 诈:35784摘:25688 斋:25995 宅:23429 窄:31364 债:20538 寨:23528 瞻:30651 毡:27617 詹:35449 粘:31896 沾:27838盏:30415 斩:26025 辗:36759 崭:23853 展:23637 蘸:34360 栈:26632 占:21344 战:25112 站:31449 湛:28251绽:32509 樟:27167 章:31456 彰:24432 漳:28467 张:24352 掌:25484 涨:28072 杖:26454 丈:19976 帐:24080账:36134 仗:20183 胀:32960 瘴:30260 障:38556 招:25307 昭:26157 找:25214 沼:27836 赵:36213 照:29031罩:32617 兆:20806 肇:32903 召:21484 遮:36974 折:25240 哲:21746 蛰:34544 辙:36761 者:32773 锗:38167蔗:34071 这:36825 浙:27993 珍:29645 斟:26015 真:30495 甄:29956 砧:30759 臻:33275 贞:36126 针:38024侦:20390 枕:26517 疹:30137 诊:35786 震:38663 振:25391 镇:38215 阵:38453 蒸:33976 挣:25379 睁:30529征:24449 狰:29424 争:20105 怔:24596 整:25972 拯:25327 正:27491 政:25919 帧:24103 症:30151 郑:37073证:35777 芝:33437 枝:26525 支:25903 吱:21553 蜘:34584 知:30693 肢:32930 脂:33026 汁:27713 之:20043织:32455 职:32844 直:30452 植:26893 殖:27542 执:25191 值:20540 侄:20356 址:22336 指:25351 止:27490趾:36286 只:21482 旨:26088 纸:32440 志:24535 挚:25370 掷:25527 至:33267 致:33268 置:32622 帜:24092峙:23769 制:21046 智:26234 秩:31209 稚:31258 质:36136 炙:28825 痔:30164 滞:28382 治:27835 窒:31378中:20013 盅:30405 忠:24544 钟:38047 衷:34935 终:32456 种:31181 肿:32959 重:37325 仲:20210 众:20247舟:33311 周:21608 州:24030 洲:27954 诌:35788 粥:31909 轴:36724 肘:32920 帚:24090 咒:21650 皱:30385宙:23449 昼:26172 骤:39588 珠:29664 株:26666 蛛:34523 朱:26417 猪:29482 诸:35832 诛:35803 逐:36880竹:31481 烛:28891 煮:29038 拄:25284 瞩:30633 嘱:22065 主:20027 著:33879 柱:26609 助:21161 蛀:34496贮:36142 铸:38136 筑:31569 住:20303 注:27880 祝:31069 驻:39547 抓:25235 爪:29226 拽:25341 专:19987砖:30742 转:36716 撰:25776 赚:36186 篆:31686 桩:26729 庄:24196 装:35013 妆:22918 撞:25758 壮:22766状:29366 椎:26894 锥:38181 追:36861 赘:36184 坠:22368 缀:32512 谆:35846 准:20934 捉:25417 拙:25305卓:21331 桌:26700 琢:29730 茁:33537 酌:37196 啄:21828 着:30528 灼:28796 浊:27978 兹:20857 咨:21672资:36164 姿:23039 滋:28363 淄:28100 孜:23388 紫:32043 仔:20180 籽:31869 滓:28371 子:23376 自:33258渍:28173 字:23383 鬃:39683 棕:26837 踪:36394 宗:23447 综:32508 总:24635 纵:32437 邹:37049 走:36208奏:22863 揍:25549 租:31199 足:36275 卒:21330 族:26063 祖:31062 诅:35781 阻:38459 组:32452 钻:38075纂:32386 嘴:22068 醉:37257 最:26368 罪:32618 尊:23562 遵:36981 昨:26152 左:24038 佐:20304 柞:26590做:20570 作:20316 坐:22352 座:24231 亍:20109 丌:19980 兀:20800 丐:19984 廿:24319 卅:21317 丕:19989亘:20120 丞:19998 鬲:39730 孬:23404 噩:22121 丨:20008 禺:31162 丿:20031 匕:21269 乇:20039 夭:22829爻:29243 卮:21358 氐:27664 囟:22239 胤:32996 馗:39319 毓:27603 睾:30590 鼗:40727 丶:20022 亟:20127鼐:40720 乜:20060 乩:20073 亓:20115 芈:33416 孛:23387 啬:21868 嘏:22031 仄:20164 厍:21389 厝:21405厣:21411 厥:21413 厮:21422 靥:38757 赝:36189 匚:21274 叵:21493 匦:21286 匮:21294 匾:21310 赜:36188卦:21350 卣:21347 刂:20994 刈:21000 刎:21006 刭:21037 刳:21043 刿:21055 剀:21056 剌:21068 剞:21086剡:21089 剜:21084 蒯:33967 剽:21117 劂:21122 劁:21121 劐:21136 劓:21139 冂:20866 罔:32596 亻:20155仃:20163 仉:20169 仂:20162 仨:20200 仡:20193 仫:20203 仞:20190 伛:20251 仳:20211 伢:20258 佤:20324仵:20213 伥:20261 伧:20263 伉:20233 伫:20267 佞:20318 佧:20327 攸:25912 佚:20314 佝:20317 佟:20319佗:20311 伲:20274 伽:20285 佶:20342 佴:20340 侑:20369 侉:20361 侃:20355 侏:20367 佾:20350 佻:20347侪:20394 佼:20348 侬:20396 侔:20372 俦:20454 俨:20456 俪:20458 俅:20421 俚:20442 俣:20451 俜:20444俑:20433 俟:20447 俸:20472 倩:20521 偌:20556 俳:20467 倬:20524 倏:20495 倮:20526 倭:20525 俾:20478倜:20508 倌:20492 倥:20517 倨:20520 偾:20606 偃:20547 偕:20565 偈:20552 偎:20558 偬:20588 偻:20603傥:20645 傧:20647 傩:20649 傺:20666 僖:20694 儆:20742 僭:20717 僬:20716 僦:20710 僮:20718 儇:20743儋:20747 仝:20189 氽:27709 佘:20312 佥:20325 俎:20430 龠:40864 汆:27718 籴:31860 兮:20846 巽:24061黉:40649 馘:39320 冁:20865 夔:22804 勹:21241 匍:21261 訇:35335 匐:21264 凫:20971 夙:22809 兕:20821亠:20128 兖:20822 亳:20147 衮:34926 袤:34980 亵:20149 脔:33044 裒:35026 禀:31104 嬴:23348 蠃:34819羸:32696 冫:20907 冱:20913 冽:20925 冼:20924 凇:20935 冖:20886 冢:20898 冥:20901 讠:35744 讦:35750讧:35751 讪:35754 讴:35764 讵:35765 讷:35767 诂:35778 诃:35779 诋:35787 诏:35791 诎:35790 诒:35794诓:35795 诔:35796 诖:35798 诘:35800 诙:35801 诜:35804 诟:35807 诠:35808 诤:35812 诨:35816 诩:35817诮:35822 诰:35824 诳:35827 诶:35830 诹:35833 诼:35836 诿:35839 谀:35840 谂:35842 谄:35844 谇:35847谌:35852 谏:35855 谑:35857 谒:35858 谔:35860 谕:35861 谖:35862 谙:35865 谛:35867 谘:35864 谝:35869谟:35871 谠:35872 谡:35873 谥:35877 谧:35879 谪:35882 谫:35883 谮:35886 谯:35887 谲:35890 谳:35891谵:35893 谶:35894 卩:21353 卺:21370 阝:38429 阢:38434 阡:38433 阱:38449 阪:38442 阽:38461 阼:38460陂:38466 陉:38473 陔:38484 陟:38495 陧:38503 陬:38508 陲:38514 陴:38516 隈:38536 隍:38541 隗:38551隰:38576 邗:37015 邛:37019 邝:37021 邙:37017 邬:37036 邡:37025 邴:37044 邳:37043 邶:37046 邺:37050邸:37048 邰:37040 郏:37071 郅:37061 邾:37054 郐:37072 郄:37060 郇:37063 郓:37075 郦:37094 郢:37090郜:37084 郗:37079 郛:37083 郫:37099 郯:37103 郾:37118 鄄:37124 鄢:37154 鄞:37150 鄣:37155 鄱:37169鄯:37167 鄹:37177 酃:37187 酆:37190 刍:21005 奂:22850 劢:21154 劬:21164 劭:21165 劾:21182 哿:21759勐:21200 勖:21206 勰:21232 叟:21471 燮:29166 矍:30669 廴:24308 凵:20981 凼:20988 鬯:39727 厶:21430弁:24321 畚:30042 巯:24047 坌:22348 垩:22441 垡:22433 塾:22654 墼:22716 壅:22725 壑:22737 圩:22313圬:22316 圪:22314 圳:22323 圹:22329 圮:22318 圯:22319 坜:22364 圻:22331 坂:22338 坩:22377 垅:22405坫:22379 垆:22406 坼:22396 坻:22395 坨:22376 坭:22381 坶:22390 坳:22387 垭:22445 垤:22436 垌:22412垲:22450 埏:22479 垧:22439 垴:22452 垓:22419 垠:22432 埕:22485 埘:22488 埚:22490 埙:22489 埒:22482垸:22456 埴:22516 埯:22511 埸:22520 埤:22500 埝:22493 堋:22539 堍:22541 埽:22525 埭:22509 堀:22528堞:22558 堙:22553 塄:22596 堠:22560 塥:22629 塬:22636 墁:22657 墉:22665 墚:22682 墀:22656 馨:39336鼙:40729 懿:25087 艹:33401 艽:33405 艿:33407 芏:33423 芊:33418 芨:33448 芄:33412 芎:33422 芑:33425芗:33431 芙:33433 芫:33451 芸:33464 芾:33470 芰:33456 苈:33480 苊:33482 苣:33507 芘:33432 芷:33463芮:33454 苋:33483 苌:33484 苁:33473 芩:33449 芴:33460 芡:33441 芪:33450 芟:33439 苄:33476 苎:33486芤:33444 苡:33505 茉:33545 苷:33527 苤:33508 茏:33551 茇:33543 苜:33500 苴:33524 苒:33490 苘:33496茌:33548 苻:33531 苓:33491 茑:33553 茚:33562 茆:33542 茔:33556 茕:33557 苠:33504 苕:33493 茜:33564荑:33617 荛:33627 荜:33628 茈:33544 莒:33682 茼:33596 茴:33588 茱:33585 莛:33691 荞:33630 茯:33583荏:33615 荇:33607 荃:33603 荟:33631 荀:33600 茗:33559 荠:33632 茭:33581 茺:33594 茳:33587 荦:33638荥:33637 荨:33640 茛:33563 荩:33641 荬:33644 荪:33642 荭:33645 荮:33646 莰:33712 荸:33656 莳:33715莴:33716 莠:33696 莪:33706 莓:33683 莜:33692 莅:33669 荼:33660 莶:33718 莩:33705 荽:33661 莸:33720荻:33659 莘:33688 莞:33694 莨:33704 莺:33722 莼:33724 菁:33729 萁:33793 菥:33765 菘:33752 堇:22535萘:33816 萋:33803 菝:33757 菽:33789 菖:33750 萜:33820 萸:33848 萑:33809 萆:33798 菔:33748 菟:33759萏:33807 萃:33795 菸:33784 菹:33785 菪:33770 菅:33733 菀:33728 萦:33830 菰:33776 菡:33761 葜:33884葑:33873 葚:33882 葙:33881 葳:33907 蒇:33927 蒈:33928 葺:33914 蒉:33929 葸:33912 萼:33852 葆:33862葩:33897 葶:33910 蒌:33932 蒎:33934 萱:33841 葭:33901 蓁:33985 蓍:33997 蓐:34000 蓦:34022 蒽:33981蓓:34003 蓊:33994 蒿:33983 蒺:33978 蓠:34016 蒡:33953 蒹:33977 蒴:33972 蒗:33943 蓥:34021 蓣:34019蔌:34060 甍:29965 蔸:34104 蓰:34032 蔹:34105 蔟:34079 蔺:34106 蕖:34134 蔻:34107 蓿:34047 蓼:34044蕙:34137 蕈:34120 蕨:34152 蕤:34148 蕞:34142 蕺:34170 瞢:30626 蕃:34115 蕲:34162 蕻:34171 薤:34212薨:34216 薇:34183 薏:34191 蕹:34169 薮:34222 薜:34204 薅:34181 薹:34233 薷:34231 薰:34224 藓:34259藁:34241 藜:34268 藿:34303 蘧:34343 蘅:34309 蘩:34345 蘖:34326 蘼:34364 廾:24318 弈:24328 夼:22844奁:22849 耷:32823 奕:22869 奚:22874 奘:22872 匏:21263 尢:23586 尥:23589 尬:23596 尴:23604 扌:25164扪:25194 抟:25247 抻:25275 拊:25290 拚:25306 拗:25303 拮:25326 挢:25378 拶:25334 挹:25401 捋:25419捃:25411 掭:25517 揶:25590 捱:25457 捺:25466 掎:25486 掴:25524 捭:25453 掬:25516 掊:25482 捩:25449掮:25518 掼:25532 揲:25586 揸:25592 揠:25568 揿:25599 揄:25540 揞:25566 揎:25550 摒:25682 揆:25542掾:25534 摅:25669 摁:25665 搋:25611 搛:25627 搠:25632 搌:25612 搦:25638 搡:25633 摞:25694 撄:25732摭:25709 撖:25750 摺:25722 撷:25783 撸:25784 撙:25753 撺:25786 擀:25792 擐:25808 擗:25815 擤:25828擢:25826 攉:25865 攥:25893 攮:25902 弋:24331 忒:24530 甙:29977 弑:24337 卟:21343 叱:21489 叽:21501叩:21481 叨:21480 叻:21499 吒:21522 吖:21526 吆:21510 呋:21579 呒:21586 呓:21587 呔:21588 呖:21590呃:21571 吡:21537 呗:21591 呙:21593 吣:21539 吲:21554 咂:21634 咔:21652 呷:21623 呱:21617 呤:21604咚:21658 咛:21659 咄:21636 呶:21622 呦:21606 咝:21661 哐:21712 咭:21677 哂:21698 咴:21684 哒:21714咧:21671 咦:21670 哓:21715 哔:21716 呲:21618 咣:21667 哕:21717 咻:21691 咿:21695 哌:21708 哙:21721哚:21722 哜:21724 咩:21673 咪:21674 咤:21668 哝:21725 哏:21711 哞:21726 唛:21787 哧:21735 唠:21792哽:21757 唔:21780 哳:21747 唢:21794 唣:21795 唏:21775 唑:21777 唧:21799 唪:21802 啧:21863 喏:21903喵:21941 啉:21833 啭:21869 啁:21825 啕:21845 唿:21823 啐:21840 唼:21820 唷:21815 啖:21846 啵:21877啶:21878 啷:21879 唳:21811 唰:21808 啜:21852 喋:21899 嗒:21970 喃:21891 喱:21937 喹:21945 喈:21896喁:21889 喟:21919 啾:21886 嗖:21974 喑:21905 啻:21883 嗟:21983 喽:21949 喾:21950 喔:21908 喙:21913嗪:21994 嗷:22007 嗉:21961 嘟:22047 嗑:21969 嗫:21995 嗬:21996 嗔:21972 嗦:21990 嗝:21981 嗄:21956嗯:21999 嗥:21989 嗲:22002 嗳:22003 嗌:21964 嗍:21965 嗨:21992 嗵:22005 嗤:21988 辔:36756 嘞:22046嘈:22024 嘌:22028 嘁:22017 嘤:22052 嘣:22051 嗾:22014 嘀:22016 嘧:22055 嘭:22061 噘:22104 嘹:22073噗:22103 嘬:22060 噍:22093 噢:22114 噙:22105 噜:22108 噌:22092 噔:22100 嚆:22150 噤:22116 噱:22129噫:22123 噻:22139 噼:22140 嚅:22149 嚓:22163 嚯:22191 囔:22228 囗:22231 囝:22237 囡:22241 囵:22261囫:22251 囹:22265 囿:22271 圄:22276 圊:22282 圉:22281 圜:22300 帏:24079 帙:24089 帔:24084 帑:24081帱:24113 帻:24123 帼:24124 帷:24119 幄:24132 幔:24148 幛:24155 幞:24158 幡:24161 岌:23692 屺:23674岍:23693 岐:23696 岖:23702 岈:23688 岘:23704 岙:23705 岑:23697 岚:23706 岜:23708 岵:23733 岢:23714岽:23741 岬:23724 岫:23723 岱:23729 岣:23715 峁:23745 岷:23735 峄:23748 峒:23762 峤:23780 峋:23755峥:23781 崂:23810 崃:23811 崧:23847 崦:23846 崮:23854 崤:23844 崞:23838 崆:23814 崛:23835 嵘:23896崾:23870 崴:23860 崽:23869 嵬:23916 嵛:23899 嵯:23919 嵝:23901 嵫:23915 嵋:23883 嵊:23882 嵩:23913嵴:23924 嶂:23938 嶙:23961 嶝:23965 豳:35955 嶷:23991 巅:24005 彳:24435 彷:24439 徂:24450 徇:24455徉:24457 後:24460 徕:24469 徙:24473 徜:24476 徨:24488 徭:24493 徵:24501 徼:24508 衢:34914 彡:24417犭:29357 犰:29360 犴:29364 犷:29367 犸:29368 狃:29379 狁:29377 狎:29390 狍:29389 狒:29394 狨:29416狯:29423 狩:29417 狲:29426 狴:29428 狷:29431 猁:29441 狳:29427 猃:29443 狺:29434 狻:29435 猗:29463猓:29459 猡:29473 猊:29450 猞:29470 猝:29469 猕:29461 猢:29474 猹:29497 猥:29477 猬:29484 猸:29496猱:29489 獐:29520 獍:29517 獗:29527 獠:29536 獬:29548 獯:29551 獾:29566 舛:33307 夥:22821 飧:39143夤:22820 夂:22786 饣:39267 饧:39271 饨:39272 饩:39273 饪:39274 饫:39275 饬:39276 饴:39284 饷:39287饽:39293 馀:39296 馄:39300 馇:39303 馊:39306 馍:39309 馐:39312 馑:39313 馓:39315 馔:39316 馕:39317庀:24192 庑:24209 庋:24203 庖:24214 庥:24229 庠:24224 庹:24249 庵:24245 庾:24254 庳:24243 赓:36179廒:24274 廑:24273 廛:24283 廨:24296 廪:24298 膺:33210 忄:24516 忉:24521 忖:24534 忏:24527 怃:24579忮:24558 怄:24580 忡:24545 忤:24548 忾:24574 怅:24581 怆:24582 忪:24554 忭:24557 忸:24568 怙:24601怵:24629 怦:24614 怛:24603 怏:24591 怍:24589 怩:24617 怫:24619 怊:24586 怿:24639 怡:24609 恸:24696恹:24697 恻:24699 恺:24698 恂:24642 恪:24682 恽:24701 悖:24726 悚:24730 悭:24749 悝:24733 悃:24707悒:24722 悌:24716 悛:24731 惬:24812 悻:24763 悱:24753 惝:24797 惘:24792 惆:24774 惚:24794 悴:24756愠:24864 愦:24870 愕:24853 愣:24867 惴:24820 愀:24832 愎:24846 愫:24875 慊:24906 慵:24949 憬:25004憔:24980 憧:24999 憷:25015 懔:25044 懵:25077 忝:24541 隳:38579 闩:38377 闫:38379 闱:38385 闳:38387闵:38389 闶:38390 闼:38396 闾:38398 阃:38403 阄:38404 阆:38406 阈:38408 阊:38410 阋:38411 阌:38412阍:38413 阏:38415 阒:38418 阕:38421 阖:38422 阗:38423 阙:38425 阚:38426 丬:20012 爿:29247 戕:25109氵:27701 汔:27732 汜:27740 汊:27722 沣:27811 沅:27781 沐:27792 沔:27796 沌:27788 汨:27752 汩:27753汴:27764 汶:27766 沆:27782 沩:27817 泐:27856 泔:27860 沭:27821 泷:27895 泸:27896 泱:27889 泗:27863沲:27826 泠:27872 泖:27862 泺:27898 泫:27883 泮:27886 沱:27825 泓:27859 泯:27887 泾:27902 洹:27961洧:27943 洌:27916 浃:27971 浈:27976 洇:27911 洄:27908 洙:27929 洎:27918 洫:27947 浍:27981 洮:27950洵:27957 洚:27930 浏:27983 浒:27986 浔:27988 洳:27955 涑:28049 浯:28015 涞:28062 涠:28064 浞:27998涓:28051 涔:28052 浜:27996 浠:28000 浼:28028 浣:28003 渚:28186 淇:28103 淅:28101 淞:28126 渎:28174涿:28095 淠:28128 渑:28177 淦:28134 淝:28125 淙:28121 渖:28182 涫:28075 渌:28172 涮:28078 渫:28203湮:28270 湎:28238 湫:28267 溲:28338 湟:28255 溆:28294 湓:28243 湔:28244 渲:28210 渥:28197 湄:28228滟:28383 溱:28337 溘:28312 滠:28384 漭:28461 滢:28386 溥:28325 溧:28327 溽:28349 溻:28347 溷:28343滗:28375 溴:28340 滏:28367 溏:28303 滂:28354 溟:28319 潢:28514 潆:28486 潇:28487 漤:28452 漕:28437滹:28409 漯:28463 漶:28470 潋:28491 潴:28532 漪:28458 漉:28425 漩:28457 澉:28553 澍:28557 澌:28556潸:28536 潲:28530 潼:28540 潺:28538 濑:28625 濉:28617 澧:28583 澹:28601 澶:28598 濂:28610 濡:28641濮:28654 濞:28638 濠:28640 濯:28655 瀚:28698 瀣:28707 瀛:28699 瀹:28729 瀵:28725 灏:28751 灞:28766宀:23424 宄:23428 宕:23445 宓:23443 宥:23461 宸:23480 甯:29999 骞:39582 搴:25652 寤:23524 寮:23534褰:35120 寰:23536 蹇:36423 謇:35591 辶:36790 迓:36819 迕:36821 迥:36837 迮:36846 迤:36836 迩:36841迦:36838 迳:36851 迨:36840 逅:36869 逄:36868 逋:36875 逦:36902 逑:36881 逍:36877 逖:36886 逡:36897逵:36917 逶:36918 逭:36909 逯:36911 遄:36932 遑:36945 遒:36946 遐:36944 遨:36968 遘:36952 遢:36962遛:36955 暹:26297 遴:36980 遽:36989 邂:36994 邈:37000 邃:36995 邋:37003 彐:24400 彗:24407 彖:24406彘:24408 尻:23611 咫:21675 屐:23632 屙:23641 孱:23409 屣:23651 屦:23654 羼:32700 弪:24362 弩:24361弭:24365 艴:33396 弼:24380 鬻:39739 屮:23662 妁:22913 妃:22915 妍:22925 妩:22953 妪:22954 妣:22947妗:22935 姊:22986 妫:22955 妞:22942 妤:22948 姒:22994 妲:22962 妯:22959 姗:22999 妾:22974 娅:23045娆:23046 姝:23005 娈:23048 姣:23011 姘:23000 姹:23033 娌:23052 娉:23049 娲:23090 娴:23092 娑:23057娣:23075 娓:23059 婀:23104 婧:23143 婊:23114 婕:23125 娼:23100 婢:23138 婵:23157 胬:33004 媪:23210媛:23195 婷:23159 婺:23162 媾:23230 嫫:23275 媲:23218 嫒:23250 嫔:23252 媸:23224 嫠:23264 嫣:23267嫱:23281 嫖:23254 嫦:23270 嫘:23256 嫜:23260 嬉:23305 嬗:23319 嬖:23318 嬲:23346 嬷:23351 孀:23360尕:23573 尜:23580 孚:23386 孥:23397 孳:23411 孑:23377 孓:23379 孢:23394 驵:39541 驷:39543 驸:39544驺:39546 驿:39551 驽:39549 骀:39552 骁:39553 骅:39557 骈:39560 骊:39562 骐:39568 骒:39570 骓:39571骖:39574 骘:39576 骛:39579 骜:39580 骝:39581 骟:39583 骠:39584 骢:39586 骣:39587 骥:39589 骧:39591纟:32415 纡:32417 纣:32419 纥:32421 纨:32424 纩:32425 纭:32429 纰:32432 纾:32446 绀:32448 绁:32449绂:32450 绉:32457 绋:32459 绌:32460 绐:32464 绔:32468 绗:32471 绛:32475 绠:32480 绡:32481 绨:32488绫:32491 绮:32494 绯:32495 绱:32497 绲:32498 缍:32525 绶:32502 绺:32506 绻:32507 绾:32510 缁:32513缂:32514 缃:32515 缇:32519 缈:32520 缋:32523 缌:32524 缏:32527 缑:32529 缒:32530 缗:32535 缙:32537缜:32540 缛:32539 缟:32543 缡:32545 缢:32546 缣:32547 缤:32548 缥:32549 缦:32550 缧:32551 缪:32554缫:32555 缬:32556 缭:32557 缯:32559 缰:32560 缱:32561 缲:32562 缳:32563 缵:32565 幺:24186 畿:30079巛:24027 甾:30014 邕:37013 玎:29582 玑:29585 玮:29614 玢:29602 玟:29599 珏:29647 珂:29634 珑:29649玷:29623 玳:29619 珀:29632 珉:29641 珈:29640 珥:29669 珙:29657 顼:39036 琊:29706 珩:29673 珧:29671珞:29662 玺:29626 珲:29682 琏:29711 琪:29738 瑛:29787 琦:29734 琥:29733 琨:29736 琰:29744 琮:29742琬:29740 琛:29723 琚:29722 瑁:29761 瑜:29788 瑗:29783 瑕:29781 瑙:29785 瑷:29815 瑭:29805 瑾:29822璜:29852 璎:29838 璀:29824 璁:29825 璇:29831 璋:29835 璞:29854 璨:29864 璩:29865 璐:29840 璧:29863瓒:29906 璺:29882 韪:38890 韫:38891 韬:38892 杌:26444 杓:26451 杞:26462 杈:26440 杩:26473 枥:26533枇:26503 杪:26474 杳:26483 枘:26520 枧:26535 杵:26485 枨:26536 枞:26526 枭:26541 枋:26507 杷:26487杼:26492 柰:26608 栉:26633 柘:26584 栊:26634 柩:26601 枰:26544 栌:26636 柙:26585 枵:26549 柚:26586枳:26547 柝:26589 栀:26624 柃:26563 枸:26552 柢:26594 栎:26638 柁:26561 柽:26621 栲:26674 栳:26675桠:26720 桡:26721 桎:26702 桢:26722 桄:26692 桤:26724 梃:26755 栝:26653 桕:26709 桦:26726 桁:26689桧:26727 桀:26688 栾:26686 桊:26698 桉:26697 栩:26665 梵:26805 梏:26767 桴:26740 桷:26743 梓:26771桫:26731 棂:26818 楮:26990 棼:26876 椟:26911 椠:26912 棹:26873 椤:26916 棰:26864 椋:26891 椁:26881楗:26967 棣:26851 椐:26896 楱:26993 椹:26937 楠:26976 楂:26946 楝:26973 榄:27012 楫:26987 榀:27008榘:27032 楸:27000 椴:26932 槌:27084 榇:27015 榈:27016 槎:27086 榉:27017 楦:26982 楣:26979 楹:27001榛:27035 榧:27047 榻:27067 榫:27051 榭:27053 槔:27092 榱:27057 槁:27073 槊:27082 槟:27103 榕:27029槠:27104 榍:27021 槿:27135 樯:27183 槭:27117 樗:27159 樘:27160 橥:27237 槲:27122 橄:27204 樾:27198檠:27296 橐:27216 橛:27227 樵:27189 檎:27278 橹:27257 樽:27197 樨:27176 橘:27224 橼:27260 檑:27281檐:27280 檩:27305 檗:27287 檫:27307 猷:29495 獒:29522 殁:27521 殂:27522 殇:27527 殄:27524 殒:27538殓:27539 殍:27533 殚:27546 殛:27547 殡:27553 殪:27562 轫:36715 轭:36717 轱:36721 轲:36722 轳:36723轵:36725 轶:36726 轸:36728 轷:36727 轹:36729 轺:36730 轼:36732 轾:36734 辁:36737 辂:36738 辄:36740辇:36743 辋:36747 辍:36749 辎:36750 辏:36751 辘:36760 辚:36762 軎:36558 戋:25099 戗:25111 戛:25115戟:25119 戢:25122 戡:25121 戥:25125 戤:25124 戬:25132 臧:33255 瓯:29935 瓴:29940 瓿:29951 甏:29967甑:29969 甓:29971 攴:25908 旮:26094 旯:26095 旰:26096 昊:26122 昙:26137 杲:26482 昃:26115 昕:26133昀:26112 炅:28805 曷:26359 昝:26141 昴:26164 昱:26161 昶:26166 昵:26165 耆:32774 晟:26207 晔:26196晁:26177 晏:26191 晖:26198 晡:26209 晗:26199 晷:26231 暄:26244 暌:26252 暧:26279 暝:26269 暾:26302曛:26331 曜:26332 曦:26342 曩:26345 贲:36146 贳:36147 贶:36150 贻:36155 贽:36157 赀:36160 赅:36165赆:36166 赈:36168 赉:36169 赇:36167 赍:36173 赕:36181 赙:36185 觇:35271 觊:35274 觋:35275 觌:35276觎:35278 觏:35279 觐:35280 觑:35281 牮:29294 犟:29343 牝:29277 牦:29286 牯:29295 牾:29310 牿:29311犄:29316 犋:29323 犍:29325 犏:29327 犒:29330 挈:25352 挲:25394 掰:25520 搿:25663 擘:25816 耄:32772毪:27626 毳:27635 毽:27645 毵:27637 毹:27641 氅:27653 氇:27655 氆:27654 氍:27661 氕:27669 氘:27672氙:27673 氚:27674 氡:27681 氩:27689 氤:27684 氪:27690 氲:27698 攵:25909 敕:25941 敫:25963 牍:29261牒:29266 牖:29270 爰:29232 虢:34402 刖:21014 肟:32927 肜:32924 肓:32915 肼:32956 朊:26378 肽:32957肱:32945 肫:32939 肭:32941 肴:32948 肷:32951 胧:32999 胨:33000 胩:33001 胪:33002 胛:32987 胂:32962胄:32964 胙:32985 胍:32973 胗:32983 朐:26384 胝:32989 胫:33003 胱:33009 胴:33012 胭:33005 脍:33037脎:33038 胲:33010 胼:33020 朕:26389 脒:33042 豚:35930 脶:33078 脞:33054 脬:33068 脘:33048 脲:33074腈:33096 腌:33100 腓:33107 腴:33140 腙:33113 腚:33114 腱:33137 腠:33120 腩:33129 腼:33148 腽:33149腭:33133 腧:33127 塍:22605 媵:23221 膈:33160 膂:33154 膑:33169 滕:28373 膣:33187 膪:33194 臌:33228朦:26406 臊:33226 膻:33211 臁:33217 膦:33190 欤:27428 欷:27447 欹:27449 歃:27459 歆:27462 歙:27481飑:39121 飒:39122 飓:39123 飕:39125 飙:39129 飚:39130 殳:27571 彀:24384 毂:27586 觳:35315 斐:26000齑:40785 斓:26003 於:26044 旆:26054 旄:26052 旃:26051 旌:26060 旎:26062 旒:26066 旖:26070 炀:28800炜:28828 炖:28822 炝:28829 炻:28859 烀:28864 炷:28855 炫:28843 炱:28849 烨:28904 烊:28874 焐:28944焓:28947 焖:28950 焯:28975 焱:28977 煳:29043 煜:29020 煨:29032 煅:28997 煲:29042 煊:29002 煸:29048煺:29050 熘:29080 熳:29107 熵:29109 熨:29096 熠:29088 燠:29152 燔:29140 燧:29159 燹:29177 爝:29213爨:29224 灬:28780 焘:28952 煦:29030 熹:29113 戾:25150 戽:25149 扃:25155 扈:25160 扉:25161 礻:31035祀:31040 祆:31046 祉:31049 祛:31067 祜:31068 祓:31059 祚:31066 祢:31074 祗:31063 祠:31072 祯:31087祧:31079 祺:31098 禅:31109 禊:31114 禚:31130 禧:31143 禳:31155 忑:24529 忐:24528 怼:24636 恝:24669恚:24666 恧:24679 恁:24641 恙:24665 恣:24675 悫:24747 愆:24838 愍:24845 慝:24925 憩:25001 憝:24989懋:25035 懑:25041 戆:25094 肀:32896 聿:32895 沓:27795 泶:27894 淼:28156 矶:30710 矸:30712 砀:30720砉:30729 砗:30743 砘:30744 砑:30737 斫:26027 砭:30765 砜:30748 砝:30749 砹:30777 砺:30778 砻:30779砟:30751 砼:30780 砥:30757 砬:30764 砣:30755 砩:30761 硎:30798 硭:30829 硖:30806 硗:30807 砦:30758硐:30800 硇:30791 硌:30796 硪:30826 碛:30875 碓:30867 碚:30874 碇:30855 碜:30876 碡:30881 碣:30883碲:30898 碹:30905 碥:30885 磔:30932 磙:30937 磉:30921 磬:30956 磲:30962 礅:30981 磴:30964 礓:30995礤:31012 礞:31006 礴:31028 龛:40859 黹:40697 黻:40699 黼:40700 盱:30449 眄:30468 眍:30477 盹:30457眇:30471 眈:30472 眚:30490 眢:30498 眙:30489 眭:30509 眦:30502 眵:30517 眸:30520 睐:30544 睑:30545睇:30535 睃:30531 睚:30554 睨:30568 睢:30562 睥:30565 睿:30591 瞍:30605 睽:30589 瞀:30592 瞌:30604瞑:30609 瞟:30623 瞠:30624 瞰:30640 瞵:30645 瞽:30653 町:30010 畀:30016 畎:30030 畋:30027 畈:30024畛:30043 畲:30066 畹:30073 疃:30083 罘:32600 罡:32609 罟:32607 詈:35400 罨:32616 罴:32628 罱:32625罹:32633 羁:32641 罾:32638 盍:30413 盥:30437 蠲:34866 钅:38021 钆:38022 钇:38023 钋:38027 钊:38026钌:38028 钍:38029 钏:38031 钐:38032 钔:38036 钗:38039 钕:38037 钚:38042 钛:38043 钜:38044 钣:38051钤:38052 钫:38059 钪:38058 钭:38061 钬:38060 钯:38063 钰:38064 钲:38066 钴:38068 钶:38070 钷:38071钸:38072 钹:38073 钺:38074 钼:38076 钽:38077 钿:38079 铄:38084 铈:38088 铉:38089 铊:38090 铋:38091铌:38092 铍:38093 铎:38094 铐:38096 铑:38097 铒:38098 铕:38101 铖:38102 铗:38103 铙:38105 铘:38104铛:38107 铞:38110 铟:38111 铠:38112 铢:38114 铤:38116 铥:38117 铧:38119 铨:38120 铪:38122 铩:38121铫:38123 铮:38126 铯:38127 铳:38131 铴:38132 铵:38133 铷:38135 铹:38137 铼:38140 铽:38141 铿:38143锃:38147 锂:38146 锆:38150 锇:38151 锉:38153 锊:38154 锍:38157 锎:38158 锏:38159 锒:38162 锓:38163锔:38164 锕:38165 锖:38166 锘:38168 锛:38171 锝:38173 锞:38174 锟:38175 锢:38178 锪:38186 锫:38187锩:38185 锬:38188 锱:38193 锲:38194 锴:38196 锶:38198 锷:38199 锸:38200 锼:38204 锾:38206 锿:38207镂:38210 锵:38197 镄:38212 镅:38213 镆:38214 镉:38217 镌:38220 镎:38222 镏:38223 镒:38226 镓:38227镔:38228 镖:38230 镗:38231 镘:38232 镙:38233 镛:38235 镞:38238 镟:38239 镝:38237 镡:38241 镢:38242镤:38244 镥:38245 镦:38246 镧:38247 镨:38248 镩:38249 镪:38250 镫:38251 镬:38252 镯:38255 镱:38257镲:38258 镳:38259 锺:38202 矧:30695 矬:30700 雉:38601 秕:31189 秭:31213 秣:31203 秫:31211 稆:31238嵇:23879 稃:31235 稂:31234 稞:31262 稔:31252 稹:31289 稷:31287 穑:31313 黏:40655 馥:39333 穰:31344皈:30344 皎:30350 皓:30355 皙:30361 皤:30372 瓞:29918 瓠:29920 甬:29996 鸠:40480 鸢:40482 鸨:40488鸩:40489 鸪:40490 鸫:40491 鸬:40492 鸲:40498 鸱:40497 鸶:40502 鸸:40504 鸷:40503 鸹:40505 鸺:40506鸾:40510 鹁:40513 鹂:40514 鹄:40516 鹆:40518 鹇:40519 鹈:40520 鹉:40521 鹋:40523 鹌:40524 鹎:40526鹑:40529 鹕:40533 鹗:40535 鹚:40538 鹛:40539 鹜:40540 鹞:40542 鹣:40547 鹦:40550 鹧:40551 鹨:40552鹩:40553 鹪:40554 鹫:40555 鹬:40556 鹱:40561 鹭:40557 鹳:40563 疒:30098 疔:30100 疖:30102 疠:30112疝:30109 疬:30124 疣:30115 疳:30131 疴:30132 疸:30136 痄:30148 疱:30129 疰:30128 痃:30147 痂:30146痖:30166 痍:30157 痣:30179 痨:30184 痦:30182 痤:30180 痫:30187 痧:30183 瘃:30211 痱:30193 痼:30204痿:30207 瘐:30224 瘀:30208 瘅:30213 瘌:30220 瘗:30231 瘊:30218 瘥:30245 瘘:30232 瘕:30229 瘙:30233瘛:30235 瘼:30268 瘢:30242 瘠:30240 癀:30272 瘭:30253 瘰:30256 瘿:30271 瘵:30261 癃:30275 瘾:30270瘳:30259 癍:30285 癞:30302 癔:30292 癜:30300 癖:30294 癫:30315 癯:30319 翊:32714 竦:31462 穸:31352穹:31353 窀:31360 窆:31366 窈:31368 窕:31381 窦:31398 窠:31392 窬:31404 窨:31400 窭:31405 窳:31411衤:34916 衩:34921 衲:34930 衽:34941 衿:34943 袂:34946 袢:34978 裆:35014 袷:34999 袼:35004 裉:35017裢:35042 裎:35022 裣:35043 裥:35045 裱:35057 褚:35098 裼:35068 裨:35048 裾:35070 裰:35056 褡:35105褙:35097 褓:35091 褛:35099 褊:35082 褴:35124 褫:35115 褶:35126 襁:35137 襦:35174 襻:35195 疋:30091胥:32997 皲:30386 皴:30388 矜:30684 耒:32786 耔:32788 耖:32790 耜:32796 耠:32800 耢:32802 耥:32805耦:32806 耧:32807 耩:32809 耨:32808 耱:32817 耋:32779 耵:32821 聃:32835 聆:32838 聍:32845 聒:32850聩:32873 聱:32881 覃:35203 顸:39032 颀:39040 颃:39043 颉:39049 颌:39052 颍:39053 颏:39055 颔:39060颚:39066 颛:39067 颞:39070 颟:39071 颡:39073 颢:39074 颥:39077 颦:39078 虍:34381 虔:34388 虬:34412虮:34414 虿:34431 虺:34426 虼:34428 虻:34427 蚨:34472 蚍:34445 蚋:34443 蚬:34476 蚝:34461 蚧:34471蚣:34467 蚪:34474 蚓:34451 蚩:34473 蚶:34486 蛄:34500 蚵:34485 蛎:34510 蚰:34480 蚺:34490 蚱:34481蚯:34479 蛉:34505 蛏:34511 蚴:34484 蛩:34537 蛱:34545 蛲:34546 蛭:34541 蛳:34547 蛐:34512 蜓:34579蛞:34526 蛴:34548 蛟:34527 蛘:34520 蛑:34513 蜃:34563 蜇:34567 蛸:34552 蜈:34568 蜊:34570 蜍:34573蜉:34569 蜣:34595 蜻:34619 蜞:34590 蜥:34597 蜮:34606 蜚:34586 蜾:34622 蝈:34632 蜴:34612 蜱:34609蜩:34601 蜷:34615 蜿:34623 螂:34690 蜢:34594 蝽:34685 蝾:34686 蝻:34683 蝠:34656 蝰:34672 蝌:34636蝮:34670 螋:34699 蝓:34643 蝣:34659 蝼:34684 蝤:34660 蝙:34649 蝥:34661 螓:34707 螯:34735 螨:34728蟒:34770 蟆:34758 螈:34696 螅:34693 螭:34733 螗:34711 螃:34691 螫:34731 蟥:34789 螬:34732 螵:34741螳:34739 蟋:34763 蟓:34771 螽:34749 蟑:34769 蟀:34752 蟊:34762 蟛:34779 蟪:34794 蟠:34784 蟮:34798蠖:34838 蠓:34835 蟾:34814 蠊:34826 蠛:34843 蠡:34849 蠹:34873 蠼:34876 缶:32566 罂:32578 罄:32580罅:32581 舐:33296 竺:31482 竽:31485 笈:31496 笃:31491 笄:31492 笕:31509 笊:31498 笫:31531 笏:31503筇:31559 笸:31544 笪:31530 笙:31513 笮:31534 笱:31537 笠:31520 笥:31525 笤:31524 笳:31539 笾:31550笞:31518 筘:31576 筚:31578 筅:31557 筵:31605 筌:31564 筝:31581 筠:31584 筮:31598 筻:31611 筢:31586筲:31602 筱:31601 箐:31632 箦:31654 箧:31655 箸:31672 箬:31660 箝:31645 箨:31656 箅:31621 箪:31658箜:31644 箢:31650 箫:31659 箴:31668 篑:31697 篁:31681 篌:31692 篝:31709 篚:31706 篥:31717 篦:31718篪:31722 簌:31756 篾:31742 篼:31740 簏:31759 簖:31766 簋:31755 簟:31775 簪:31786 簦:31782 簸:31800籁:31809 籀:31808 臾:33278 舁:33281 舂:33282 舄:33284 臬:33260 衄:34884 舡:33313 舢:33314 舣:33315舭:33325 舯:33327 舨:33320 舫:33323 舸:33336 舻:33339 舳:33331 舴:33332 舾:33342 艄:33348 艉:33353艋:33355 艏:33359 艚:33370 艟:33375 艨:33384 衾:34942 袅:34949 袈:34952 裘:35032 裟:35039 襞:35166羝:32669 羟:32671 羧:32679 羯:32687 羰:32688 羲:32690 籼:31868 敉:25929 粑:31889 粝:31901 粜:31900粞:31902 粢:31906 粲:31922 粼:31932 粽:31933 糁:31937 糇:31943 糌:31948 糍:31949 糈:31944 糅:31941糗:31959 糨:31976 艮:33390 暨:26280 羿:32703 翎:32718 翕:32725 翥:32741 翡:32737 翦:32742 翩:32745翮:32750 翳:32755 糸:31992 絷:32119 綦:32166 綮:32174 繇:32327 纛:32411 麸:40632 麴:40628 赳:36211趄:36228 趔:36244 趑:36241 趱:36273 赧:36199 赭:36205 豇:35911 豉:35913 酊:37194 酐:37200 酎:37198酏:37199 酤:37220 酢:37218 酡:37217 酰:37232 酩:37225 酯:37231 酽:37245 酾:37246 酲:37234 酴:37236酹:37241 醌:37260 醅:37253 醐:37264 醍:37261 醑:37265 醢:37282 醣:37283 醪:37290 醭:37293 醮:37294醯:37295 醵:37301 醴:37300 醺:37306 豕:35925 鹾:40574 趸:36280 跫:36331 踅:36357 蹙:36441 蹩:36457趵:36277 趿:36287 趼:36284 趺:36282 跄:36292 跖:36310 跗:36311 跚:36314 跞:36318 跎:36302 跏:36303跛:36315 跆:36294 跬:36332 跷:36343 跸:36344 跣:36323 跹:36345 跻:36347 跤:36324 踉:36361 跽:36349踔:36372 踝:36381 踟:36383 踬:36396 踮:36398 踣:36387 踯:36399 踺:36410 蹀:36416 踹:36409 踵:36405踽:36413 踱:36401 蹉:36425 蹁:36417 蹂:36418 蹑:36433 蹒:36434 蹊:36426 蹰:36464 蹶:36470 蹼:36476蹯:36463 蹴:36468 躅:36485 躏:36495 躔:36500 躐:36496 躜:36508 躞:36510 豸:35960 貂:35970 貊:35978貅:35973 貘:35992 貔:35988 斛:26011 觖:35286 觞:35294 觚:35290 觜:35292 觥:35301 觫:35307 觯:35311訾:35390 謦:35622 靓:38739 雩:38633 雳:38643 雯:38639 霆:38662 霁:38657 霈:38664 霏:38671 霎:38670霪:38698 霭:38701 霰:38704 霾:38718 龀:40832 龃:40835 龅:40837 龆:40838 龇:40839 龈:40840 龉:40841龊:40842 龌:40844 黾:40702 鼋:40715 鼍:40717 隹:38585 隼:38588 隽:38589 雎:38606 雒:38610 瞿:30655雠:38624 銎:37518 銮:37550 鋈:37576 錾:37694 鍪:37738 鏊:37834 鎏:37775 鐾:37950 鑫:37995 鱿:40063鲂:40066 鲅:40069 鲆:40070 鲇:40071 鲈:40072 稣:31267 鲋:40075 鲎:40078 鲐:40080 鲑:40081 鲒:40082鲔:40084 鲕:40085 鲚:40090 鲛:40091 鲞:40094 鲟:40095 鲠:40096 鲡:40097 鲢:40098 鲣:40099 鲥:40101鲦:40102 鲧:40103 鲨:40104 鲩:40105 鲫:40107 鲭:40109 鲮:40110 鲰:40112 鲱:40113 鲲:40114 鲳:40115鲴:40116 鲵:40117 鲶:40118 鲷:40119 鲺:40122 鲻:40123 鲼:40124 鲽:40125 鳄:40132 鳅:40133 鳆:40134鳇:40135 鳊:40138 鳋:40139 鳌:40140 鳍:40141 鳎:40142 鳏:40143 鳐:40144 鳓:40147 鳔:40148 鳕:40149鳗:40151 鳘:40152 鳙:40153 鳜:40156 鳝:40157 鳟:40159 鳢:40162 靼:38780 鞅:38789 鞑:38801 鞒:38802鞔:38804 鞯:38831 鞫:38827 鞣:38819 鞲:38834 鞴:38836 骱:39601 骰:39600 骷:39607 鹘:40536 骶:39606骺:39610 骼:39612 髁:39617 髀:39616 髅:39621 髂:39618 髋:39627 髌:39628 髑:39633 魅:39749 魃:39747魇:39751 魉:39753 魈:39752 魍:39757 魑:39761 飨:39144 餍:39181 餮:39214 饕:39253 饔:39252 髟:39647髡:39649 髦:39654 髯:39663 髫:39659 髻:39675 髭:39661 髹:39673 鬈:39688 鬏:39695 鬓:39699 鬟:39711鬣:39715 麽:40637 麾:40638 縻:32315 麂:40578 麇:40583 麈:40584 麋:40587 麒:40594 鏖:37846 麝:40605麟:40607 黛:40667 黜:40668 黝:40669 黠:40672 黟:40671 黢:40674 黩:40681 黧:40679 黥:40677 黪:40682黯:40687 鼢:40738 鼬:40748 鼯:40751 鼹:40761 鼷:40759 鼽:40765 鼾:40766 齄:40772</p>]]></content>
      
      
      <categories>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASCII码表</title>
      <link href="/posts/c85fdebe.html"/>
      <url>/posts/c85fdebe.html</url>
      
        <content type="html"><![CDATA[<p>ASCII码</p><span id="more"></span><hr><p>ASCII码表</p><table><thead><tr><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th><th>ASCII值</th><th>控制字符</th></tr></thead><tbody><tr><td>0</td><td>NUL</td><td>32</td><td>(space)</td><td>64</td><td>@</td><td>96</td><td>、</td></tr><tr><td>1</td><td>SOH</td><td>33</td><td>！</td><td>65</td><td>A</td><td>97</td><td>a</td></tr><tr><td>2</td><td>STX</td><td>34</td><td>”</td><td>66</td><td>B</td><td>98</td><td>b</td></tr><tr><td>3</td><td>ETX</td><td>35</td><td>#</td><td>67</td><td>C</td><td>99</td><td>c</td></tr><tr><td>4</td><td>EOT</td><td>36</td><td>$</td><td>68</td><td>D</td><td>100</td><td>d</td></tr><tr><td>5</td><td>ENQ</td><td>37</td><td>%</td><td>69</td><td>E</td><td>101</td><td>e</td></tr><tr><td>6</td><td>ACK</td><td>38</td><td>&amp;</td><td>70</td><td>F</td><td>102</td><td>f</td></tr><tr><td>7</td><td>BEL</td><td>39</td><td>‘</td><td>71</td><td>G</td><td>103</td><td>g</td></tr><tr><td>8</td><td>BS</td><td>40</td><td>(</td><td>72</td><td>H</td><td>104</td><td>h</td></tr><tr><td>9</td><td>HT</td><td>41</td><td>)</td><td>73</td><td>I</td><td>105</td><td>i</td></tr><tr><td>10</td><td>LF</td><td>42</td><td></td><td>74</td><td>J</td><td>106</td><td>j</td></tr><tr><td>11</td><td>VT</td><td>43</td><td>+</td><td>75</td><td>K</td><td>107</td><td>k</td></tr><tr><td>12</td><td>FF</td><td>44</td><td>,</td><td>76</td><td>L</td><td>108</td><td>l</td></tr><tr><td>13</td><td>CR</td><td>45</td><td>-</td><td>77</td><td>M</td><td>109</td><td>m</td></tr><tr><td>14</td><td>SO</td><td>46</td><td>.</td><td>78</td><td>N</td><td>110</td><td>n</td></tr><tr><td>15</td><td>SI</td><td>47</td><td>/</td><td>79</td><td>O</td><td>111</td><td>o</td></tr><tr><td>16</td><td>DLE</td><td>48</td><td>0</td><td>80</td><td>P</td><td>112</td><td>p</td></tr><tr><td>17</td><td>DCI</td><td>49</td><td>1</td><td>81</td><td>Q</td><td>113</td><td>q</td></tr><tr><td>18</td><td>DC2</td><td>50</td><td>2</td><td>82</td><td>R</td><td>114</td><td>r</td></tr><tr><td>19</td><td>DC3</td><td>51</td><td>3</td><td>83</td><td>X</td><td>115</td><td>s</td></tr><tr><td>20</td><td>DC4</td><td>52</td><td>4</td><td>84</td><td>T</td><td>116</td><td>t</td></tr><tr><td>21</td><td>NAK</td><td>53</td><td>5</td><td>85</td><td>U</td><td>117</td><td>u</td></tr><tr><td>22</td><td>SYN</td><td>54</td><td>6</td><td>86</td><td>V</td><td>118</td><td>v</td></tr><tr><td>23</td><td>TB</td><td>55</td><td>7</td><td>87</td><td>W</td><td>119</td><td>w</td></tr><tr><td>24</td><td>CAN</td><td>56</td><td>8</td><td>88</td><td>X</td><td>120</td><td>x</td></tr><tr><td>25</td><td>EM</td><td>57</td><td>9</td><td>89</td><td>Y</td><td>121</td><td>y</td></tr><tr><td>26</td><td>SUB</td><td>58</td><td>:</td><td>90</td><td>Z</td><td>122</td><td>z</td></tr><tr><td>27</td><td>ESC</td><td>59</td><td>;</td><td>91</td><td>[</td><td>123</td><td>{</td></tr><tr><td>28</td><td>FS</td><td>60</td><td>&lt;</td><td>92</td><td>\</td><td>124</td><td>|</td></tr><tr><td>29</td><td>GS</td><td>61</td><td>=</td><td>93</td><td>]</td><td>125</td><td>}</td></tr><tr><td>30</td><td>RS</td><td>62</td><td>&gt;</td><td>94</td><td>^</td><td>126</td><td>~</td></tr><tr><td>31</td><td>US</td><td>63</td><td>?</td><td>95</td><td>—</td><td>127</td><td>DEL</td></tr></tbody></table><p>ASCII诠释部分</p><p>1.ASCII中的0<del>31为控制字符；32</del>126为打印字符；127为Delete(删除)命令。下表为控制字符释义。</p><table><thead><tr><th>十进制</th><th>十六进制</th><th>字符</th><th>十进制</th><th>十六进制</th><th>字符</th></tr></thead><tbody><tr><td>0</td><td>00</td><td>空</td><td>16</td><td>10</td><td>数据链路转意</td></tr><tr><td>1</td><td>01</td><td>头标开始</td><td>17</td><td>11</td><td>设备控制 1</td></tr><tr><td>2</td><td>02</td><td>正文开始</td><td>18</td><td>12</td><td>设备控制 2</td></tr><tr><td>3</td><td>03</td><td>正文结束</td><td>19</td><td>13</td><td>设备控制 3</td></tr><tr><td>4</td><td>04</td><td>传输结束</td><td>20</td><td>14</td><td>设备控制 4</td></tr><tr><td>5</td><td>05</td><td>查询</td><td>21</td><td>15</td><td>反确认</td></tr><tr><td>6</td><td>06</td><td>确认</td><td>22</td><td>16</td><td>同步空闲</td></tr><tr><td>7</td><td>07</td><td>震铃</td><td>23</td><td>17</td><td>传输块结束</td></tr><tr><td>8</td><td>08</td><td>backspace</td><td>24</td><td>18</td><td>取消</td></tr><tr><td>9</td><td>09</td><td>水平制表符</td><td>25</td><td>19</td><td>媒体结束</td></tr><tr><td>10</td><td>0A</td><td>换行/新行</td><td>26</td><td>1A</td><td>替换</td></tr><tr><td>11</td><td>0B</td><td>竖直制表符</td><td>27</td><td>1B</td><td>转意</td></tr><tr><td>12</td><td>0C</td><td>换页/新页</td><td>28</td><td>1C</td><td>文件分隔符</td></tr><tr><td>13</td><td>0D</td><td>回车</td><td>29</td><td>1D</td><td>组分隔符</td></tr><tr><td>14</td><td>0E</td><td>移出</td><td>30</td><td>1E</td><td>记录分隔符</td></tr><tr><td>15</td><td>0F</td><td>移入</td><td>31</td><td>1F</td><td>单元分隔符</td></tr></tbody></table><p>2.ASCII扩展字符——（为了适应更多字符）128<del>255，或者-128</del>-1,其中，-128对应128，依次递增对应。</p><table><thead><tr><th>十进制</th><th>十六进制</th><th>字符</th><th>十进制</th><th>十六进制</th><th>字符</th></tr></thead><tbody><tr><td>128</td><td>80</td><td>Ç</td><td>192</td><td>C0</td><td>└</td></tr><tr><td>129</td><td>81</td><td>ü</td><td>193</td><td>C1</td><td>┴</td></tr><tr><td>130</td><td>82</td><td>é</td><td>194</td><td>C2</td><td>┬</td></tr><tr><td>131</td><td>83</td><td>â</td><td>195</td><td>C3</td><td>├</td></tr><tr><td>132</td><td>84</td><td>ä</td><td>196</td><td>C4</td><td>─</td></tr><tr><td>133</td><td>85</td><td>à</td><td>197</td><td>C5</td><td>┼</td></tr><tr><td>134</td><td>86</td><td>å</td><td>198</td><td>C6</td><td>╞</td></tr><tr><td>135</td><td>87</td><td>ç</td><td>199</td><td>C7</td><td>╟</td></tr><tr><td>136</td><td>88</td><td>ê</td><td>200</td><td>C8</td><td>╚</td></tr><tr><td>137</td><td>89</td><td>ë</td><td>201</td><td>C9</td><td>╔</td></tr><tr><td>138</td><td>8A</td><td>è</td><td>202</td><td>CA</td><td>╩</td></tr><tr><td>139</td><td>8B</td><td>ï</td><td>203</td><td>CB</td><td>╦</td></tr><tr><td>140</td><td>8C</td><td>î</td><td>204</td><td>CC</td><td>╠</td></tr><tr><td>141</td><td>8D</td><td>ì</td><td>205</td><td>CD</td><td>═</td></tr><tr><td>142</td><td>8E</td><td>Ä</td><td>206</td><td>CE</td><td>╬</td></tr><tr><td>143</td><td>8F</td><td>Å</td><td>207</td><td>CF</td><td>╧</td></tr><tr><td>144</td><td>90</td><td>É</td><td>208</td><td>D0</td><td>╨</td></tr><tr><td>145</td><td>91</td><td>æ</td><td>209</td><td>D1</td><td>╤</td></tr><tr><td>146</td><td>92</td><td>Æ</td><td>210</td><td>D2</td><td>╥</td></tr><tr><td>147</td><td>93</td><td>ô</td><td>211</td><td>D3</td><td>╙</td></tr><tr><td>148</td><td>94</td><td>ö</td><td>212</td><td>D4</td><td>Ô</td></tr><tr><td>149</td><td>95</td><td>ò</td><td>213</td><td>D5</td><td>╒</td></tr><tr><td>150</td><td>96</td><td>û</td><td>214</td><td>D6</td><td>╓</td></tr><tr><td>151</td><td>97</td><td>ù</td><td>215</td><td>D7</td><td>╫</td></tr><tr><td>152</td><td>98</td><td>ÿ</td><td>216</td><td>D8</td><td>╪</td></tr><tr><td>153</td><td>99</td><td>Ö</td><td>217</td><td>D9</td><td>┘</td></tr><tr><td>154</td><td>9A</td><td>Ü</td><td>218</td><td>DA</td><td>┌</td></tr><tr><td>155</td><td>9B</td><td>¢</td><td>219</td><td>DB</td><td>█</td></tr><tr><td>156</td><td>9C</td><td>£</td><td>220</td><td>DC</td><td>▄</td></tr><tr><td>157</td><td>9D</td><td>¥</td><td>221</td><td>DD</td><td>▌</td></tr><tr><td>158</td><td>9E</td><td>?</td><td>222</td><td>DE</td><td>?</td></tr><tr><td>159</td><td>9F</td><td>ƒ</td><td>223</td><td>DF</td><td>?</td></tr><tr><td>160</td><td>A0</td><td>á</td><td>224</td><td>E0</td><td>α</td></tr><tr><td>161</td><td>A1</td><td>í</td><td>225</td><td>E1</td><td>ß</td></tr><tr><td>162</td><td>A2</td><td>ó</td><td>226</td><td>E2</td><td>Γ</td></tr><tr><td>163</td><td>A3</td><td>ú</td><td>227</td><td>E3</td><td>π</td></tr><tr><td>164</td><td>A4</td><td>ñ</td><td>228</td><td>E4</td><td>Σ</td></tr><tr><td>165</td><td>A5</td><td>Ñ</td><td>229</td><td>E5</td><td>σ</td></tr><tr><td>166</td><td>A6</td><td>ª</td><td>230</td><td>E6</td><td>µ</td></tr><tr><td>167</td><td>A7</td><td>º</td><td>231</td><td>E7</td><td>τ</td></tr><tr><td>168</td><td>A8</td><td>¿</td><td>232</td><td>E8</td><td>Φ</td></tr><tr><td>169</td><td>A9</td><td>?</td><td>233</td><td>E9</td><td>Θ</td></tr><tr><td>170</td><td>AA</td><td>¬</td><td>234</td><td>EA</td><td>Ω</td></tr><tr><td>171</td><td>AB</td><td>½</td><td>235</td><td>EB</td><td>δ</td></tr><tr><td>172</td><td>AC</td><td>¼</td><td>236</td><td>EC</td><td>∞</td></tr><tr><td>173</td><td>AD</td><td>¡</td><td>237</td><td>ED</td><td>φ</td></tr><tr><td>174</td><td>AE</td><td>«</td><td>238</td><td>EE</td><td>ε</td></tr><tr><td>175</td><td>AF</td><td>»</td><td>239</td><td>EF</td><td>∩</td></tr><tr><td>176</td><td>B0</td><td>?</td><td>240</td><td>F0</td><td>≡</td></tr><tr><td>177</td><td>B1</td><td>?</td><td>241</td><td>F1</td><td>±</td></tr><tr><td>178</td><td>B2</td><td>▓</td><td>242</td><td>F2</td><td>≥</td></tr><tr><td>179</td><td>B3</td><td>│</td><td>243</td><td>F3</td><td>≤</td></tr><tr><td>180</td><td>B4</td><td>┤</td><td>244</td><td>F4</td><td>?</td></tr><tr><td>181</td><td>B5</td><td>╡</td><td>245</td><td>F5</td><td>?</td></tr><tr><td>182</td><td>B6</td><td>╢</td><td>246</td><td>F6</td><td>÷</td></tr><tr><td>183</td><td>B7</td><td>╖</td><td>247</td><td>F7</td><td>≈</td></tr><tr><td>184</td><td>B8</td><td>╕</td><td>248</td><td>F8</td><td>≈</td></tr><tr><td>185</td><td>B9</td><td>╣</td><td>249</td><td>F9</td><td>?</td></tr><tr><td>186</td><td>BA</td><td>║</td><td>250</td><td>FA</td><td>·</td></tr><tr><td>187</td><td>BB</td><td>╗</td><td>251</td><td>FB</td><td>√</td></tr><tr><td>188</td><td>BC</td><td>╝</td><td>252</td><td>FC</td><td>?</td></tr><tr><td>189</td><td>BD</td><td>╜</td><td>253</td><td>FD</td><td>²</td></tr><tr><td>190</td><td>BE</td><td>╛</td><td>FE</td><td>■</td><td></td></tr><tr><td>191</td><td>BF</td><td>┐</td><td>255</td><td>FF</td><td>ÿ</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> ASCII </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo指令</title>
      <link href="/posts/89e11d40.html"/>
      <url>/posts/89e11d40.html</url>
      
        <content type="html"><![CDATA[<p>hexo指令</p><span id="more"></span><hr><h3 id="hexo基础命令"><a href="#hexo基础命令" class="headerlink" title="hexo基础命令"></a>hexo基础命令</h3><pre class=" language-markdown"><code class="language-markdown">hexo new post "文章名" :创建文章hexo clean ：删除之前生成的文件，若未生成过静态文件，可忽略此命令。hexo generate ：生成静态文章，可以用hexo g缩写 (尽量使用 hexo g -c 8 可以防止内存溢出)hexo deploy ：部署文章，可以用hexo d缩写hexo s -p 8000 : 搜索启动hexo server :运行服务hexo algolia ：搜集更新博文数据hexo cl &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; hexo s ：一条命令部属</code></pre><h3 id="多台电脑都可以使用个人博客"><a href="#多台电脑都可以使用个人博客" class="headerlink" title="多台电脑都可以使用个人博客"></a>多台电脑都可以使用个人博客</h3><p>除了master分支再建立一个hexo分支(设为默认)</p><p>创建一个叫hexo（或者blog，名字随意）的分支，并切换到这个分支</p><pre class=" language-markdown"><code class="language-markdown">git checkout -b hexo</code></pre><p>添加所有文件到暂存区</p><pre class=" language-markdown"><code class="language-markdown">git add –all</code></pre><p>进行提交</p><pre class=" language-markdown"><code class="language-markdown">git commit -m “提交信息xxx”</code></pre><p>推送hexo分支的文件到github仓库</p><pre class=" language-markdown"><code class="language-markdown">git push –set-upstream origin hexo</code></pre><h4 id="下次要写博客从仓库里把代码拉下来"><a href="#下次要写博客从仓库里把代码拉下来" class="headerlink" title="下次要写博客从仓库里把代码拉下来"></a>下次要写博客从仓库里把代码拉下来</h4><p>执行</p><pre class=" language-markdown"><code class="language-markdown">npm install hexonpm install hexo-cli -gnpm installnpm install hexo-deployer-git//执行完这四条命令 然后创建文章</code></pre><h4 id="刚拉下来博客"><a href="#刚拉下来博客" class="headerlink" title="刚拉下来博客"></a>刚拉下来博客</h4><pre class=" language-markdown"><code class="language-markdown">//需要执行下面命令安装依赖启动hexo服务npm installhexo server</code></pre><h3 id="替换md文件空行"><a href="#替换md文件空行" class="headerlink" title="替换md文件空行"></a>替换md文件空行</h3><pre class=" language-markdown"><code class="language-markdown">^\s*(?=\r?$)\n  :在vscode中替换空行的正则</code></pre><h3 id="更新giuhub仓库hexo分支"><a href="#更新giuhub仓库hexo分支" class="headerlink" title="更新giuhub仓库hexo分支"></a>更新giuhub仓库hexo分支</h3><pre class=" language-markdown"><code class="language-markdown">//如果本地代码没有写新的东西 第四条命令可以放到第一步去执行git status  :查看修改的文件git add .  :放入缓存区git commit -m “本次提交的备注”  :本次提交的文字说明git pull origin hexo  :远程更新本地没更新先更新远程脚本到本地git push -u origin hexo    :将项目上传到远程仓库的hexo分支</code></pre><h3 id="提交出错回滚到上个版本"><a href="#提交出错回滚到上个版本" class="headerlink" title="提交出错回滚到上个版本"></a>提交出错回滚到上个版本</h3><pre class=" language-markdown"><code class="language-markdown">git reset HEAD~1</code></pre><h3 id="报错"><a href="#报错" class="headerlink" title="报错 :"></a>报错 :</h3><h4 id="‘hexo’-不是内部或外部命令，也不是可运行的程序或批处理文件"><a href="#‘hexo’-不是内部或外部命令，也不是可运行的程序或批处理文件" class="headerlink" title="‘hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件"></a>‘hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件</h4><p>重新安装一下hexo </p><pre class=" language-markdown"><code class="language-markdown">npm install -g hexo-clinpm install hexo-server --save</code></pre><h4 id="failed-to-push-some-refs-to-‘github-com-PorcoRosso000-PorcoRosso000-github-io-git’"><a href="#failed-to-push-some-refs-to-‘github-com-PorcoRosso000-PorcoRosso000-github-io-git’" class="headerlink" title="failed to push some refs to ‘github.com:PorcoRosso000/PorcoRosso000.github.io.git’"></a>failed to push some refs to ‘github.com:PorcoRosso000/PorcoRosso000.github.io.git’</h4><p>远程库和本地库不一致<br>解决方案: 拉取远程库数据同步到本地库      </p><p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</p><pre class=" language-markdown"><code class="language-markdown">git pull --rebase origin hexo </code></pre><h4 id="error-cannot-pull-with-rebase-Your-index-contains-uncommitted-changes"><a href="#error-cannot-pull-with-rebase-Your-index-contains-uncommitted-changes" class="headerlink" title="error: cannot pull with rebase: Your index contains uncommitted changes."></a>error: cannot pull with rebase: Your index contains uncommitted changes.</h4><pre class=" language-markdown"><code class="language-markdown">error: cannot pull with rebase: Your index contains uncommitted changes.error: please commit or stash them.解决方案：修复冲突git stash     :储藏dev分支下的修改git pull --rebase    : 想要更好的提交树，使用rebase操作会更好一点。这样可以线性的看到每一次提交，并且没有增加提交节点。merge 操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit 就可以了。而rebase 操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行git rebase –continue继续操作，或者git rebase –skip忽略冲突。git stash pop     :取出之前储藏的修改之后就可以继续提交</code></pre><h3 id="文章配置"><a href="#文章配置" class="headerlink" title="文章配置"></a>文章配置</h3><p>Front-matter<br>Front-matter 是 markdown 文件最上方以—分隔的区域，用于指定个别档案的变数。</p><p>Page Front-matter 用于页面配置<br>Post Front-matter 用于文章页配置<br>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p><h4 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h4><p>title:<br>date:<br>updated:<br>type:<br>comments:<br>description:<br>keywords:<br>top_img:<br>mathjax:<br>katex:<br>aside:<br>aplayer:<br>highlight_shrink:</p><hr><p>写法    解释<br>title    【必需】页面标题<br>date    【必需】页面创建日期<br>type    【必需】标籤、分类和友情链接三个页面需要配置<br>updated    【可选】页面更新日期<br>description    【可选】页面描述<br>keywords    【可选】页面关键字<br>comments    【可选】显示页面评论模块(默认 true)<br>top_img    【可选】页面顶部图片<br>mathjax    【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex    【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aside    【可选】显示侧边栏 (默认 true)<br>aplayer    【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink    【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</p><hr><h4 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h4><hr><p>title:<br>date:<br>updated:<br>tags:<br>categories:<br>keywords:<br>description:<br>top_img:<br>comments:<br>cover:<br>toc:<br>toc_number:<br>toc_style_simple:<br>copyright:<br>copyright_author:<br>copyright_author_href:<br>copyright_url:<br>copyright_info:<br>mathjax:<br>katex:<br>aplayer:<br>highlight_shrink:<br>aside:</p><hr><p>写法    解释<br>title    【必需】文章标题<br>date    【必需】文章创建日期<br>updated    【可选】文章更新日期<br>tags    【可选】文章标籤<br>categories    【可选】文章分类<br>keywords    【可选】文章关键字<br>description    【可选】文章描述<br>top_img    【可选】文章顶部图片<br>cover    【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)<br>comments    【可选】显示文章评论模块(默认 true)<br>toc    【可选】显示文章TOC(默认为设置中toc的enable配置)<br>toc_number    【可选】显示toc_number(默认为设置中toc的number配置)<br>toc_style_simple    【可选】显示 toc 简洁模式<br>copyright    【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author    【可选】文章版权模块的文章作者<br>copyright_author_href    【可选】文章版权模块的文章作者链接<br>copyright_url    【可选】文章版权模块的文章连结链接<br>copyright_info    【可选】文章版权模块的版权声明文字<br>mathjax    【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex    【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aplayer    【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink    【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)<br>aside    【可选】显示侧边栏 (默认 true)</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
